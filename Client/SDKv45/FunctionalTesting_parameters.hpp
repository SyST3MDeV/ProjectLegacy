#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FunctionalTesting

#include "Basic.hpp"

#include "FunctionalTesting_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FunctionalTesting.FunctionalTest.AddError
// 0x0010 (0x0010 - 0x0000)
struct FunctionalTest_AddError final
{
public:
	class FString                                 MESSAGE;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_AddError) == 0x000008, "Wrong alignment on FunctionalTest_AddError");
static_assert(sizeof(FunctionalTest_AddError) == 0x000010, "Wrong size on FunctionalTest_AddError");
static_assert(offsetof(FunctionalTest_AddError, MESSAGE) == 0x000000, "Member 'FunctionalTest_AddError::MESSAGE' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AddRerun
// 0x0008 (0x0008 - 0x0000)
struct FunctionalTest_AddRerun final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_AddRerun) == 0x000004, "Wrong alignment on FunctionalTest_AddRerun");
static_assert(sizeof(FunctionalTest_AddRerun) == 0x000008, "Wrong size on FunctionalTest_AddRerun");
static_assert(offsetof(FunctionalTest_AddRerun, Reason) == 0x000000, "Member 'FunctionalTest_AddRerun::Reason' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AddWarning
// 0x0010 (0x0010 - 0x0000)
struct FunctionalTest_AddWarning final
{
public:
	class FString                                 MESSAGE;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_AddWarning) == 0x000008, "Wrong alignment on FunctionalTest_AddWarning");
static_assert(sizeof(FunctionalTest_AddWarning) == 0x000010, "Wrong size on FunctionalTest_AddWarning");
static_assert(offsetof(FunctionalTest_AddWarning, MESSAGE) == 0x000000, "Member 'FunctionalTest_AddWarning::MESSAGE' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_Bool
// 0x0028 (0x0028 - 0x0000)
struct FunctionalTest_AssertEqual_Bool final
{
public:
	bool                                          Actual;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expected;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_Bool) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_Bool");
static_assert(sizeof(FunctionalTest_AssertEqual_Bool) == 0x000028, "Wrong size on FunctionalTest_AssertEqual_Bool");
static_assert(offsetof(FunctionalTest_AssertEqual_Bool, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_Bool::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Bool, Expected) == 0x000001, "Member 'FunctionalTest_AssertEqual_Bool::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Bool, What) == 0x000008, "Member 'FunctionalTest_AssertEqual_Bool::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Bool, ContextObject) == 0x000018, "Member 'FunctionalTest_AssertEqual_Bool::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Bool, ReturnValue) == 0x000020, "Member 'FunctionalTest_AssertEqual_Bool::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_Float
// 0x0030 (0x0030 - 0x0000)
struct FunctionalTest_AssertEqual_Float final
{
public:
	float                                         Actual;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Expected;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ContextObject;                                     // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_Float) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_Float");
static_assert(sizeof(FunctionalTest_AssertEqual_Float) == 0x000030, "Wrong size on FunctionalTest_AssertEqual_Float");
static_assert(offsetof(FunctionalTest_AssertEqual_Float, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_Float::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Float, Expected) == 0x000004, "Member 'FunctionalTest_AssertEqual_Float::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Float, What) == 0x000008, "Member 'FunctionalTest_AssertEqual_Float::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Float, Tolerance) == 0x000018, "Member 'FunctionalTest_AssertEqual_Float::Tolerance' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Float, ContextObject) == 0x000020, "Member 'FunctionalTest_AssertEqual_Float::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Float, ReturnValue) == 0x000028, "Member 'FunctionalTest_AssertEqual_Float::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_Int
// 0x0028 (0x0028 - 0x0000)
struct FunctionalTest_AssertEqual_Int final
{
public:
	int32                                         Actual;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expected;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_Int) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_Int");
static_assert(sizeof(FunctionalTest_AssertEqual_Int) == 0x000028, "Wrong size on FunctionalTest_AssertEqual_Int");
static_assert(offsetof(FunctionalTest_AssertEqual_Int, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_Int::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Int, Expected) == 0x000004, "Member 'FunctionalTest_AssertEqual_Int::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Int, What) == 0x000008, "Member 'FunctionalTest_AssertEqual_Int::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Int, ContextObject) == 0x000018, "Member 'FunctionalTest_AssertEqual_Int::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Int, ReturnValue) == 0x000020, "Member 'FunctionalTest_AssertEqual_Int::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_Name
// 0x0030 (0x0030 - 0x0000)
struct FunctionalTest_AssertEqual_Name final
{
public:
	class FName                                   Actual;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Expected;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_Name) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_Name");
static_assert(sizeof(FunctionalTest_AssertEqual_Name) == 0x000030, "Wrong size on FunctionalTest_AssertEqual_Name");
static_assert(offsetof(FunctionalTest_AssertEqual_Name, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_Name::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Name, Expected) == 0x000008, "Member 'FunctionalTest_AssertEqual_Name::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Name, What) == 0x000010, "Member 'FunctionalTest_AssertEqual_Name::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Name, ContextObject) == 0x000020, "Member 'FunctionalTest_AssertEqual_Name::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Name, ReturnValue) == 0x000028, "Member 'FunctionalTest_AssertEqual_Name::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_Rotator
// 0x0040 (0x0040 - 0x0000)
struct FunctionalTest_AssertEqual_Rotator final
{
public:
	struct FRotator                               Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Expected;                                          // 0x000C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ContextObject;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_Rotator) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_Rotator");
static_assert(sizeof(FunctionalTest_AssertEqual_Rotator) == 0x000040, "Wrong size on FunctionalTest_AssertEqual_Rotator");
static_assert(offsetof(FunctionalTest_AssertEqual_Rotator, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_Rotator::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Rotator, Expected) == 0x00000C, "Member 'FunctionalTest_AssertEqual_Rotator::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Rotator, What) == 0x000018, "Member 'FunctionalTest_AssertEqual_Rotator::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Rotator, Tolerance) == 0x000028, "Member 'FunctionalTest_AssertEqual_Rotator::Tolerance' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Rotator, ContextObject) == 0x000030, "Member 'FunctionalTest_AssertEqual_Rotator::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Rotator, ReturnValue) == 0x000038, "Member 'FunctionalTest_AssertEqual_Rotator::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_String
// 0x0040 (0x0040 - 0x0000)
struct FunctionalTest_AssertEqual_String final
{
public:
	class FString                                 Actual;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Expected;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_String) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_String");
static_assert(sizeof(FunctionalTest_AssertEqual_String) == 0x000040, "Wrong size on FunctionalTest_AssertEqual_String");
static_assert(offsetof(FunctionalTest_AssertEqual_String, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_String::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_String, Expected) == 0x000010, "Member 'FunctionalTest_AssertEqual_String::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_String, What) == 0x000020, "Member 'FunctionalTest_AssertEqual_String::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_String, ContextObject) == 0x000030, "Member 'FunctionalTest_AssertEqual_String::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_String, ReturnValue) == 0x000038, "Member 'FunctionalTest_AssertEqual_String::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_TraceQueryResults
// 0x0030 (0x0030 - 0x0000)
struct FunctionalTest_AssertEqual_TraceQueryResults final
{
public:
	const class UTraceQueryTestResults*           Actual;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTraceQueryTestResults*           Expected;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_TraceQueryResults) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_TraceQueryResults");
static_assert(sizeof(FunctionalTest_AssertEqual_TraceQueryResults) == 0x000030, "Wrong size on FunctionalTest_AssertEqual_TraceQueryResults");
static_assert(offsetof(FunctionalTest_AssertEqual_TraceQueryResults, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_TraceQueryResults::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_TraceQueryResults, Expected) == 0x000008, "Member 'FunctionalTest_AssertEqual_TraceQueryResults::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_TraceQueryResults, What) == 0x000010, "Member 'FunctionalTest_AssertEqual_TraceQueryResults::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_TraceQueryResults, ContextObject) == 0x000020, "Member 'FunctionalTest_AssertEqual_TraceQueryResults::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_TraceQueryResults, ReturnValue) == 0x000028, "Member 'FunctionalTest_AssertEqual_TraceQueryResults::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_Transform
// 0x0090 (0x0090 - 0x0000)
struct FunctionalTest_AssertEqual_Transform final
{
public:
	struct FTransform                             Actual;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Expected;                                          // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ContextObject;                                     // 0x0078(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_Transform) == 0x000010, "Wrong alignment on FunctionalTest_AssertEqual_Transform");
static_assert(sizeof(FunctionalTest_AssertEqual_Transform) == 0x000090, "Wrong size on FunctionalTest_AssertEqual_Transform");
static_assert(offsetof(FunctionalTest_AssertEqual_Transform, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_Transform::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Transform, Expected) == 0x000030, "Member 'FunctionalTest_AssertEqual_Transform::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Transform, What) == 0x000060, "Member 'FunctionalTest_AssertEqual_Transform::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Transform, Tolerance) == 0x000070, "Member 'FunctionalTest_AssertEqual_Transform::Tolerance' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Transform, ContextObject) == 0x000078, "Member 'FunctionalTest_AssertEqual_Transform::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Transform, ReturnValue) == 0x000080, "Member 'FunctionalTest_AssertEqual_Transform::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertEqual_Vector
// 0x0040 (0x0040 - 0x0000)
struct FunctionalTest_AssertEqual_Vector final
{
public:
	struct FVector                                Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Expected;                                          // 0x000C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ContextObject;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertEqual_Vector) == 0x000008, "Wrong alignment on FunctionalTest_AssertEqual_Vector");
static_assert(sizeof(FunctionalTest_AssertEqual_Vector) == 0x000040, "Wrong size on FunctionalTest_AssertEqual_Vector");
static_assert(offsetof(FunctionalTest_AssertEqual_Vector, Actual) == 0x000000, "Member 'FunctionalTest_AssertEqual_Vector::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Vector, Expected) == 0x00000C, "Member 'FunctionalTest_AssertEqual_Vector::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Vector, What) == 0x000018, "Member 'FunctionalTest_AssertEqual_Vector::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Vector, Tolerance) == 0x000028, "Member 'FunctionalTest_AssertEqual_Vector::Tolerance' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Vector, ContextObject) == 0x000030, "Member 'FunctionalTest_AssertEqual_Vector::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertEqual_Vector, ReturnValue) == 0x000038, "Member 'FunctionalTest_AssertEqual_Vector::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertFalse
// 0x0028 (0x0028 - 0x0000)
struct FunctionalTest_AssertFalse final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MESSAGE;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertFalse) == 0x000008, "Wrong alignment on FunctionalTest_AssertFalse");
static_assert(sizeof(FunctionalTest_AssertFalse) == 0x000028, "Wrong size on FunctionalTest_AssertFalse");
static_assert(offsetof(FunctionalTest_AssertFalse, Condition) == 0x000000, "Member 'FunctionalTest_AssertFalse::Condition' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertFalse, MESSAGE) == 0x000008, "Member 'FunctionalTest_AssertFalse::MESSAGE' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertFalse, ContextObject) == 0x000018, "Member 'FunctionalTest_AssertFalse::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertFalse, ReturnValue) == 0x000020, "Member 'FunctionalTest_AssertFalse::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertIsValid
// 0x0028 (0x0028 - 0x0000)
struct FunctionalTest_AssertIsValid final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MESSAGE;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertIsValid) == 0x000008, "Wrong alignment on FunctionalTest_AssertIsValid");
static_assert(sizeof(FunctionalTest_AssertIsValid) == 0x000028, "Wrong size on FunctionalTest_AssertIsValid");
static_assert(offsetof(FunctionalTest_AssertIsValid, Object) == 0x000000, "Member 'FunctionalTest_AssertIsValid::Object' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertIsValid, MESSAGE) == 0x000008, "Member 'FunctionalTest_AssertIsValid::MESSAGE' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertIsValid, ContextObject) == 0x000018, "Member 'FunctionalTest_AssertIsValid::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertIsValid, ReturnValue) == 0x000020, "Member 'FunctionalTest_AssertIsValid::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertNotEqual_Rotator
// 0x0038 (0x0038 - 0x0000)
struct FunctionalTest_AssertNotEqual_Rotator final
{
public:
	struct FRotator                               Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               NotExpected;                                       // 0x000C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertNotEqual_Rotator) == 0x000008, "Wrong alignment on FunctionalTest_AssertNotEqual_Rotator");
static_assert(sizeof(FunctionalTest_AssertNotEqual_Rotator) == 0x000038, "Wrong size on FunctionalTest_AssertNotEqual_Rotator");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Rotator, Actual) == 0x000000, "Member 'FunctionalTest_AssertNotEqual_Rotator::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Rotator, NotExpected) == 0x00000C, "Member 'FunctionalTest_AssertNotEqual_Rotator::NotExpected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Rotator, What) == 0x000018, "Member 'FunctionalTest_AssertNotEqual_Rotator::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Rotator, ContextObject) == 0x000028, "Member 'FunctionalTest_AssertNotEqual_Rotator::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Rotator, ReturnValue) == 0x000030, "Member 'FunctionalTest_AssertNotEqual_Rotator::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertNotEqual_String
// 0x0040 (0x0040 - 0x0000)
struct FunctionalTest_AssertNotEqual_String final
{
public:
	class FString                                 Actual;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NotExpected;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertNotEqual_String) == 0x000008, "Wrong alignment on FunctionalTest_AssertNotEqual_String");
static_assert(sizeof(FunctionalTest_AssertNotEqual_String) == 0x000040, "Wrong size on FunctionalTest_AssertNotEqual_String");
static_assert(offsetof(FunctionalTest_AssertNotEqual_String, Actual) == 0x000000, "Member 'FunctionalTest_AssertNotEqual_String::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_String, NotExpected) == 0x000010, "Member 'FunctionalTest_AssertNotEqual_String::NotExpected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_String, What) == 0x000020, "Member 'FunctionalTest_AssertNotEqual_String::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_String, ContextObject) == 0x000030, "Member 'FunctionalTest_AssertNotEqual_String::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_String, ReturnValue) == 0x000038, "Member 'FunctionalTest_AssertNotEqual_String::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertNotEqual_Transform
// 0x0080 (0x0080 - 0x0000)
struct FunctionalTest_AssertNotEqual_Transform final
{
public:
	struct FTransform                             Actual;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             NotExpected;                                       // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertNotEqual_Transform) == 0x000010, "Wrong alignment on FunctionalTest_AssertNotEqual_Transform");
static_assert(sizeof(FunctionalTest_AssertNotEqual_Transform) == 0x000080, "Wrong size on FunctionalTest_AssertNotEqual_Transform");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Transform, Actual) == 0x000000, "Member 'FunctionalTest_AssertNotEqual_Transform::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Transform, NotExpected) == 0x000030, "Member 'FunctionalTest_AssertNotEqual_Transform::NotExpected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Transform, What) == 0x000060, "Member 'FunctionalTest_AssertNotEqual_Transform::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Transform, ContextObject) == 0x000070, "Member 'FunctionalTest_AssertNotEqual_Transform::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Transform, ReturnValue) == 0x000078, "Member 'FunctionalTest_AssertNotEqual_Transform::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertNotEqual_Vector
// 0x0038 (0x0038 - 0x0000)
struct FunctionalTest_AssertNotEqual_Vector final
{
public:
	struct FVector                                Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NotExpected;                                       // 0x000C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertNotEqual_Vector) == 0x000008, "Wrong alignment on FunctionalTest_AssertNotEqual_Vector");
static_assert(sizeof(FunctionalTest_AssertNotEqual_Vector) == 0x000038, "Wrong size on FunctionalTest_AssertNotEqual_Vector");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Vector, Actual) == 0x000000, "Member 'FunctionalTest_AssertNotEqual_Vector::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Vector, NotExpected) == 0x00000C, "Member 'FunctionalTest_AssertNotEqual_Vector::NotExpected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Vector, What) == 0x000018, "Member 'FunctionalTest_AssertNotEqual_Vector::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Vector, ContextObject) == 0x000028, "Member 'FunctionalTest_AssertNotEqual_Vector::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertNotEqual_Vector, ReturnValue) == 0x000030, "Member 'FunctionalTest_AssertNotEqual_Vector::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertTrue
// 0x0028 (0x0028 - 0x0000)
struct FunctionalTest_AssertTrue final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MESSAGE;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertTrue) == 0x000008, "Wrong alignment on FunctionalTest_AssertTrue");
static_assert(sizeof(FunctionalTest_AssertTrue) == 0x000028, "Wrong size on FunctionalTest_AssertTrue");
static_assert(offsetof(FunctionalTest_AssertTrue, Condition) == 0x000000, "Member 'FunctionalTest_AssertTrue::Condition' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertTrue, MESSAGE) == 0x000008, "Member 'FunctionalTest_AssertTrue::MESSAGE' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertTrue, ContextObject) == 0x000018, "Member 'FunctionalTest_AssertTrue::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertTrue, ReturnValue) == 0x000020, "Member 'FunctionalTest_AssertTrue::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertValue_DateTime
// 0x0038 (0x0038 - 0x0000)
struct FunctionalTest_AssertValue_DateTime final
{
public:
	struct FDateTime                              Actual;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonMethod                             ShouldBe;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expected;                                          // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertValue_DateTime) == 0x000008, "Wrong alignment on FunctionalTest_AssertValue_DateTime");
static_assert(sizeof(FunctionalTest_AssertValue_DateTime) == 0x000038, "Wrong size on FunctionalTest_AssertValue_DateTime");
static_assert(offsetof(FunctionalTest_AssertValue_DateTime, Actual) == 0x000000, "Member 'FunctionalTest_AssertValue_DateTime::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_DateTime, ShouldBe) == 0x000008, "Member 'FunctionalTest_AssertValue_DateTime::ShouldBe' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_DateTime, Expected) == 0x000010, "Member 'FunctionalTest_AssertValue_DateTime::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_DateTime, What) == 0x000018, "Member 'FunctionalTest_AssertValue_DateTime::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_DateTime, ContextObject) == 0x000028, "Member 'FunctionalTest_AssertValue_DateTime::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_DateTime, ReturnValue) == 0x000030, "Member 'FunctionalTest_AssertValue_DateTime::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertValue_Float
// 0x0030 (0x0030 - 0x0000)
struct FunctionalTest_AssertValue_Float final
{
public:
	float                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonMethod                             ShouldBe;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Expected;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertValue_Float) == 0x000008, "Wrong alignment on FunctionalTest_AssertValue_Float");
static_assert(sizeof(FunctionalTest_AssertValue_Float) == 0x000030, "Wrong size on FunctionalTest_AssertValue_Float");
static_assert(offsetof(FunctionalTest_AssertValue_Float, Actual) == 0x000000, "Member 'FunctionalTest_AssertValue_Float::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Float, ShouldBe) == 0x000004, "Member 'FunctionalTest_AssertValue_Float::ShouldBe' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Float, Expected) == 0x000008, "Member 'FunctionalTest_AssertValue_Float::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Float, What) == 0x000010, "Member 'FunctionalTest_AssertValue_Float::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Float, ContextObject) == 0x000020, "Member 'FunctionalTest_AssertValue_Float::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Float, ReturnValue) == 0x000028, "Member 'FunctionalTest_AssertValue_Float::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.AssertValue_Int
// 0x0030 (0x0030 - 0x0000)
struct FunctionalTest_AssertValue_Int final
{
public:
	int32                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonMethod                             ShouldBe;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Expected;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ContextObject;                                     // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_AssertValue_Int) == 0x000008, "Wrong alignment on FunctionalTest_AssertValue_Int");
static_assert(sizeof(FunctionalTest_AssertValue_Int) == 0x000030, "Wrong size on FunctionalTest_AssertValue_Int");
static_assert(offsetof(FunctionalTest_AssertValue_Int, Actual) == 0x000000, "Member 'FunctionalTest_AssertValue_Int::Actual' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Int, ShouldBe) == 0x000004, "Member 'FunctionalTest_AssertValue_Int::ShouldBe' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Int, Expected) == 0x000008, "Member 'FunctionalTest_AssertValue_Int::Expected' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Int, What) == 0x000010, "Member 'FunctionalTest_AssertValue_Int::What' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Int, ContextObject) == 0x000020, "Member 'FunctionalTest_AssertValue_Int::ContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTest_AssertValue_Int, ReturnValue) == 0x000028, "Member 'FunctionalTest_AssertValue_Int::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.FinishTest
// 0x0018 (0x0018 - 0x0000)
struct FunctionalTest_FinishTest final
{
public:
	EFunctionalTestResult                         TestResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MESSAGE;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_FinishTest) == 0x000008, "Wrong alignment on FunctionalTest_FinishTest");
static_assert(sizeof(FunctionalTest_FinishTest) == 0x000018, "Wrong size on FunctionalTest_FinishTest");
static_assert(offsetof(FunctionalTest_FinishTest, TestResult) == 0x000000, "Member 'FunctionalTest_FinishTest::TestResult' has a wrong offset!");
static_assert(offsetof(FunctionalTest_FinishTest, MESSAGE) == 0x000008, "Member 'FunctionalTest_FinishTest::MESSAGE' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.IsReady
// 0x0001 (0x0001 - 0x0000)
struct FunctionalTest_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_IsReady) == 0x000001, "Wrong alignment on FunctionalTest_IsReady");
static_assert(sizeof(FunctionalTest_IsReady) == 0x000001, "Wrong size on FunctionalTest_IsReady");
static_assert(offsetof(FunctionalTest_IsReady, ReturnValue) == 0x000000, "Member 'FunctionalTest_IsReady::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.LogMessage
// 0x0010 (0x0010 - 0x0000)
struct FunctionalTest_LogMessage final
{
public:
	class FString                                 MESSAGE;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_LogMessage) == 0x000008, "Wrong alignment on FunctionalTest_LogMessage");
static_assert(sizeof(FunctionalTest_LogMessage) == 0x000010, "Wrong size on FunctionalTest_LogMessage");
static_assert(offsetof(FunctionalTest_LogMessage, MESSAGE) == 0x000000, "Member 'FunctionalTest_LogMessage::MESSAGE' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.RegisterAutoDestroyActor
// 0x0008 (0x0008 - 0x0000)
struct FunctionalTest_RegisterAutoDestroyActor final
{
public:
	class AActor*                                 ActorToAutoDestroy;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_RegisterAutoDestroyActor) == 0x000008, "Wrong alignment on FunctionalTest_RegisterAutoDestroyActor");
static_assert(sizeof(FunctionalTest_RegisterAutoDestroyActor) == 0x000008, "Wrong size on FunctionalTest_RegisterAutoDestroyActor");
static_assert(offsetof(FunctionalTest_RegisterAutoDestroyActor, ActorToAutoDestroy) == 0x000000, "Member 'FunctionalTest_RegisterAutoDestroyActor::ActorToAutoDestroy' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.SetTimeLimit
// 0x0008 (0x0008 - 0x0000)
struct FunctionalTest_SetTimeLimit final
{
public:
	float                                         NewTimeLimit;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFunctionalTestResult                         ResultWhenTimeRunsOut;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTest_SetTimeLimit) == 0x000004, "Wrong alignment on FunctionalTest_SetTimeLimit");
static_assert(sizeof(FunctionalTest_SetTimeLimit) == 0x000008, "Wrong size on FunctionalTest_SetTimeLimit");
static_assert(offsetof(FunctionalTest_SetTimeLimit, NewTimeLimit) == 0x000000, "Member 'FunctionalTest_SetTimeLimit::NewTimeLimit' has a wrong offset!");
static_assert(offsetof(FunctionalTest_SetTimeLimit, ResultWhenTimeRunsOut) == 0x000004, "Member 'FunctionalTest_SetTimeLimit::ResultWhenTimeRunsOut' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.DebugGatherRelevantActors
// 0x0010 (0x0010 - 0x0000)
struct FunctionalTest_DebugGatherRelevantActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_DebugGatherRelevantActors) == 0x000008, "Wrong alignment on FunctionalTest_DebugGatherRelevantActors");
static_assert(sizeof(FunctionalTest_DebugGatherRelevantActors) == 0x000010, "Wrong size on FunctionalTest_DebugGatherRelevantActors");
static_assert(offsetof(FunctionalTest_DebugGatherRelevantActors, ReturnValue) == 0x000000, "Member 'FunctionalTest_DebugGatherRelevantActors::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.GetCurrentRerunReason
// 0x0008 (0x0008 - 0x0000)
struct FunctionalTest_GetCurrentRerunReason final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_GetCurrentRerunReason) == 0x000004, "Wrong alignment on FunctionalTest_GetCurrentRerunReason");
static_assert(sizeof(FunctionalTest_GetCurrentRerunReason) == 0x000008, "Wrong size on FunctionalTest_GetCurrentRerunReason");
static_assert(offsetof(FunctionalTest_GetCurrentRerunReason, ReturnValue) == 0x000000, "Member 'FunctionalTest_GetCurrentRerunReason::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FunctionalTest_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_IsEnabled) == 0x000001, "Wrong alignment on FunctionalTest_IsEnabled");
static_assert(sizeof(FunctionalTest_IsEnabled) == 0x000001, "Wrong size on FunctionalTest_IsEnabled");
static_assert(offsetof(FunctionalTest_IsEnabled, ReturnValue) == 0x000000, "Member 'FunctionalTest_IsEnabled::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct FunctionalTest_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_IsRunning) == 0x000001, "Wrong alignment on FunctionalTest_IsRunning");
static_assert(sizeof(FunctionalTest_IsRunning) == 0x000001, "Wrong size on FunctionalTest_IsRunning");
static_assert(offsetof(FunctionalTest_IsRunning, ReturnValue) == 0x000000, "Member 'FunctionalTest_IsRunning::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.OnAdditionalTestFinishedMessageRequest
// 0x0018 (0x0018 - 0x0000)
struct FunctionalTest_OnAdditionalTestFinishedMessageRequest final
{
public:
	EFunctionalTestResult                         TestResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_OnAdditionalTestFinishedMessageRequest) == 0x000008, "Wrong alignment on FunctionalTest_OnAdditionalTestFinishedMessageRequest");
static_assert(sizeof(FunctionalTest_OnAdditionalTestFinishedMessageRequest) == 0x000018, "Wrong size on FunctionalTest_OnAdditionalTestFinishedMessageRequest");
static_assert(offsetof(FunctionalTest_OnAdditionalTestFinishedMessageRequest, TestResult) == 0x000000, "Member 'FunctionalTest_OnAdditionalTestFinishedMessageRequest::TestResult' has a wrong offset!");
static_assert(offsetof(FunctionalTest_OnAdditionalTestFinishedMessageRequest, ReturnValue) == 0x000008, "Member 'FunctionalTest_OnAdditionalTestFinishedMessageRequest::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTest.OnWantsReRunCheck
// 0x0001 (0x0001 - 0x0000)
struct FunctionalTest_OnWantsReRunCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTest_OnWantsReRunCheck) == 0x000001, "Wrong alignment on FunctionalTest_OnWantsReRunCheck");
static_assert(sizeof(FunctionalTest_OnWantsReRunCheck) == 0x000001, "Wrong size on FunctionalTest_OnWantsReRunCheck");
static_assert(offsetof(FunctionalTest_OnWantsReRunCheck, ReturnValue) == 0x000000, "Member 'FunctionalTest_OnWantsReRunCheck::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.AreAutomatedTestsRunning
// 0x0001 (0x0001 - 0x0000)
struct AutomationBlueprintFunctionLibrary_AreAutomatedTestsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_AreAutomatedTestsRunning) == 0x000001, "Wrong alignment on AutomationBlueprintFunctionLibrary_AreAutomatedTestsRunning");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_AreAutomatedTestsRunning) == 0x000001, "Wrong size on AutomationBlueprintFunctionLibrary_AreAutomatedTestsRunning");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_AreAutomatedTestsRunning, ReturnValue) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_AreAutomatedTestsRunning::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.DisableStatGroup
// 0x0010 (0x0010 - 0x0000)
struct AutomationBlueprintFunctionLibrary_DisableStatGroup final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_DisableStatGroup) == 0x000008, "Wrong alignment on AutomationBlueprintFunctionLibrary_DisableStatGroup");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_DisableStatGroup) == 0x000010, "Wrong size on AutomationBlueprintFunctionLibrary_DisableStatGroup");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_DisableStatGroup, WorldContextObject) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_DisableStatGroup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_DisableStatGroup, GroupName) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_DisableStatGroup::GroupName' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.EnableStatGroup
// 0x0010 (0x0010 - 0x0000)
struct AutomationBlueprintFunctionLibrary_EnableStatGroup final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_EnableStatGroup) == 0x000008, "Wrong alignment on AutomationBlueprintFunctionLibrary_EnableStatGroup");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_EnableStatGroup) == 0x000010, "Wrong size on AutomationBlueprintFunctionLibrary_EnableStatGroup");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_EnableStatGroup, WorldContextObject) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_EnableStatGroup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_EnableStatGroup, GroupName) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_EnableStatGroup::GroupName' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.GetDefaultScreenshotOptionsForGameplay
// 0x0038 (0x0038 - 0x0000)
struct AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay final
{
public:
	EComparisonTolerance                          Tolerance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAutomationScreenshotOptions           ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay) == 0x000008, "Wrong alignment on AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay) == 0x000038, "Wrong size on AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay, Tolerance) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay::Tolerance' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay, Delay) == 0x000004, "Member 'AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay::Delay' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay, ReturnValue) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForGameplay::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.GetDefaultScreenshotOptionsForRendering
// 0x0038 (0x0038 - 0x0000)
struct AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering final
{
public:
	EComparisonTolerance                          Tolerance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAutomationScreenshotOptions           ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering) == 0x000008, "Wrong alignment on AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering) == 0x000038, "Wrong size on AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering, Tolerance) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering::Tolerance' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering, Delay) == 0x000004, "Member 'AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering::Delay' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering, ReturnValue) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_GetDefaultScreenshotOptionsForRendering::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.GetStatCallCount
// 0x0010 (0x0010 - 0x0000)
struct AutomationBlueprintFunctionLibrary_GetStatCallCount final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_GetStatCallCount) == 0x000004, "Wrong alignment on AutomationBlueprintFunctionLibrary_GetStatCallCount");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_GetStatCallCount) == 0x000010, "Wrong size on AutomationBlueprintFunctionLibrary_GetStatCallCount");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatCallCount, StatName) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_GetStatCallCount::StatName' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatCallCount, ReturnValue) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_GetStatCallCount::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.GetStatExcAverage
// 0x0010 (0x0010 - 0x0000)
struct AutomationBlueprintFunctionLibrary_GetStatExcAverage final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_GetStatExcAverage) == 0x000004, "Wrong alignment on AutomationBlueprintFunctionLibrary_GetStatExcAverage");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_GetStatExcAverage) == 0x000010, "Wrong size on AutomationBlueprintFunctionLibrary_GetStatExcAverage");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatExcAverage, StatName) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_GetStatExcAverage::StatName' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatExcAverage, ReturnValue) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_GetStatExcAverage::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.GetStatExcMax
// 0x0010 (0x0010 - 0x0000)
struct AutomationBlueprintFunctionLibrary_GetStatExcMax final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_GetStatExcMax) == 0x000004, "Wrong alignment on AutomationBlueprintFunctionLibrary_GetStatExcMax");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_GetStatExcMax) == 0x000010, "Wrong size on AutomationBlueprintFunctionLibrary_GetStatExcMax");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatExcMax, StatName) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_GetStatExcMax::StatName' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatExcMax, ReturnValue) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_GetStatExcMax::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.GetStatIncAverage
// 0x0010 (0x0010 - 0x0000)
struct AutomationBlueprintFunctionLibrary_GetStatIncAverage final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_GetStatIncAverage) == 0x000004, "Wrong alignment on AutomationBlueprintFunctionLibrary_GetStatIncAverage");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_GetStatIncAverage) == 0x000010, "Wrong size on AutomationBlueprintFunctionLibrary_GetStatIncAverage");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatIncAverage, StatName) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_GetStatIncAverage::StatName' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatIncAverage, ReturnValue) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_GetStatIncAverage::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.GetStatIncMax
// 0x0010 (0x0010 - 0x0000)
struct AutomationBlueprintFunctionLibrary_GetStatIncMax final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_GetStatIncMax) == 0x000004, "Wrong alignment on AutomationBlueprintFunctionLibrary_GetStatIncMax");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_GetStatIncMax) == 0x000010, "Wrong size on AutomationBlueprintFunctionLibrary_GetStatIncMax");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatIncMax, StatName) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_GetStatIncMax::StatName' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_GetStatIncMax, ReturnValue) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_GetStatIncMax::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.TakeAutomationScreenshot
// 0x0060 (0x0060 - 0x0000)
struct AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAutomationScreenshotOptions           Options;                                           // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot) == 0x000008, "Wrong alignment on AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot) == 0x000060, "Wrong size on AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot, WorldContextObject) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot, LatentInfo) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot::LatentInfo' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot, Name_0) == 0x000020, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot::Name_0' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot, Options) == 0x000030, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshot::Options' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.TakeAutomationScreenshotAtCamera
// 0x0068 (0x0068 - 0x0000)
struct AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class ACameraActor*                           Camera;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameOverride;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAutomationScreenshotOptions           Options;                                           // 0x0038(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera) == 0x000008, "Wrong alignment on AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera) == 0x000068, "Wrong size on AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera, WorldContextObject) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera, LatentInfo) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera::LatentInfo' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera, Camera) == 0x000020, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera::Camera' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera, NameOverride) == 0x000028, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera::NameOverride' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera, Options) == 0x000038, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotAtCamera::Options' has a wrong offset!");

// Function FunctionalTesting.AutomationBlueprintFunctionLibrary.TakeAutomationScreenshotOfUI
// 0x0060 (0x0060 - 0x0000)
struct AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAutomationScreenshotOptions           Options;                                           // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI) == 0x000008, "Wrong alignment on AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI");
static_assert(sizeof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI) == 0x000060, "Wrong size on AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI, WorldContextObject) == 0x000000, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI, LatentInfo) == 0x000008, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI::LatentInfo' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI, Name_0) == 0x000020, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI::Name_0' has a wrong offset!");
static_assert(offsetof(AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI, Options) == 0x000030, "Member 'AutomationBlueprintFunctionLibrary_TakeAutomationScreenshotOfUI::Options' has a wrong offset!");

// Function FunctionalTesting.FunctionalAITest.IsOneOfSpawnedPawns
// 0x0010 (0x0010 - 0x0000)
struct FunctionalAITest_IsOneOfSpawnedPawns final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalAITest_IsOneOfSpawnedPawns) == 0x000008, "Wrong alignment on FunctionalAITest_IsOneOfSpawnedPawns");
static_assert(sizeof(FunctionalAITest_IsOneOfSpawnedPawns) == 0x000010, "Wrong size on FunctionalAITest_IsOneOfSpawnedPawns");
static_assert(offsetof(FunctionalAITest_IsOneOfSpawnedPawns, Actor) == 0x000000, "Member 'FunctionalAITest_IsOneOfSpawnedPawns::Actor' has a wrong offset!");
static_assert(offsetof(FunctionalAITest_IsOneOfSpawnedPawns, ReturnValue) == 0x000008, "Member 'FunctionalAITest_IsOneOfSpawnedPawns::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.BeginRecording
// 0x0020 (0x0020 - 0x0000)
struct AutomationPerformaceHelper_BeginRecording final
{
public:
	class FString                                 RecordName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InGPUBudget;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRenderThreadBudget;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InGameThreadBudget;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationPerformaceHelper_BeginRecording) == 0x000008, "Wrong alignment on AutomationPerformaceHelper_BeginRecording");
static_assert(sizeof(AutomationPerformaceHelper_BeginRecording) == 0x000020, "Wrong size on AutomationPerformaceHelper_BeginRecording");
static_assert(offsetof(AutomationPerformaceHelper_BeginRecording, RecordName) == 0x000000, "Member 'AutomationPerformaceHelper_BeginRecording::RecordName' has a wrong offset!");
static_assert(offsetof(AutomationPerformaceHelper_BeginRecording, InGPUBudget) == 0x000010, "Member 'AutomationPerformaceHelper_BeginRecording::InGPUBudget' has a wrong offset!");
static_assert(offsetof(AutomationPerformaceHelper_BeginRecording, InRenderThreadBudget) == 0x000014, "Member 'AutomationPerformaceHelper_BeginRecording::InRenderThreadBudget' has a wrong offset!");
static_assert(offsetof(AutomationPerformaceHelper_BeginRecording, InGameThreadBudget) == 0x000018, "Member 'AutomationPerformaceHelper_BeginRecording::InGameThreadBudget' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.BeginRecordingBaseline
// 0x0010 (0x0010 - 0x0000)
struct AutomationPerformaceHelper_BeginRecordingBaseline final
{
public:
	class FString                                 RecordName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_BeginRecordingBaseline) == 0x000008, "Wrong alignment on AutomationPerformaceHelper_BeginRecordingBaseline");
static_assert(sizeof(AutomationPerformaceHelper_BeginRecordingBaseline) == 0x000010, "Wrong size on AutomationPerformaceHelper_BeginRecordingBaseline");
static_assert(offsetof(AutomationPerformaceHelper_BeginRecordingBaseline, RecordName) == 0x000000, "Member 'AutomationPerformaceHelper_BeginRecordingBaseline::RecordName' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.BeginStatsFile
// 0x0010 (0x0010 - 0x0000)
struct AutomationPerformaceHelper_BeginStatsFile final
{
public:
	class FString                                 RecordName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_BeginStatsFile) == 0x000008, "Wrong alignment on AutomationPerformaceHelper_BeginStatsFile");
static_assert(sizeof(AutomationPerformaceHelper_BeginStatsFile) == 0x000010, "Wrong size on AutomationPerformaceHelper_BeginStatsFile");
static_assert(offsetof(AutomationPerformaceHelper_BeginStatsFile, RecordName) == 0x000000, "Member 'AutomationPerformaceHelper_BeginStatsFile::RecordName' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.Sample
// 0x0004 (0x0004 - 0x0000)
struct AutomationPerformaceHelper_Sample final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_Sample) == 0x000004, "Wrong alignment on AutomationPerformaceHelper_Sample");
static_assert(sizeof(AutomationPerformaceHelper_Sample) == 0x000004, "Wrong size on AutomationPerformaceHelper_Sample");
static_assert(offsetof(AutomationPerformaceHelper_Sample, DeltaSeconds) == 0x000000, "Member 'AutomationPerformaceHelper_Sample::DeltaSeconds' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.Tick
// 0x0004 (0x0004 - 0x0000)
struct AutomationPerformaceHelper_Tick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_Tick) == 0x000004, "Wrong alignment on AutomationPerformaceHelper_Tick");
static_assert(sizeof(AutomationPerformaceHelper_Tick) == 0x000004, "Wrong size on AutomationPerformaceHelper_Tick");
static_assert(offsetof(AutomationPerformaceHelper_Tick, DeltaSeconds) == 0x000000, "Member 'AutomationPerformaceHelper_Tick::DeltaSeconds' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.WriteLogFile
// 0x0020 (0x0020 - 0x0000)
struct AutomationPerformaceHelper_WriteLogFile final
{
public:
	class FString                                 CaptureDir;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CaptureExtension;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_WriteLogFile) == 0x000008, "Wrong alignment on AutomationPerformaceHelper_WriteLogFile");
static_assert(sizeof(AutomationPerformaceHelper_WriteLogFile) == 0x000020, "Wrong size on AutomationPerformaceHelper_WriteLogFile");
static_assert(offsetof(AutomationPerformaceHelper_WriteLogFile, CaptureDir) == 0x000000, "Member 'AutomationPerformaceHelper_WriteLogFile::CaptureDir' has a wrong offset!");
static_assert(offsetof(AutomationPerformaceHelper_WriteLogFile, CaptureExtension) == 0x000010, "Member 'AutomationPerformaceHelper_WriteLogFile::CaptureExtension' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.IsCurrentRecordWithinGameThreadBudget
// 0x0001 (0x0001 - 0x0000)
struct AutomationPerformaceHelper_IsCurrentRecordWithinGameThreadBudget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_IsCurrentRecordWithinGameThreadBudget) == 0x000001, "Wrong alignment on AutomationPerformaceHelper_IsCurrentRecordWithinGameThreadBudget");
static_assert(sizeof(AutomationPerformaceHelper_IsCurrentRecordWithinGameThreadBudget) == 0x000001, "Wrong size on AutomationPerformaceHelper_IsCurrentRecordWithinGameThreadBudget");
static_assert(offsetof(AutomationPerformaceHelper_IsCurrentRecordWithinGameThreadBudget, ReturnValue) == 0x000000, "Member 'AutomationPerformaceHelper_IsCurrentRecordWithinGameThreadBudget::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.IsCurrentRecordWithinGPUBudget
// 0x0001 (0x0001 - 0x0000)
struct AutomationPerformaceHelper_IsCurrentRecordWithinGPUBudget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_IsCurrentRecordWithinGPUBudget) == 0x000001, "Wrong alignment on AutomationPerformaceHelper_IsCurrentRecordWithinGPUBudget");
static_assert(sizeof(AutomationPerformaceHelper_IsCurrentRecordWithinGPUBudget) == 0x000001, "Wrong size on AutomationPerformaceHelper_IsCurrentRecordWithinGPUBudget");
static_assert(offsetof(AutomationPerformaceHelper_IsCurrentRecordWithinGPUBudget, ReturnValue) == 0x000000, "Member 'AutomationPerformaceHelper_IsCurrentRecordWithinGPUBudget::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.IsCurrentRecordWithinRenderThreadBudget
// 0x0001 (0x0001 - 0x0000)
struct AutomationPerformaceHelper_IsCurrentRecordWithinRenderThreadBudget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_IsCurrentRecordWithinRenderThreadBudget) == 0x000001, "Wrong alignment on AutomationPerformaceHelper_IsCurrentRecordWithinRenderThreadBudget");
static_assert(sizeof(AutomationPerformaceHelper_IsCurrentRecordWithinRenderThreadBudget) == 0x000001, "Wrong size on AutomationPerformaceHelper_IsCurrentRecordWithinRenderThreadBudget");
static_assert(offsetof(AutomationPerformaceHelper_IsCurrentRecordWithinRenderThreadBudget, ReturnValue) == 0x000000, "Member 'AutomationPerformaceHelper_IsCurrentRecordWithinRenderThreadBudget::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.AutomationPerformaceHelper.IsRecording
// 0x0001 (0x0001 - 0x0000)
struct AutomationPerformaceHelper_IsRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerformaceHelper_IsRecording) == 0x000001, "Wrong alignment on AutomationPerformaceHelper_IsRecording");
static_assert(sizeof(AutomationPerformaceHelper_IsRecording) == 0x000001, "Wrong size on AutomationPerformaceHelper_IsRecording");
static_assert(offsetof(AutomationPerformaceHelper_IsRecording, ReturnValue) == 0x000000, "Member 'AutomationPerformaceHelper_IsRecording::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTestingManager.RunAllFunctionalTests
// 0x0028 (0x0028 - 0x0000)
struct FunctionalTestingManager_RunAllFunctionalTests final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewLog;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunLooped;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FailedTestsReproString;                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FunctionalTestingManager_RunAllFunctionalTests) == 0x000008, "Wrong alignment on FunctionalTestingManager_RunAllFunctionalTests");
static_assert(sizeof(FunctionalTestingManager_RunAllFunctionalTests) == 0x000028, "Wrong size on FunctionalTestingManager_RunAllFunctionalTests");
static_assert(offsetof(FunctionalTestingManager_RunAllFunctionalTests, WorldContextObject) == 0x000000, "Member 'FunctionalTestingManager_RunAllFunctionalTests::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTestingManager_RunAllFunctionalTests, bNewLog) == 0x000008, "Member 'FunctionalTestingManager_RunAllFunctionalTests::bNewLog' has a wrong offset!");
static_assert(offsetof(FunctionalTestingManager_RunAllFunctionalTests, bRunLooped) == 0x000009, "Member 'FunctionalTestingManager_RunAllFunctionalTests::bRunLooped' has a wrong offset!");
static_assert(offsetof(FunctionalTestingManager_RunAllFunctionalTests, FailedTestsReproString) == 0x000010, "Member 'FunctionalTestingManager_RunAllFunctionalTests::FailedTestsReproString' has a wrong offset!");
static_assert(offsetof(FunctionalTestingManager_RunAllFunctionalTests, ReturnValue) == 0x000020, "Member 'FunctionalTestingManager_RunAllFunctionalTests::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.FunctionalTestUtilityLibrary.TraceChannelTestUtil
// 0x00B0 (0x00B0 - 0x0000)
struct FunctionalTestUtilityLibrary_TraceChannelTestUtil final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTraceChannelTestBatchOptions          BatchOptions;                                      // 0x0008(0x0007)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0010(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x001C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereCapsuleRadius;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxHalfSize;                                       // 0x0030(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x003C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0084(0x0010)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0094(0x0010)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTraceQueryTestResults*                 ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionalTestUtilityLibrary_TraceChannelTestUtil) == 0x000008, "Wrong alignment on FunctionalTestUtilityLibrary_TraceChannelTestUtil");
static_assert(sizeof(FunctionalTestUtilityLibrary_TraceChannelTestUtil) == 0x0000B0, "Wrong size on FunctionalTestUtilityLibrary_TraceChannelTestUtil");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, WorldContextObject) == 0x000000, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, BatchOptions) == 0x000008, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::BatchOptions' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, Start) == 0x000010, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::Start' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, End) == 0x00001C, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::End' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, SphereCapsuleRadius) == 0x000028, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::SphereCapsuleRadius' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, CapsuleHalfHeight) == 0x00002C, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, BoxHalfSize) == 0x000030, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::BoxHalfSize' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, Orientation) == 0x00003C, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::Orientation' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, TraceChannel) == 0x000048, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::TraceChannel' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, ObjectTypes) == 0x000050, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::ObjectTypes' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, ProfileName) == 0x000060, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::ProfileName' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, bTraceComplex) == 0x000068, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::bTraceComplex' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, ActorsToIgnore) == 0x000070, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, bIgnoreSelf) == 0x000080, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, DrawDebugType) == 0x000081, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::DrawDebugType' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, TraceColor) == 0x000084, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::TraceColor' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, TraceHitColor) == 0x000094, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::TraceHitColor' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, DrawTime) == 0x0000A4, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::DrawTime' has a wrong offset!");
static_assert(offsetof(FunctionalTestUtilityLibrary_TraceChannelTestUtil, ReturnValue) == 0x0000A8, "Member 'FunctionalTestUtilityLibrary_TraceChannelTestUtil::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.GroundTruthData.LoadObject
// 0x0008 (0x0008 - 0x0000)
struct GroundTruthData_LoadObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundTruthData_LoadObject) == 0x000008, "Wrong alignment on GroundTruthData_LoadObject");
static_assert(sizeof(GroundTruthData_LoadObject) == 0x000008, "Wrong size on GroundTruthData_LoadObject");
static_assert(offsetof(GroundTruthData_LoadObject, ReturnValue) == 0x000000, "Member 'GroundTruthData_LoadObject::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.GroundTruthData.SaveObject
// 0x0008 (0x0008 - 0x0000)
struct GroundTruthData_SaveObject final
{
public:
	class UObject*                                GroundTruth;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundTruthData_SaveObject) == 0x000008, "Wrong alignment on GroundTruthData_SaveObject");
static_assert(sizeof(GroundTruthData_SaveObject) == 0x000008, "Wrong size on GroundTruthData_SaveObject");
static_assert(offsetof(GroundTruthData_SaveObject, GroundTruth) == 0x000000, "Member 'GroundTruthData_SaveObject::GroundTruth' has a wrong offset!");

// Function FunctionalTesting.GroundTruthData.CanModify
// 0x0001 (0x0001 - 0x0000)
struct GroundTruthData_CanModify final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundTruthData_CanModify) == 0x000001, "Wrong alignment on GroundTruthData_CanModify");
static_assert(sizeof(GroundTruthData_CanModify) == 0x000001, "Wrong size on GroundTruthData_CanModify");
static_assert(offsetof(GroundTruthData_CanModify, ReturnValue) == 0x000000, "Member 'GroundTruthData_CanModify::ReturnValue' has a wrong offset!");

// Function FunctionalTesting.TraceQueryTestResults.ToString
// 0x0010 (0x0010 - 0x0000)
struct TraceQueryTestResults_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceQueryTestResults_ToString) == 0x000008, "Wrong alignment on TraceQueryTestResults_ToString");
static_assert(sizeof(TraceQueryTestResults_ToString) == 0x000010, "Wrong size on TraceQueryTestResults_ToString");
static_assert(offsetof(TraceQueryTestResults_ToString, ReturnValue) == 0x000000, "Member 'TraceQueryTestResults_ToString::ReturnValue' has a wrong offset!");

}

