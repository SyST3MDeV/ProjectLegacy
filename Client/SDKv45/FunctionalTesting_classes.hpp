#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FunctionalTesting

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FunctionalTesting_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class FunctionalTesting.FunctionalTest
// 0x0148 (0x0460 - 0x0318)
class AFunctionalTest : public AActor
{
public:
	class UBillboardComponent*                    SpriteComponent;                                   // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsEnabled : 1;                                    // 0x0320(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bWarningsAsErrors : 1;                             // 0x0320(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Author;                                            // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Description;                                       // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 ObservationPoint;                                  // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRandomStream                          RandomNumbersStream;                               // 0x0350(0x0008)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	EFunctionalTestResult                         Result;                                            // 0x0358(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreparationTimeLimit;                              // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimesUpMessage;                                    // 0x0368(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EFunctionalTestResult                         TimesUpResult;                                     // 0x0380(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnTestPrepare;                                     // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTestStart;                                       // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTestFinished;                                    // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         AutoDestroyActors;                                 // 0x03B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C8[0x68];                                     // 0x03C8(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsRunning;                                        // 0x0430(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_431[0x2F];                                     // 0x0431(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddError(const class FString& MESSAGE);
	void AddRerun(class FName Reason);
	void AddWarning(const class FString& MESSAGE);
	bool AssertEqual_Bool(const bool Actual, const bool Expected, const class FString& What, const class UObject* ContextObject);
	bool AssertEqual_Float(const float Actual, const float Expected, const class FString& What, const float Tolerance, const class UObject* ContextObject);
	bool AssertEqual_Int(const int32 Actual, const int32 Expected, const class FString& What, const class UObject* ContextObject);
	bool AssertEqual_Name(const class FName Actual, const class FName Expected, const class FString& What, const class UObject* ContextObject);
	bool AssertEqual_Rotator(const struct FRotator& Actual, const struct FRotator& Expected, const class FString& What, const float Tolerance, const class UObject* ContextObject);
	bool AssertEqual_String(const class FString& Actual, const class FString& Expected, const class FString& What, const class UObject* ContextObject);
	bool AssertEqual_TraceQueryResults(const class UTraceQueryTestResults* Actual, const class UTraceQueryTestResults* Expected, const class FString& What, const class UObject* ContextObject);
	bool AssertEqual_Transform(const struct FTransform& Actual, const struct FTransform& Expected, const class FString& What, float Tolerance, const class UObject* ContextObject);
	bool AssertEqual_Vector(const struct FVector& Actual, const struct FVector& Expected, const class FString& What, const float Tolerance, const class UObject* ContextObject);
	bool AssertFalse(bool Condition, const class FString& MESSAGE, const class UObject* ContextObject);
	bool AssertIsValid(class UObject* Object, const class FString& MESSAGE, const class UObject* ContextObject);
	bool AssertNotEqual_Rotator(const struct FRotator& Actual, const struct FRotator& NotExpected, const class FString& What, const class UObject* ContextObject);
	bool AssertNotEqual_String(const class FString& Actual, const class FString& NotExpected, const class FString& What, const class UObject* ContextObject);
	bool AssertNotEqual_Transform(const struct FTransform& Actual, const struct FTransform& NotExpected, const class FString& What, const class UObject* ContextObject);
	bool AssertNotEqual_Vector(const struct FVector& Actual, const struct FVector& NotExpected, const class FString& What, const class UObject* ContextObject);
	bool AssertTrue(bool Condition, const class FString& MESSAGE, const class UObject* ContextObject);
	bool AssertValue_DateTime(const struct FDateTime& Actual, EComparisonMethod ShouldBe, const struct FDateTime& Expected, const class FString& What, const class UObject* ContextObject);
	bool AssertValue_Float(float Actual, EComparisonMethod ShouldBe, float Expected, const class FString& What, const class UObject* ContextObject);
	bool AssertValue_Int(int32 Actual, EComparisonMethod ShouldBe, int32 Expected, const class FString& What, const class UObject* ContextObject);
	void FinishTest(EFunctionalTestResult TestResult, const class FString& MESSAGE);
	bool IsReady();
	void LogMessage(const class FString& MESSAGE);
	void ReceivePrepareTest();
	void ReceiveStartTest();
	void RegisterAutoDestroyActor(class AActor* ActorToAutoDestroy);
	void SetTimeLimit(float NewTimeLimit, EFunctionalTestResult ResultWhenTimeRunsOut);

	TArray<class AActor*> DebugGatherRelevantActors() const;
	class FName GetCurrentRerunReason() const;
	bool IsEnabled() const;
	bool IsRunning() const;
	class FString OnAdditionalTestFinishedMessageRequest(EFunctionalTestResult TestResult) const;
	bool OnWantsReRunCheck() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FunctionalTest">();
	}
	static class AFunctionalTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFunctionalTest>();
	}
};
static_assert(alignof(AFunctionalTest) == 0x000008, "Wrong alignment on AFunctionalTest");
static_assert(sizeof(AFunctionalTest) == 0x000460, "Wrong size on AFunctionalTest");
static_assert(offsetof(AFunctionalTest, SpriteComponent) == 0x000318, "Member 'AFunctionalTest::SpriteComponent' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, Author) == 0x000328, "Member 'AFunctionalTest::Author' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, Description) == 0x000338, "Member 'AFunctionalTest::Description' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, ObservationPoint) == 0x000348, "Member 'AFunctionalTest::ObservationPoint' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, RandomNumbersStream) == 0x000350, "Member 'AFunctionalTest::RandomNumbersStream' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, Result) == 0x000358, "Member 'AFunctionalTest::Result' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, PreparationTimeLimit) == 0x00035C, "Member 'AFunctionalTest::PreparationTimeLimit' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, TimeLimit) == 0x000360, "Member 'AFunctionalTest::TimeLimit' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, TimesUpMessage) == 0x000368, "Member 'AFunctionalTest::TimesUpMessage' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, TimesUpResult) == 0x000380, "Member 'AFunctionalTest::TimesUpResult' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, OnTestPrepare) == 0x000388, "Member 'AFunctionalTest::OnTestPrepare' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, OnTestStart) == 0x000398, "Member 'AFunctionalTest::OnTestStart' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, OnTestFinished) == 0x0003A8, "Member 'AFunctionalTest::OnTestFinished' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, AutoDestroyActors) == 0x0003B8, "Member 'AFunctionalTest::AutoDestroyActors' has a wrong offset!");
static_assert(offsetof(AFunctionalTest, bIsRunning) == 0x000430, "Member 'AFunctionalTest::bIsRunning' has a wrong offset!");

// Class FunctionalTesting.PhasedAutomationActorBase
// 0x0000 (0x0318 - 0x0318)
class APhasedAutomationActorBase : public AActor
{
public:
	void OnFunctionalTestingBegin();
	void OnFunctionalTestingComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhasedAutomationActorBase">();
	}
	static class APhasedAutomationActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhasedAutomationActorBase>();
	}
};
static_assert(alignof(APhasedAutomationActorBase) == 0x000008, "Wrong alignment on APhasedAutomationActorBase");
static_assert(sizeof(APhasedAutomationActorBase) == 0x000318, "Wrong size on APhasedAutomationActorBase");

// Class FunctionalTesting.FuncTestRenderingComponent
// 0x0000 (0x0690 - 0x0690)
class UFuncTestRenderingComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FuncTestRenderingComponent">();
	}
	static class UFuncTestRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFuncTestRenderingComponent>();
	}
};
static_assert(alignof(UFuncTestRenderingComponent) == 0x000010, "Wrong alignment on UFuncTestRenderingComponent");
static_assert(sizeof(UFuncTestRenderingComponent) == 0x000690, "Wrong size on UFuncTestRenderingComponent");

// Class FunctionalTesting.AutomationBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAutomationBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AreAutomatedTestsRunning();
	static void DisableStatGroup(class UObject* WorldContextObject, class FName GroupName);
	static void EnableStatGroup(class UObject* WorldContextObject, class FName GroupName);
	static struct FAutomationScreenshotOptions GetDefaultScreenshotOptionsForGameplay(EComparisonTolerance Tolerance, float Delay);
	static struct FAutomationScreenshotOptions GetDefaultScreenshotOptionsForRendering(EComparisonTolerance Tolerance, float Delay);
	static float GetStatCallCount(class FName StatName);
	static float GetStatExcAverage(class FName StatName);
	static float GetStatExcMax(class FName StatName);
	static float GetStatIncAverage(class FName StatName);
	static float GetStatIncMax(class FName StatName);
	static void TakeAutomationScreenshot(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& Name_0, const struct FAutomationScreenshotOptions& Options);
	static void TakeAutomationScreenshotAtCamera(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class ACameraActor* Camera, const class FString& NameOverride, const struct FAutomationScreenshotOptions& Options);
	static void TakeAutomationScreenshotOfUI(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& Name_0, const struct FAutomationScreenshotOptions& Options);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutomationBlueprintFunctionLibrary">();
	}
	static class UAutomationBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutomationBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UAutomationBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UAutomationBlueprintFunctionLibrary");
static_assert(sizeof(UAutomationBlueprintFunctionLibrary) == 0x000028, "Wrong size on UAutomationBlueprintFunctionLibrary");

// Class FunctionalTesting.FunctionalAITest
// 0x00A0 (0x0500 - 0x0460)
class AFunctionalAITest final : public AFunctionalTest
{
public:
	TArray<struct FAITestSpawnSet>                SpawnSets;                                         // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         SpawnLocationRandomizationRange;                   // 0x0470(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          SpawnedPawns;                                      // 0x0478(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPendingDelayedSpawn>           PendingDelayedSpawns;                              // 0x0488(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x18];                                     // 0x0498(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnAISpawned;                                       // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnAllAISPawned;                                    // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FVector                                NavMeshDebugOrigin;                                // 0x04D0(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NavMeshDebugExtent;                                // 0x04DC(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bWaitForNavMesh : 1;                               // 0x04E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bDebugNavMeshOnTimeout : 1;                        // 0x04E8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_4E9[0x17];                                     // 0x04E9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsOneOfSpawnedPawns(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FunctionalAITest">();
	}
	static class AFunctionalAITest* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFunctionalAITest>();
	}
};
static_assert(alignof(AFunctionalAITest) == 0x000008, "Wrong alignment on AFunctionalAITest");
static_assert(sizeof(AFunctionalAITest) == 0x000500, "Wrong size on AFunctionalAITest");
static_assert(offsetof(AFunctionalAITest, SpawnSets) == 0x000460, "Member 'AFunctionalAITest::SpawnSets' has a wrong offset!");
static_assert(offsetof(AFunctionalAITest, SpawnLocationRandomizationRange) == 0x000470, "Member 'AFunctionalAITest::SpawnLocationRandomizationRange' has a wrong offset!");
static_assert(offsetof(AFunctionalAITest, SpawnedPawns) == 0x000478, "Member 'AFunctionalAITest::SpawnedPawns' has a wrong offset!");
static_assert(offsetof(AFunctionalAITest, PendingDelayedSpawns) == 0x000488, "Member 'AFunctionalAITest::PendingDelayedSpawns' has a wrong offset!");
static_assert(offsetof(AFunctionalAITest, OnAISpawned) == 0x0004B0, "Member 'AFunctionalAITest::OnAISpawned' has a wrong offset!");
static_assert(offsetof(AFunctionalAITest, OnAllAISPawned) == 0x0004C0, "Member 'AFunctionalAITest::OnAllAISPawned' has a wrong offset!");
static_assert(offsetof(AFunctionalAITest, NavMeshDebugOrigin) == 0x0004D0, "Member 'AFunctionalAITest::NavMeshDebugOrigin' has a wrong offset!");
static_assert(offsetof(AFunctionalAITest, NavMeshDebugExtent) == 0x0004DC, "Member 'AFunctionalAITest::NavMeshDebugExtent' has a wrong offset!");

// Class FunctionalTesting.AutomationPerformaceHelper
// 0x0038 (0x0060 - 0x0028)
class UAutomationPerformaceHelper final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginRecording(const class FString& RecordName, float InGPUBudget, float InRenderThreadBudget, float InGameThreadBudget);
	void BeginRecordingBaseline(const class FString& RecordName);
	void BeginStatsFile(const class FString& RecordName);
	void EndRecording();
	void EndRecordingBaseline();
	void EndStatsFile();
	void OnAllTestsComplete();
	void OnBeginTests();
	void Sample(float DeltaSeconds);
	void StartCPUProfiling();
	void StopCPUProfiling();
	void Tick(float DeltaSeconds);
	void TriggerGPUTraceIfRecordFallsBelowBudget();
	void WriteLogFile(const class FString& CaptureDir, const class FString& CaptureExtension);

	bool IsCurrentRecordWithinGameThreadBudget() const;
	bool IsCurrentRecordWithinGPUBudget() const;
	bool IsCurrentRecordWithinRenderThreadBudget() const;
	bool IsRecording() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutomationPerformaceHelper">();
	}
	static class UAutomationPerformaceHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutomationPerformaceHelper>();
	}
};
static_assert(alignof(UAutomationPerformaceHelper) == 0x000008, "Wrong alignment on UAutomationPerformaceHelper");
static_assert(sizeof(UAutomationPerformaceHelper) == 0x000060, "Wrong size on UAutomationPerformaceHelper");

// Class FunctionalTesting.FunctionalTestGameMode
// 0x0000 (0x03B8 - 0x03B8)
class AFunctionalTestGameMode final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FunctionalTestGameMode">();
	}
	static class AFunctionalTestGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFunctionalTestGameMode>();
	}
};
static_assert(alignof(AFunctionalTestGameMode) == 0x000008, "Wrong alignment on AFunctionalTestGameMode");
static_assert(sizeof(AFunctionalTestGameMode) == 0x0003B8, "Wrong size on AFunctionalTestGameMode");

// Class FunctionalTesting.FunctionalTestingManager
// 0x00C8 (0x00F0 - 0x0028)
class UFunctionalTestingManager final : public UBlueprintFunctionLibrary
{
public:
	TArray<class AFunctionalTest*>                TestsLeft;                                         // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class AFunctionalTest*>                AllTests;                                          // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSetupTests;                                      // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTestsComplete;                                   // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTestsBegin;                                      // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x78];                                      // 0x0078(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool RunAllFunctionalTests(class UObject* WorldContextObject, bool bNewLog, bool bRunLooped, const class FString& FailedTestsReproString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FunctionalTestingManager">();
	}
	static class UFunctionalTestingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFunctionalTestingManager>();
	}
};
static_assert(alignof(UFunctionalTestingManager) == 0x000008, "Wrong alignment on UFunctionalTestingManager");
static_assert(sizeof(UFunctionalTestingManager) == 0x0000F0, "Wrong size on UFunctionalTestingManager");
static_assert(offsetof(UFunctionalTestingManager, TestsLeft) == 0x000028, "Member 'UFunctionalTestingManager::TestsLeft' has a wrong offset!");
static_assert(offsetof(UFunctionalTestingManager, AllTests) == 0x000038, "Member 'UFunctionalTestingManager::AllTests' has a wrong offset!");
static_assert(offsetof(UFunctionalTestingManager, OnSetupTests) == 0x000048, "Member 'UFunctionalTestingManager::OnSetupTests' has a wrong offset!");
static_assert(offsetof(UFunctionalTestingManager, OnTestsComplete) == 0x000058, "Member 'UFunctionalTestingManager::OnTestsComplete' has a wrong offset!");
static_assert(offsetof(UFunctionalTestingManager, OnTestsBegin) == 0x000068, "Member 'UFunctionalTestingManager::OnTestsBegin' has a wrong offset!");

// Class FunctionalTesting.FunctionalTestLevelScript
// 0x0000 (0x0320 - 0x0320)
class AFunctionalTestLevelScript final : public ALevelScriptActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FunctionalTestLevelScript">();
	}
	static class AFunctionalTestLevelScript* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFunctionalTestLevelScript>();
	}
};
static_assert(alignof(AFunctionalTestLevelScript) == 0x000008, "Wrong alignment on AFunctionalTestLevelScript");
static_assert(sizeof(AFunctionalTestLevelScript) == 0x000320, "Wrong size on AFunctionalTestLevelScript");

// Class FunctionalTesting.FunctionalTestUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UFunctionalTestUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UTraceQueryTestResults* TraceChannelTestUtil(class UObject* WorldContextObject, const struct FTraceChannelTestBatchOptions& BatchOptions, const struct FVector& Start, const struct FVector& End, float SphereCapsuleRadius, float CapsuleHalfHeight, const struct FVector& BoxHalfSize, const struct FRotator& Orientation, ETraceTypeQuery TraceChannel, const TArray<EObjectTypeQuery>& ObjectTypes, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FunctionalTestUtilityLibrary">();
	}
	static class UFunctionalTestUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFunctionalTestUtilityLibrary>();
	}
};
static_assert(alignof(UFunctionalTestUtilityLibrary) == 0x000008, "Wrong alignment on UFunctionalTestUtilityLibrary");
static_assert(sizeof(UFunctionalTestUtilityLibrary) == 0x000028, "Wrong size on UFunctionalTestUtilityLibrary");

// Class FunctionalTesting.ScreenshotFunctionalTestBase
// 0x0040 (0x04A0 - 0x0460)
class AScreenshotFunctionalTestBase : public AFunctionalTest
{
public:
	class UCameraComponent*                       ScreenshotCamera;                                  // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAutomationScreenshotOptions           ScreenshotOptions;                                 // 0x0468(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, SimpleDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScreenshotFunctionalTestBase">();
	}
	static class AScreenshotFunctionalTestBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScreenshotFunctionalTestBase>();
	}
};
static_assert(alignof(AScreenshotFunctionalTestBase) == 0x000008, "Wrong alignment on AScreenshotFunctionalTestBase");
static_assert(sizeof(AScreenshotFunctionalTestBase) == 0x0004A0, "Wrong size on AScreenshotFunctionalTestBase");
static_assert(offsetof(AScreenshotFunctionalTestBase, ScreenshotCamera) == 0x000460, "Member 'AScreenshotFunctionalTestBase::ScreenshotCamera' has a wrong offset!");
static_assert(offsetof(AScreenshotFunctionalTestBase, ScreenshotOptions) == 0x000468, "Member 'AScreenshotFunctionalTestBase::ScreenshotOptions' has a wrong offset!");

// Class FunctionalTesting.FunctionalUIScreenshotTest
// 0x0020 (0x04C0 - 0x04A0)
class AFunctionalUIScreenshotTest final : public AScreenshotFunctionalTestBase
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x04A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            SpawnedWidget;                                     // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetTestAppearLocation                     WidgetLocation;                                    // 0x04B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 ScreenshotRT;                                      // 0x04B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FunctionalUIScreenshotTest">();
	}
	static class AFunctionalUIScreenshotTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFunctionalUIScreenshotTest>();
	}
};
static_assert(alignof(AFunctionalUIScreenshotTest) == 0x000008, "Wrong alignment on AFunctionalUIScreenshotTest");
static_assert(sizeof(AFunctionalUIScreenshotTest) == 0x0004C0, "Wrong size on AFunctionalUIScreenshotTest");
static_assert(offsetof(AFunctionalUIScreenshotTest, WidgetClass) == 0x0004A0, "Member 'AFunctionalUIScreenshotTest::WidgetClass' has a wrong offset!");
static_assert(offsetof(AFunctionalUIScreenshotTest, SpawnedWidget) == 0x0004A8, "Member 'AFunctionalUIScreenshotTest::SpawnedWidget' has a wrong offset!");
static_assert(offsetof(AFunctionalUIScreenshotTest, WidgetLocation) == 0x0004B0, "Member 'AFunctionalUIScreenshotTest::WidgetLocation' has a wrong offset!");
static_assert(offsetof(AFunctionalUIScreenshotTest, ScreenshotRT) == 0x0004B8, "Member 'AFunctionalUIScreenshotTest::ScreenshotRT' has a wrong offset!");

// Class FunctionalTesting.GroundTruthData
// 0x0010 (0x0038 - 0x0028)
class UGroundTruthData final : public UObject
{
public:
	bool                                          bResetGroundTruth;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ObjectData;                                        // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UObject* LoadObject();
	void SaveObject(class UObject* GroundTruth);

	bool CanModify() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroundTruthData">();
	}
	static class UGroundTruthData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroundTruthData>();
	}
};
static_assert(alignof(UGroundTruthData) == 0x000008, "Wrong alignment on UGroundTruthData");
static_assert(sizeof(UGroundTruthData) == 0x000038, "Wrong size on UGroundTruthData");
static_assert(offsetof(UGroundTruthData, bResetGroundTruth) == 0x000028, "Member 'UGroundTruthData::bResetGroundTruth' has a wrong offset!");
static_assert(offsetof(UGroundTruthData, ObjectData) == 0x000030, "Member 'UGroundTruthData::ObjectData' has a wrong offset!");

// Class FunctionalTesting.ScreenshotFunctionalTest
// 0x0010 (0x04B0 - 0x04A0)
class AScreenshotFunctionalTest final : public AScreenshotFunctionalTestBase
{
public:
	bool                                          bCameraCutOnScreenshotPrep;                        // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A1[0xF];                                      // 0x04A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScreenshotFunctionalTest">();
	}
	static class AScreenshotFunctionalTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScreenshotFunctionalTest>();
	}
};
static_assert(alignof(AScreenshotFunctionalTest) == 0x000008, "Wrong alignment on AScreenshotFunctionalTest");
static_assert(sizeof(AScreenshotFunctionalTest) == 0x0004B0, "Wrong size on AScreenshotFunctionalTest");
static_assert(offsetof(AScreenshotFunctionalTest, bCameraCutOnScreenshotPrep) == 0x0004A0, "Member 'AScreenshotFunctionalTest::bCameraCutOnScreenshotPrep' has a wrong offset!");

// Class FunctionalTesting.TestPhaseComponent
// 0x0000 (0x0290 - 0x0290)
class UTestPhaseComponent final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestPhaseComponent">();
	}
	static class UTestPhaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestPhaseComponent>();
	}
};
static_assert(alignof(UTestPhaseComponent) == 0x000008, "Wrong alignment on UTestPhaseComponent");
static_assert(sizeof(UTestPhaseComponent) == 0x000290, "Wrong size on UTestPhaseComponent");

// Class FunctionalTesting.TraceQueryTestResults
// 0x09C8 (0x09F0 - 0x0028)
class UTraceQueryTestResults final : public UObject
{
public:
	struct FTraceQueryTestResultsInner            ChannelResults;                                    // 0x0028(0x0340)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTraceQueryTestResultsInner            ObjectResults;                                     // 0x0368(0x0340)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTraceQueryTestResultsInner            ProfileResults;                                    // 0x06A8(0x0340)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E8[0x8];                                      // 0x09E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString ToString();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceQueryTestResults">();
	}
	static class UTraceQueryTestResults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceQueryTestResults>();
	}
};
static_assert(alignof(UTraceQueryTestResults) == 0x000008, "Wrong alignment on UTraceQueryTestResults");
static_assert(sizeof(UTraceQueryTestResults) == 0x0009F0, "Wrong size on UTraceQueryTestResults");
static_assert(offsetof(UTraceQueryTestResults, ChannelResults) == 0x000028, "Member 'UTraceQueryTestResults::ChannelResults' has a wrong offset!");
static_assert(offsetof(UTraceQueryTestResults, ObjectResults) == 0x000368, "Member 'UTraceQueryTestResults::ObjectResults' has a wrong offset!");
static_assert(offsetof(UTraceQueryTestResults, ProfileResults) == 0x0006A8, "Member 'UTraceQueryTestResults::ProfileResults' has a wrong offset!");

}

