#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FunctionalTesting

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum FunctionalTesting.EComparisonTolerance
// NumValues: 0x0006
enum class EComparisonTolerance : uint8
{
	Zero                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	Custom                                   = 4,
	EComparisonTolerance_MAX                 = 5,
};

// Enum FunctionalTesting.EFunctionalTestResult
// NumValues: 0x0007
enum class EFunctionalTestResult : uint8
{
	Default                                  = 0,
	Invalid                                  = 1,
	Error                                    = 2,
	Running                                  = 3,
	Failed                                   = 4,
	Succeeded                                = 5,
	EFunctionalTestResult_MAX                = 6,
};

// Enum FunctionalTesting.EComparisonMethod
// NumValues: 0x0007
enum class EComparisonMethod : uint8
{
	Equal_To                                 = 0,
	Not_Equal_To                             = 1,
	Greater_Than_Or_Equal_To                 = 2,
	Less_Than_Or_Equal_To                    = 3,
	Greater_Than                             = 4,
	Less_Than                                = 5,
	EComparisonMethod_MAX                    = 6,
};

// Enum FunctionalTesting.EWidgetTestAppearLocation
// NumValues: 0x0003
enum class EWidgetTestAppearLocation : uint32
{
	Viewport                                 = 0,
	PlayerScreen                             = 1,
	EWidgetTestAppearLocation_MAX            = 2,
};

// ScriptStruct FunctionalTesting.ComparisonToleranceAmount
// 0x0006 (0x0006 - 0x0000)
struct FComparisonToleranceAmount final
{
public:
	uint8                                         Red;                                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Green;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Blue;                                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Alpha;                                             // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MinBrightness;                                     // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxBrightness;                                     // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComparisonToleranceAmount) == 0x000001, "Wrong alignment on FComparisonToleranceAmount");
static_assert(sizeof(FComparisonToleranceAmount) == 0x000006, "Wrong size on FComparisonToleranceAmount");
static_assert(offsetof(FComparisonToleranceAmount, Red) == 0x000000, "Member 'FComparisonToleranceAmount::Red' has a wrong offset!");
static_assert(offsetof(FComparisonToleranceAmount, Green) == 0x000001, "Member 'FComparisonToleranceAmount::Green' has a wrong offset!");
static_assert(offsetof(FComparisonToleranceAmount, Blue) == 0x000002, "Member 'FComparisonToleranceAmount::Blue' has a wrong offset!");
static_assert(offsetof(FComparisonToleranceAmount, Alpha) == 0x000003, "Member 'FComparisonToleranceAmount::Alpha' has a wrong offset!");
static_assert(offsetof(FComparisonToleranceAmount, MinBrightness) == 0x000004, "Member 'FComparisonToleranceAmount::MinBrightness' has a wrong offset!");
static_assert(offsetof(FComparisonToleranceAmount, MaxBrightness) == 0x000005, "Member 'FComparisonToleranceAmount::MaxBrightness' has a wrong offset!");

// ScriptStruct FunctionalTesting.AutomationScreenshotOptions
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FAutomationScreenshotOptions final
{
public:
	struct FVector2D                              Resolution;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableNoisyRenderingFeatures;                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VisualizeBuffer;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparisonTolerance                          Tolerance;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FComparisonToleranceAmount             ToleranceAmount;                                   // 0x0019(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaximumLocalError;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumGlobalError;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAntiAliasing;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreColors;                                     // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutomationScreenshotOptions) == 0x000008, "Wrong alignment on FAutomationScreenshotOptions");
static_assert(sizeof(FAutomationScreenshotOptions) == 0x000030, "Wrong size on FAutomationScreenshotOptions");
static_assert(offsetof(FAutomationScreenshotOptions, Resolution) == 0x000000, "Member 'FAutomationScreenshotOptions::Resolution' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, Delay) == 0x000008, "Member 'FAutomationScreenshotOptions::Delay' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, bDisableNoisyRenderingFeatures) == 0x00000C, "Member 'FAutomationScreenshotOptions::bDisableNoisyRenderingFeatures' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, VisualizeBuffer) == 0x000010, "Member 'FAutomationScreenshotOptions::VisualizeBuffer' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, Tolerance) == 0x000018, "Member 'FAutomationScreenshotOptions::Tolerance' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, ToleranceAmount) == 0x000019, "Member 'FAutomationScreenshotOptions::ToleranceAmount' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, MaximumLocalError) == 0x000020, "Member 'FAutomationScreenshotOptions::MaximumLocalError' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, MaximumGlobalError) == 0x000024, "Member 'FAutomationScreenshotOptions::MaximumGlobalError' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, bIgnoreAntiAliasing) == 0x000028, "Member 'FAutomationScreenshotOptions::bIgnoreAntiAliasing' has a wrong offset!");
static_assert(offsetof(FAutomationScreenshotOptions, bIgnoreColors) == 0x000029, "Member 'FAutomationScreenshotOptions::bIgnoreColors' has a wrong offset!");

// ScriptStruct FunctionalTesting.TraceQueryTestNames
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTraceQueryTestNames final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PhysicalMaterialName;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraceQueryTestNames) == 0x000008, "Wrong alignment on FTraceQueryTestNames");
static_assert(sizeof(FTraceQueryTestNames) == 0x000018, "Wrong size on FTraceQueryTestNames");
static_assert(offsetof(FTraceQueryTestNames, ComponentName) == 0x000000, "Member 'FTraceQueryTestNames::ComponentName' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestNames, PhysicalMaterialName) == 0x000008, "Member 'FTraceQueryTestNames::PhysicalMaterialName' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestNames, ActorName) == 0x000010, "Member 'FTraceQueryTestNames::ActorName' has a wrong offset!");

// ScriptStruct FunctionalTesting.TraceQueryTestResultsInnerMost
// 0x00D0 (0x00D0 - 0x0000)
struct FTraceQueryTestResultsInnerMost final
{
public:
	struct FHitResult                             SingleHit;                                         // 0x0000(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTraceQueryTestNames                   SingleNames;                                       // 0x0088(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSingleResult;                                     // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     MultiHits;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FTraceQueryTestNames>           MultiNames;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMultiResult;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTraceQueryTestResultsInnerMost) == 0x000008, "Wrong alignment on FTraceQueryTestResultsInnerMost");
static_assert(sizeof(FTraceQueryTestResultsInnerMost) == 0x0000D0, "Wrong size on FTraceQueryTestResultsInnerMost");
static_assert(offsetof(FTraceQueryTestResultsInnerMost, SingleHit) == 0x000000, "Member 'FTraceQueryTestResultsInnerMost::SingleHit' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInnerMost, SingleNames) == 0x000088, "Member 'FTraceQueryTestResultsInnerMost::SingleNames' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInnerMost, bSingleResult) == 0x0000A0, "Member 'FTraceQueryTestResultsInnerMost::bSingleResult' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInnerMost, MultiHits) == 0x0000A8, "Member 'FTraceQueryTestResultsInnerMost::MultiHits' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInnerMost, MultiNames) == 0x0000B8, "Member 'FTraceQueryTestResultsInnerMost::MultiNames' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInnerMost, bMultiResult) == 0x0000C8, "Member 'FTraceQueryTestResultsInnerMost::bMultiResult' has a wrong offset!");

// ScriptStruct FunctionalTesting.TraceQueryTestResultsInner
// 0x0340 (0x0340 - 0x0000)
struct FTraceQueryTestResultsInner final
{
public:
	struct FTraceQueryTestResultsInnerMost        LineResults;                                       // 0x0000(0x00D0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTraceQueryTestResultsInnerMost        SphereResults;                                     // 0x00D0(0x00D0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTraceQueryTestResultsInnerMost        CapsuleResults;                                    // 0x01A0(0x00D0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTraceQueryTestResultsInnerMost        BoxResults;                                        // 0x0270(0x00D0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraceQueryTestResultsInner) == 0x000008, "Wrong alignment on FTraceQueryTestResultsInner");
static_assert(sizeof(FTraceQueryTestResultsInner) == 0x000340, "Wrong size on FTraceQueryTestResultsInner");
static_assert(offsetof(FTraceQueryTestResultsInner, LineResults) == 0x000000, "Member 'FTraceQueryTestResultsInner::LineResults' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInner, SphereResults) == 0x0000D0, "Member 'FTraceQueryTestResultsInner::SphereResults' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInner, CapsuleResults) == 0x0001A0, "Member 'FTraceQueryTestResultsInner::CapsuleResults' has a wrong offset!");
static_assert(offsetof(FTraceQueryTestResultsInner, BoxResults) == 0x000270, "Member 'FTraceQueryTestResultsInner::BoxResults' has a wrong offset!");

// ScriptStruct FunctionalTesting.AITestSpawnInfo
// 0x0040 (0x0040 - 0x0000)
struct FAITestSpawnInfo
{
public:
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAIController>              ControllerClass;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamID;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          BehaviorTree;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnLocation;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDelay;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreSpawnDelay;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAITestSpawnInfo) == 0x000008, "Wrong alignment on FAITestSpawnInfo");
static_assert(sizeof(FAITestSpawnInfo) == 0x000040, "Wrong size on FAITestSpawnInfo");
static_assert(offsetof(FAITestSpawnInfo, PawnClass) == 0x000000, "Member 'FAITestSpawnInfo::PawnClass' has a wrong offset!");
static_assert(offsetof(FAITestSpawnInfo, ControllerClass) == 0x000008, "Member 'FAITestSpawnInfo::ControllerClass' has a wrong offset!");
static_assert(offsetof(FAITestSpawnInfo, TeamID) == 0x000010, "Member 'FAITestSpawnInfo::TeamID' has a wrong offset!");
static_assert(offsetof(FAITestSpawnInfo, BehaviorTree) == 0x000018, "Member 'FAITestSpawnInfo::BehaviorTree' has a wrong offset!");
static_assert(offsetof(FAITestSpawnInfo, SpawnLocation) == 0x000020, "Member 'FAITestSpawnInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FAITestSpawnInfo, NumberToSpawn) == 0x000028, "Member 'FAITestSpawnInfo::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(FAITestSpawnInfo, SpawnDelay) == 0x00002C, "Member 'FAITestSpawnInfo::SpawnDelay' has a wrong offset!");
static_assert(offsetof(FAITestSpawnInfo, PreSpawnDelay) == 0x000030, "Member 'FAITestSpawnInfo::PreSpawnDelay' has a wrong offset!");

// ScriptStruct FunctionalTesting.AITestSpawnSet
// 0x0028 (0x0028 - 0x0000)
struct FAITestSpawnSet final
{
public:
	TArray<struct FAITestSpawnInfo>               SpawnInfoContainer;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FallbackSpawnLocation;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAITestSpawnSet) == 0x000008, "Wrong alignment on FAITestSpawnSet");
static_assert(sizeof(FAITestSpawnSet) == 0x000028, "Wrong size on FAITestSpawnSet");
static_assert(offsetof(FAITestSpawnSet, SpawnInfoContainer) == 0x000000, "Member 'FAITestSpawnSet::SpawnInfoContainer' has a wrong offset!");
static_assert(offsetof(FAITestSpawnSet, Name) == 0x000010, "Member 'FAITestSpawnSet::Name' has a wrong offset!");
static_assert(offsetof(FAITestSpawnSet, FallbackSpawnLocation) == 0x000020, "Member 'FAITestSpawnSet::FallbackSpawnLocation' has a wrong offset!");

// ScriptStruct FunctionalTesting.PendingDelayedSpawn
// 0x0010 (0x0050 - 0x0040)
struct FPendingDelayedSpawn final : public FAITestSpawnInfo
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingDelayedSpawn) == 0x000008, "Wrong alignment on FPendingDelayedSpawn");
static_assert(sizeof(FPendingDelayedSpawn) == 0x000050, "Wrong size on FPendingDelayedSpawn");

// ScriptStruct FunctionalTesting.TraceChannelTestBatchOptions
// 0x0007 (0x0007 - 0x0000)
struct FTraceChannelTestBatchOptions final
{
public:
	bool                                          bLineTrace;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSphereTrace;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapsuleTrace;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoxTrace;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChannelTrace;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bObjectsTrace;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProfileTrace;                                     // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraceChannelTestBatchOptions) == 0x000001, "Wrong alignment on FTraceChannelTestBatchOptions");
static_assert(sizeof(FTraceChannelTestBatchOptions) == 0x000007, "Wrong size on FTraceChannelTestBatchOptions");
static_assert(offsetof(FTraceChannelTestBatchOptions, bLineTrace) == 0x000000, "Member 'FTraceChannelTestBatchOptions::bLineTrace' has a wrong offset!");
static_assert(offsetof(FTraceChannelTestBatchOptions, bSphereTrace) == 0x000001, "Member 'FTraceChannelTestBatchOptions::bSphereTrace' has a wrong offset!");
static_assert(offsetof(FTraceChannelTestBatchOptions, bCapsuleTrace) == 0x000002, "Member 'FTraceChannelTestBatchOptions::bCapsuleTrace' has a wrong offset!");
static_assert(offsetof(FTraceChannelTestBatchOptions, bBoxTrace) == 0x000003, "Member 'FTraceChannelTestBatchOptions::bBoxTrace' has a wrong offset!");
static_assert(offsetof(FTraceChannelTestBatchOptions, bChannelTrace) == 0x000004, "Member 'FTraceChannelTestBatchOptions::bChannelTrace' has a wrong offset!");
static_assert(offsetof(FTraceChannelTestBatchOptions, bObjectsTrace) == 0x000005, "Member 'FTraceChannelTestBatchOptions::bObjectsTrace' has a wrong offset!");
static_assert(offsetof(FTraceChannelTestBatchOptions, bProfileTrace) == 0x000006, "Member 'FTraceChannelTestBatchOptions::bProfileTrace' has a wrong offset!");

}

