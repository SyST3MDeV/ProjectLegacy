#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FogVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FogVolume.BP_FogVolume_C
// 0x0070 (0x0388 - 0x0318)
class ABP_FogVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FogCube;                                           // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FogMaterial;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density;                                           // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InnerScatter;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Emissive;                                          // 0x0350(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Workaround;                                        // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseMin;                                          // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseMax;                                          // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoNoiseOpacityValue;                               // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               NoiseTexture;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseSize;                                         // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseSpeed;                                        // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RadialFalloff;                                     // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadiusScale;                                       // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FogVolume(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetScalarOnFogMaterial(float Value, class FName Name_0);
	void UpdateMaterial();
	void SetVectorOnFogMaterial(const struct FLinearColor& Value, class FName Name_0);
	void UpdateParticle();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FogVolume_C">();
	}
	static class ABP_FogVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FogVolume_C>();
	}
};
static_assert(alignof(ABP_FogVolume_C) == 0x000008, "Wrong alignment on ABP_FogVolume_C");
static_assert(sizeof(ABP_FogVolume_C) == 0x000388, "Wrong size on ABP_FogVolume_C");
static_assert(offsetof(ABP_FogVolume_C, UberGraphFrame) == 0x000318, "Member 'ABP_FogVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, FogCube) == 0x000320, "Member 'ABP_FogVolume_C::FogCube' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, DefaultSceneRoot) == 0x000328, "Member 'ABP_FogVolume_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, FogMaterial) == 0x000330, "Member 'ABP_FogVolume_C::FogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Size) == 0x000338, "Member 'ABP_FogVolume_C::Size' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Density) == 0x00033C, "Member 'ABP_FogVolume_C::Density' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, InnerScatter) == 0x000340, "Member 'ABP_FogVolume_C::InnerScatter' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Emissive) == 0x000350, "Member 'ABP_FogVolume_C::Emissive' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Workaround) == 0x000360, "Member 'ABP_FogVolume_C::Workaround' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseMin) == 0x000364, "Member 'ABP_FogVolume_C::NoiseMin' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseMax) == 0x000368, "Member 'ABP_FogVolume_C::NoiseMax' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoNoiseOpacityValue) == 0x00036C, "Member 'ABP_FogVolume_C::NoNoiseOpacityValue' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseTexture) == 0x000370, "Member 'ABP_FogVolume_C::NoiseTexture' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseSize) == 0x000378, "Member 'ABP_FogVolume_C::NoiseSize' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseSpeed) == 0x00037C, "Member 'ABP_FogVolume_C::NoiseSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, RadialFalloff) == 0x000380, "Member 'ABP_FogVolume_C::RadialFalloff' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, RadiusScale) == 0x000384, "Member 'ABP_FogVolume_C::RadiusScale' has a wrong offset!");

}

