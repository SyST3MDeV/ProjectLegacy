#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_PlayerSpawnFX

#include "Basic.hpp"

#include "GC_PlayerSpawnFX_classes.hpp"
#include "GC_PlayerSpawnFX_parameters.hpp"


namespace SDK
{

// Function GC_PlayerSpawnFX.GC_PlayerSpawnFX_C.ExecuteUbergraph_GC_PlayerSpawnFX
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGC_PlayerSpawnFX_C::ExecuteUbergraph_GC_PlayerSpawnFX(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_PlayerSpawnFX_C", "ExecuteUbergraph_GC_PlayerSpawnFX");

	Params::GC_PlayerSpawnFX_C_ExecuteUbergraph_GC_PlayerSpawnFX Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_PlayerSpawnFX.GC_PlayerSpawnFX_C.HandleRotationalContent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            TagsToHandle                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UGC_PlayerSpawnFX_C::HandleRotationalContent(const struct FGameplayTagContainer& TagsToHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_PlayerSpawnFX_C", "HandleRotationalContent");

	Params::GC_PlayerSpawnFX_C_HandleRotationalContent Parms{};

	Parms.TagsToHandle = std::move(TagsToHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GC_PlayerSpawnFX.GC_PlayerSpawnFX_C.OnBurst
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           MyTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayCueParameters           Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UParticleSystemComponent*         BurstParticleSystem                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UParticleSystemComponent*> AdditionalParticleSystems                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UCameraShake*                     BurstCameraShakeInstance                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADecalActor*                      BurstDecalInstance                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraComponent*                BurstNiagaraParticleSystem                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UNiagaraComponent*>        AdditionalNiagaraParticleSystems                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UGC_PlayerSpawnFX_C::OnBurst(class AActor* MyTarget, struct FGameplayCueParameters& Parameters, class UParticleSystemComponent* BurstParticleSystem, TArray<class UParticleSystemComponent*>& AdditionalParticleSystems, class UCameraShake* BurstCameraShakeInstance, class ADecalActor* BurstDecalInstance, class UNiagaraComponent* BurstNiagaraParticleSystem, TArray<class UNiagaraComponent*>& AdditionalNiagaraParticleSystems) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GC_PlayerSpawnFX_C", "OnBurst");

	Params::GC_PlayerSpawnFX_C_OnBurst Parms{};

	Parms.MyTarget = MyTarget;
	Parms.Parameters = std::move(Parameters);
	Parms.BurstParticleSystem = BurstParticleSystem;
	Parms.AdditionalParticleSystems = std::move(AdditionalParticleSystems);
	Parms.BurstCameraShakeInstance = BurstCameraShakeInstance;
	Parms.BurstDecalInstance = BurstDecalInstance;
	Parms.BurstNiagaraParticleSystem = BurstNiagaraParticleSystem;
	Parms.AdditionalNiagaraParticleSystems = std::move(AdditionalNiagaraParticleSystems);

	UObject::ProcessEvent(Func, &Parms);

	Parameters = std::move(Parms.Parameters);
	AdditionalParticleSystems = std::move(Parms.AdditionalParticleSystems);
	AdditionalNiagaraParticleSystems = std::move(Parms.AdditionalNiagaraParticleSystems);
}

}

