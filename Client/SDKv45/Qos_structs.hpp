#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Qos

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Qos.EQosResponseType
// NumValues: 0x0004
enum class EQosResponseType : uint8
{
	NoResponse                               = 0,
	Success                                  = 1,
	Failure                                  = 2,
	EQosResponseType_MAX                     = 3,
};

// Enum Qos.EQosCompletionResult
// NumValues: 0x0005
enum class EQosCompletionResult : uint8
{
	Invalid                                  = 0,
	Success                                  = 1,
	Failure                                  = 2,
	Canceled                                 = 3,
	EQosCompletionResult_MAX                 = 4,
};

// Enum Qos.EQosRegionResult
// NumValues: 0x0004
enum class EQosRegionResult : uint8
{
	Invalid                                  = 0,
	Success                                  = 1,
	Incomplete                               = 2,
	EQosRegionResult_MAX                     = 3,
};

// ScriptStruct Qos.QosSearchPass
// 0x0008 (0x0008 - 0x0000)
struct FQosSearchPass final
{
public:
	int32                                         RegionIdx;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSessionIdx;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQosSearchPass) == 0x000004, "Wrong alignment on FQosSearchPass");
static_assert(sizeof(FQosSearchPass) == 0x000008, "Wrong size on FQosSearchPass");
static_assert(offsetof(FQosSearchPass, RegionIdx) == 0x000000, "Member 'FQosSearchPass::RegionIdx' has a wrong offset!");
static_assert(offsetof(FQosSearchPass, CurrentSessionIdx) == 0x000004, "Member 'FQosSearchPass::CurrentSessionIdx' has a wrong offset!");

// ScriptStruct Qos.QosPingServerInfo
// 0x0018 (0x0018 - 0x0000)
struct FQosPingServerInfo final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQosPingServerInfo) == 0x000008, "Wrong alignment on FQosPingServerInfo");
static_assert(sizeof(FQosPingServerInfo) == 0x000018, "Wrong size on FQosPingServerInfo");
static_assert(offsetof(FQosPingServerInfo, Address) == 0x000000, "Member 'FQosPingServerInfo::Address' has a wrong offset!");
static_assert(offsetof(FQosPingServerInfo, Port) == 0x000010, "Member 'FQosPingServerInfo::Port' has a wrong offset!");

// ScriptStruct Qos.QosDatacenterInfo
// 0x0040 (0x0040 - 0x0000)
struct FQosDatacenterInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 RegionId;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeta;                                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQosPingServerInfo>             Servers;                                           // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQosDatacenterInfo) == 0x000008, "Wrong alignment on FQosDatacenterInfo");
static_assert(sizeof(FQosDatacenterInfo) == 0x000040, "Wrong size on FQosDatacenterInfo");
static_assert(offsetof(FQosDatacenterInfo, DisplayName) == 0x000000, "Member 'FQosDatacenterInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FQosDatacenterInfo, RegionId) == 0x000018, "Member 'FQosDatacenterInfo::RegionId' has a wrong offset!");
static_assert(offsetof(FQosDatacenterInfo, bEnabled) == 0x000028, "Member 'FQosDatacenterInfo::bEnabled' has a wrong offset!");
static_assert(offsetof(FQosDatacenterInfo, bVisible) == 0x000029, "Member 'FQosDatacenterInfo::bVisible' has a wrong offset!");
static_assert(offsetof(FQosDatacenterInfo, bBeta) == 0x00002A, "Member 'FQosDatacenterInfo::bBeta' has a wrong offset!");
static_assert(offsetof(FQosDatacenterInfo, Servers) == 0x000030, "Member 'FQosDatacenterInfo::Servers' has a wrong offset!");

// ScriptStruct Qos.QosRegionInfo
// 0x0078 (0x0078 - 0x0000)
struct FQosRegionInfo final
{
public:
	struct FQosDatacenterInfo                     Region;                                            // 0x0000(0x0040)(Transient, NativeAccessSpecifierPublic)
	EQosRegionResult                              Result;                                            // 0x0040(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AvgPingMs;                                         // 0x0044(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PingResults;                                       // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastCheckTimestamp;                                // 0x0070(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQosRegionInfo) == 0x000008, "Wrong alignment on FQosRegionInfo");
static_assert(sizeof(FQosRegionInfo) == 0x000078, "Wrong size on FQosRegionInfo");
static_assert(offsetof(FQosRegionInfo, Region) == 0x000000, "Member 'FQosRegionInfo::Region' has a wrong offset!");
static_assert(offsetof(FQosRegionInfo, Result) == 0x000040, "Member 'FQosRegionInfo::Result' has a wrong offset!");
static_assert(offsetof(FQosRegionInfo, AvgPingMs) == 0x000044, "Member 'FQosRegionInfo::AvgPingMs' has a wrong offset!");
static_assert(offsetof(FQosRegionInfo, PingResults) == 0x000058, "Member 'FQosRegionInfo::PingResults' has a wrong offset!");
static_assert(offsetof(FQosRegionInfo, LastCheckTimestamp) == 0x000070, "Member 'FQosRegionInfo::LastCheckTimestamp' has a wrong offset!");

}

