#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_PrimeHelix_Carried

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GC_PrimeHelix_Carried.GC_PrimeHelix_Carried_C
// 0x0020 (0x0860 - 0x0840)
class AGC_PrimeHelix_Carried_C final : public AOrionGameplayCueNotify_Looping
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0840(0x0008)(Transient, DuplicateTransient)
	class FName                                   HelixColorName;                                    // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorParam;                                        // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GC_PrimeHelix_Carried(int32 EntryPoint);
	void K2_WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UParticleSystemComponent* LoopingParticleSystem, const TArray<class UParticleSystemComponent*>& AdditionalParticleSystem, class UNiagaraComponent* LoopingNiagaraParticleSystem, const TArray<class UNiagaraComponent*>& AdditionalNiagaraParticleSystems);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GC_PrimeHelix_Carried_C">();
	}
	static class AGC_PrimeHelix_Carried_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGC_PrimeHelix_Carried_C>();
	}
};
static_assert(alignof(AGC_PrimeHelix_Carried_C) == 0x000010, "Wrong alignment on AGC_PrimeHelix_Carried_C");
static_assert(sizeof(AGC_PrimeHelix_Carried_C) == 0x000860, "Wrong size on AGC_PrimeHelix_Carried_C");
static_assert(offsetof(AGC_PrimeHelix_Carried_C, UberGraphFrame) == 0x000840, "Member 'AGC_PrimeHelix_Carried_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGC_PrimeHelix_Carried_C, HelixColorName) == 0x000848, "Member 'AGC_PrimeHelix_Carried_C::HelixColorName' has a wrong offset!");
static_assert(offsetof(AGC_PrimeHelix_Carried_C, ColorParam) == 0x000850, "Member 'AGC_PrimeHelix_Carried_C::ColorParam' has a wrong offset!");

}

