#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Qos

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "OnlineSubsystemUtils_classes.hpp"
#include "Qos_structs.hpp"


namespace SDK
{

// Class Qos.QosBeaconHost
// 0x0010 (0x0350 - 0x0340)
class AQosBeaconHost final : public AOnlineBeaconHostObject
{
public:
	uint8                                         Pad_340[0x10];                                     // 0x0340(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QosBeaconHost">();
	}
	static class AQosBeaconHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<AQosBeaconHost>();
	}
};
static_assert(alignof(AQosBeaconHost) == 0x000008, "Wrong alignment on AQosBeaconHost");
static_assert(sizeof(AQosBeaconHost) == 0x000350, "Wrong size on AQosBeaconHost");

// Class Qos.QosBeaconClient
// 0x0068 (0x0430 - 0x03C8)
class AQosBeaconClient final : public AOnlineBeaconClient
{
public:
	uint8                                         Pad_3C8[0x68];                                     // 0x03C8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientQosResponse(EQosResponseType Response);
	void ServerQosRequest(const class FString& InSessionId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QosBeaconClient">();
	}
	static class AQosBeaconClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<AQosBeaconClient>();
	}
};
static_assert(alignof(AQosBeaconClient) == 0x000008, "Wrong alignment on AQosBeaconClient");
static_assert(sizeof(AQosBeaconClient) == 0x000430, "Wrong size on AQosBeaconClient");

// Class Qos.QosEvaluator
// 0x00F8 (0x0120 - 0x0028)
class UQosEvaluator final : public UObject
{
public:
	struct FQosSearchPass                         CurrentSearchPass;                                 // 0x0028(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0xA8];                                      // 0x0030(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerId;                                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInProgress;                                       // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCancelOperation;                                  // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQosRegionInfo>                 Datacenters;                                       // 0x00E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x30];                                      // 0x00F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QosEvaluator">();
	}
	static class UQosEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQosEvaluator>();
	}
};
static_assert(alignof(UQosEvaluator) == 0x000008, "Wrong alignment on UQosEvaluator");
static_assert(sizeof(UQosEvaluator) == 0x000120, "Wrong size on UQosEvaluator");
static_assert(offsetof(UQosEvaluator, CurrentSearchPass) == 0x000028, "Member 'UQosEvaluator::CurrentSearchPass' has a wrong offset!");
static_assert(offsetof(UQosEvaluator, ControllerId) == 0x0000D8, "Member 'UQosEvaluator::ControllerId' has a wrong offset!");
static_assert(offsetof(UQosEvaluator, bInProgress) == 0x0000DC, "Member 'UQosEvaluator::bInProgress' has a wrong offset!");
static_assert(offsetof(UQosEvaluator, bCancelOperation) == 0x0000DD, "Member 'UQosEvaluator::bCancelOperation' has a wrong offset!");
static_assert(offsetof(UQosEvaluator, Datacenters) == 0x0000E0, "Member 'UQosEvaluator::Datacenters' has a wrong offset!");

// Class Qos.QosRegionManager
// 0x0080 (0x00A8 - 0x0028)
class UQosRegionManager final : public UObject
{
public:
	bool                                          bUseOldQosServers;                                 // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumTestsPerRegion;                                 // 0x002C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PingTimeout;                                       // 0x0030(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQosDatacenterInfo>             Datacenters;                                       // 0x0038(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	struct FDateTime                              LastCheckTimestamp;                                // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UQosEvaluator*                          Evaluator;                                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EQosCompletionResult                          QosEvalResult;                                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQosRegionInfo>                 RegionOptions;                                     // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 ForceRegionId;                                     // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRegionForcedViaCommandline;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedRegionId;                                  // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QosRegionManager">();
	}
	static class UQosRegionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQosRegionManager>();
	}
};
static_assert(alignof(UQosRegionManager) == 0x000008, "Wrong alignment on UQosRegionManager");
static_assert(sizeof(UQosRegionManager) == 0x0000A8, "Wrong size on UQosRegionManager");
static_assert(offsetof(UQosRegionManager, bUseOldQosServers) == 0x000028, "Member 'UQosRegionManager::bUseOldQosServers' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, NumTestsPerRegion) == 0x00002C, "Member 'UQosRegionManager::NumTestsPerRegion' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, PingTimeout) == 0x000030, "Member 'UQosRegionManager::PingTimeout' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, Datacenters) == 0x000038, "Member 'UQosRegionManager::Datacenters' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, LastCheckTimestamp) == 0x000048, "Member 'UQosRegionManager::LastCheckTimestamp' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, Evaluator) == 0x000050, "Member 'UQosRegionManager::Evaluator' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, QosEvalResult) == 0x000058, "Member 'UQosRegionManager::QosEvalResult' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, RegionOptions) == 0x000060, "Member 'UQosRegionManager::RegionOptions' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, ForceRegionId) == 0x000070, "Member 'UQosRegionManager::ForceRegionId' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, bRegionForcedViaCommandline) == 0x000080, "Member 'UQosRegionManager::bRegionForcedViaCommandline' has a wrong offset!");
static_assert(offsetof(UQosRegionManager, SelectedRegionId) == 0x000088, "Member 'UQosRegionManager::SelectedRegionId' has a wrong offset!");

}

