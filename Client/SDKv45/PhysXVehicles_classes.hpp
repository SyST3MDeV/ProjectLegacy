#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysXVehicles

#include "Basic.hpp"

#include "PhysXVehicles_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PhysXVehicles.WheeledVehicleMovementComponent
// 0x0168 (0x02E0 - 0x0178)
class UWheeledVehicleMovementComponent : public UPawnMovementComponent
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDeprecatedSpringOffsetMode : 1;                   // 0x0180(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWheelSetup>                    WheelSetups;                                       // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChassisWidth;                                      // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChassisHeight;                                     // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseAsBrake;                                   // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DragArea;                                          // 0x01AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EstimatedMaxEngineSpeed;                           // 0x01B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEngineRPM;                                      // 0x01B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDragMagnitude;                                // 0x01B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InertiaTensorScale;                                // 0x01BC(0x000C)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNormalizedTireLoad;                             // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNormalizedTireLoadFiltered;                     // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNormalizedTireLoad;                             // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNormalizedTireLoadFiltered;                     // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdLongitudinalSpeed;                        // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowForwardSpeedSubStepCount;                       // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighForwardSpeedSubStepCount;                      // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicleWheel*>                  Wheels;                                            // 0x01E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x18];                                     // 0x01F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseRVOAvoidance : 1;                              // 0x0210(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RVOAvoidanceRadius;                                // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RVOAvoidanceHeight;                                // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidanceConsiderationRadius;                      // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RVOSteeringStep;                                   // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RVOThrottleStep;                                   // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidanceUID;                                      // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                      AvoidanceGroup;                                    // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                      GroupsToAvoid;                                     // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                      GroupsToIgnore;                                    // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         AvoidanceWeight;                                   // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PendingLaunchVelocity;                             // 0x023C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReplicatedVehicleState                ReplicatedState;                                   // 0x0248(0x0014)(Net, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RawSteeringInput;                                  // 0x0260(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawThrottleInput;                                  // 0x0264(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawBrakeInput;                                     // 0x0268(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bRawHandbrakeInput : 1;                            // 0x026C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRawGearUpInput : 1;                               // 0x026C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRawGearDownInput : 1;                             // 0x026C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringInput;                                     // 0x0270(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrottleInput;                                     // 0x0274(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakeInput;                                        // 0x0278(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandbrakeInput;                                    // 0x027C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IdleBrakeInput;                                    // 0x0280(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StopThreshold;                                     // 0x0284(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WrongDirectionThreshold;                           // 0x0288(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVehicleInputRate                      ThrottleInputRate;                                 // 0x028C(0x0008)(Edit, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	struct FVehicleInputRate                      BrakeInputRate;                                    // 0x0294(0x0008)(Edit, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	struct FVehicleInputRate                      HandbrakeInputRate;                                // 0x029C(0x0008)(Edit, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	struct FVehicleInputRate                      SteeringInputRate;                                 // 0x02A4(0x0008)(Edit, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         bWasAvoidanceUpdated : 1;                          // 0x02AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2AD[0x2B];                                     // 0x02AD(0x002B)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            OverrideController;                                // 0x02D8(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int32 CurrentGear);
	void SetAvoidanceEnabled(bool bEnable);
	void SetAvoidanceGroup(int32 GroupFlags);
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);
	void SetBrakeInput(float Brake);
	void SetGearDown(bool bNewGearDown);
	void SetGearUp(bool bNewGearUp);
	void SetGroupsToAvoid(int32 GroupFlags);
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int32 GroupFlags);
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);
	void SetHandbrakeInput(bool bNewHandbrake);
	void SetSteeringInput(float Steering);
	void SetTargetGear(int32 GearNum, bool bImmediate);
	void SetThrottleInput(float Throttle);
	void SetUseAutoGears(bool bUseAuto);

	int32 GetCurrentGear() const;
	float GetEngineMaxRotationSpeed() const;
	float GetEngineRotationSpeed() const;
	float GetForwardSpeed() const;
	int32 GetTargetGear() const;
	bool GetUseAutoGears() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheeledVehicleMovementComponent">();
	}
	static class UWheeledVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWheeledVehicleMovementComponent>();
	}
};
static_assert(alignof(UWheeledVehicleMovementComponent) == 0x000008, "Wrong alignment on UWheeledVehicleMovementComponent");
static_assert(sizeof(UWheeledVehicleMovementComponent) == 0x0002E0, "Wrong size on UWheeledVehicleMovementComponent");
static_assert(offsetof(UWheeledVehicleMovementComponent, WheelSetups) == 0x000188, "Member 'UWheeledVehicleMovementComponent::WheelSetups' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, Mass) == 0x000198, "Member 'UWheeledVehicleMovementComponent::Mass' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, DragCoefficient) == 0x00019C, "Member 'UWheeledVehicleMovementComponent::DragCoefficient' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, ChassisWidth) == 0x0001A0, "Member 'UWheeledVehicleMovementComponent::ChassisWidth' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, ChassisHeight) == 0x0001A4, "Member 'UWheeledVehicleMovementComponent::ChassisHeight' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, bReverseAsBrake) == 0x0001A8, "Member 'UWheeledVehicleMovementComponent::bReverseAsBrake' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, DragArea) == 0x0001AC, "Member 'UWheeledVehicleMovementComponent::DragArea' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed) == 0x0001B0, "Member 'UWheeledVehicleMovementComponent::EstimatedMaxEngineSpeed' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, MaxEngineRPM) == 0x0001B4, "Member 'UWheeledVehicleMovementComponent::MaxEngineRPM' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, DebugDragMagnitude) == 0x0001B8, "Member 'UWheeledVehicleMovementComponent::DebugDragMagnitude' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, InertiaTensorScale) == 0x0001BC, "Member 'UWheeledVehicleMovementComponent::InertiaTensorScale' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, MinNormalizedTireLoad) == 0x0001C8, "Member 'UWheeledVehicleMovementComponent::MinNormalizedTireLoad' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered) == 0x0001CC, "Member 'UWheeledVehicleMovementComponent::MinNormalizedTireLoadFiltered' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, MaxNormalizedTireLoad) == 0x0001D0, "Member 'UWheeledVehicleMovementComponent::MaxNormalizedTireLoad' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered) == 0x0001D4, "Member 'UWheeledVehicleMovementComponent::MaxNormalizedTireLoadFiltered' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed) == 0x0001D8, "Member 'UWheeledVehicleMovementComponent::ThresholdLongitudinalSpeed' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount) == 0x0001DC, "Member 'UWheeledVehicleMovementComponent::LowForwardSpeedSubStepCount' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount) == 0x0001E0, "Member 'UWheeledVehicleMovementComponent::HighForwardSpeedSubStepCount' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, Wheels) == 0x0001E8, "Member 'UWheeledVehicleMovementComponent::Wheels' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, RVOAvoidanceRadius) == 0x000214, "Member 'UWheeledVehicleMovementComponent::RVOAvoidanceRadius' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, RVOAvoidanceHeight) == 0x000218, "Member 'UWheeledVehicleMovementComponent::RVOAvoidanceHeight' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius) == 0x00021C, "Member 'UWheeledVehicleMovementComponent::AvoidanceConsiderationRadius' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, RVOSteeringStep) == 0x000220, "Member 'UWheeledVehicleMovementComponent::RVOSteeringStep' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, RVOThrottleStep) == 0x000224, "Member 'UWheeledVehicleMovementComponent::RVOThrottleStep' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, AvoidanceUID) == 0x000228, "Member 'UWheeledVehicleMovementComponent::AvoidanceUID' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, AvoidanceGroup) == 0x00022C, "Member 'UWheeledVehicleMovementComponent::AvoidanceGroup' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, GroupsToAvoid) == 0x000230, "Member 'UWheeledVehicleMovementComponent::GroupsToAvoid' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, GroupsToIgnore) == 0x000234, "Member 'UWheeledVehicleMovementComponent::GroupsToIgnore' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, AvoidanceWeight) == 0x000238, "Member 'UWheeledVehicleMovementComponent::AvoidanceWeight' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, PendingLaunchVelocity) == 0x00023C, "Member 'UWheeledVehicleMovementComponent::PendingLaunchVelocity' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, ReplicatedState) == 0x000248, "Member 'UWheeledVehicleMovementComponent::ReplicatedState' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, RawSteeringInput) == 0x000260, "Member 'UWheeledVehicleMovementComponent::RawSteeringInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, RawThrottleInput) == 0x000264, "Member 'UWheeledVehicleMovementComponent::RawThrottleInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, RawBrakeInput) == 0x000268, "Member 'UWheeledVehicleMovementComponent::RawBrakeInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, SteeringInput) == 0x000270, "Member 'UWheeledVehicleMovementComponent::SteeringInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, ThrottleInput) == 0x000274, "Member 'UWheeledVehicleMovementComponent::ThrottleInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, BrakeInput) == 0x000278, "Member 'UWheeledVehicleMovementComponent::BrakeInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, HandbrakeInput) == 0x00027C, "Member 'UWheeledVehicleMovementComponent::HandbrakeInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, IdleBrakeInput) == 0x000280, "Member 'UWheeledVehicleMovementComponent::IdleBrakeInput' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, StopThreshold) == 0x000284, "Member 'UWheeledVehicleMovementComponent::StopThreshold' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, WrongDirectionThreshold) == 0x000288, "Member 'UWheeledVehicleMovementComponent::WrongDirectionThreshold' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, ThrottleInputRate) == 0x00028C, "Member 'UWheeledVehicleMovementComponent::ThrottleInputRate' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, BrakeInputRate) == 0x000294, "Member 'UWheeledVehicleMovementComponent::BrakeInputRate' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, HandbrakeInputRate) == 0x00029C, "Member 'UWheeledVehicleMovementComponent::HandbrakeInputRate' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, SteeringInputRate) == 0x0002A4, "Member 'UWheeledVehicleMovementComponent::SteeringInputRate' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent, OverrideController) == 0x0002D8, "Member 'UWheeledVehicleMovementComponent::OverrideController' has a wrong offset!");

// Class PhysXVehicles.SimpleWheeledVehicleMovementComponent
// 0x0000 (0x02E0 - 0x02E0)
class USimpleWheeledVehicleMovementComponent final : public UWheeledVehicleMovementComponent
{
public:
	void SetBrakeTorque(float BrakeTorque, int32 WheelIndex);
	void SetDriveTorque(float DriveTorque, int32 WheelIndex);
	void SetSteerAngle(float SteerAngle, int32 WheelIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleWheeledVehicleMovementComponent">();
	}
	static class USimpleWheeledVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleWheeledVehicleMovementComponent>();
	}
};
static_assert(alignof(USimpleWheeledVehicleMovementComponent) == 0x000008, "Wrong alignment on USimpleWheeledVehicleMovementComponent");
static_assert(sizeof(USimpleWheeledVehicleMovementComponent) == 0x0002E0, "Wrong size on USimpleWheeledVehicleMovementComponent");

// Class PhysXVehicles.TireConfig
// 0x0020 (0x0050 - 0x0030)
class UTireConfig final : public UDataAsset
{
public:
	float                                         FrictionScale;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTireConfigMaterialFriction>    TireFrictionScales;                                // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TireConfig">();
	}
	static class UTireConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTireConfig>();
	}
};
static_assert(alignof(UTireConfig) == 0x000008, "Wrong alignment on UTireConfig");
static_assert(sizeof(UTireConfig) == 0x000050, "Wrong size on UTireConfig");
static_assert(offsetof(UTireConfig, FrictionScale) == 0x000030, "Member 'UTireConfig::FrictionScale' has a wrong offset!");
static_assert(offsetof(UTireConfig, TireFrictionScales) == 0x000038, "Member 'UTireConfig::TireFrictionScales' has a wrong offset!");

// Class PhysXVehicles.VehicleAnimInstance
// 0x0518 (0x08D0 - 0x03B8)
class UVehicleAnimInstance final : public UAnimInstance
{
public:
	uint8                                         Pad_3B8[0x508];                                    // 0x03B8(0x0508)(Fixing Size After Last Property [ Dumper-7 ])
	class UWheeledVehicleMovementComponent*       WheeledVehicleMovementComponent;                   // 0x08C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C8[0x8];                                      // 0x08C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AWheeledVehicle* GetVehicle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAnimInstance">();
	}
	static class UVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleAnimInstance>();
	}
};
static_assert(alignof(UVehicleAnimInstance) == 0x000008, "Wrong alignment on UVehicleAnimInstance");
static_assert(sizeof(UVehicleAnimInstance) == 0x0008D0, "Wrong size on UVehicleAnimInstance");
static_assert(offsetof(UVehicleAnimInstance, WheeledVehicleMovementComponent) == 0x0008C0, "Member 'UVehicleAnimInstance::WheeledVehicleMovementComponent' has a wrong offset!");

// Class PhysXVehicles.VehicleWheel
// 0x00C8 (0x00F0 - 0x0028)
class UVehicleWheel final : public UObject
{
public:
	class UStaticMesh*                            CollisionMesh;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontCreateShape;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAdjustCollisionSize;                          // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0034(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShapeRadius;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShapeWidth;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRate;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngle;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectedByHandbrake;                              // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTireType*                              TireType;                                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTireConfig*                            TireConfig;                                        // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatStiffMaxLoad;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatStiffValue;                                     // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongStiffValue;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionForceOffset;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionMaxRaise;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionMaxDrop;                                 // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionNaturalFrequency;                        // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionDampingRatio;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWheelSweepType                               SweepType;                                         // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBrakeTorque;                                    // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHandBrakeTorque;                                // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWheeledVehicleMovementComponent*       VehicleSim;                                        // 0x0098(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x00A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLongSlip;                                     // 0x00A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLatSlip;                                      // 0x00A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugNormalizedTireLoad;                           // 0x00AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x4];                                       // 0x00B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugWheelTorque;                                  // 0x00B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLongForce;                                    // 0x00B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLatForce;                                     // 0x00BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x00C0(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x00CC(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x00D8(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetRotationAngle() const;
	float GetSteerAngle() const;
	float GetSuspensionOffset() const;
	bool IsInAir() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleWheel">();
	}
	static class UVehicleWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleWheel>();
	}
};
static_assert(alignof(UVehicleWheel) == 0x000008, "Wrong alignment on UVehicleWheel");
static_assert(sizeof(UVehicleWheel) == 0x0000F0, "Wrong size on UVehicleWheel");
static_assert(offsetof(UVehicleWheel, CollisionMesh) == 0x000028, "Member 'UVehicleWheel::CollisionMesh' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, bDontCreateShape) == 0x000030, "Member 'UVehicleWheel::bDontCreateShape' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, bAutoAdjustCollisionSize) == 0x000031, "Member 'UVehicleWheel::bAutoAdjustCollisionSize' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, Offset) == 0x000034, "Member 'UVehicleWheel::Offset' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, ShapeRadius) == 0x000040, "Member 'UVehicleWheel::ShapeRadius' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, ShapeWidth) == 0x000044, "Member 'UVehicleWheel::ShapeWidth' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, Mass) == 0x000048, "Member 'UVehicleWheel::Mass' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, DampingRate) == 0x00004C, "Member 'UVehicleWheel::DampingRate' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, SteerAngle) == 0x000050, "Member 'UVehicleWheel::SteerAngle' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, bAffectedByHandbrake) == 0x000054, "Member 'UVehicleWheel::bAffectedByHandbrake' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, TireType) == 0x000058, "Member 'UVehicleWheel::TireType' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, TireConfig) == 0x000060, "Member 'UVehicleWheel::TireConfig' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, LatStiffMaxLoad) == 0x000068, "Member 'UVehicleWheel::LatStiffMaxLoad' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, LatStiffValue) == 0x00006C, "Member 'UVehicleWheel::LatStiffValue' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, LongStiffValue) == 0x000070, "Member 'UVehicleWheel::LongStiffValue' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, SuspensionForceOffset) == 0x000074, "Member 'UVehicleWheel::SuspensionForceOffset' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, SuspensionMaxRaise) == 0x000078, "Member 'UVehicleWheel::SuspensionMaxRaise' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, SuspensionMaxDrop) == 0x00007C, "Member 'UVehicleWheel::SuspensionMaxDrop' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, SuspensionNaturalFrequency) == 0x000080, "Member 'UVehicleWheel::SuspensionNaturalFrequency' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, SuspensionDampingRatio) == 0x000084, "Member 'UVehicleWheel::SuspensionDampingRatio' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, SweepType) == 0x000088, "Member 'UVehicleWheel::SweepType' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, MaxBrakeTorque) == 0x00008C, "Member 'UVehicleWheel::MaxBrakeTorque' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, MaxHandBrakeTorque) == 0x000090, "Member 'UVehicleWheel::MaxHandBrakeTorque' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, VehicleSim) == 0x000098, "Member 'UVehicleWheel::VehicleSim' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, WheelIndex) == 0x0000A0, "Member 'UVehicleWheel::WheelIndex' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, DebugLongSlip) == 0x0000A4, "Member 'UVehicleWheel::DebugLongSlip' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, DebugLatSlip) == 0x0000A8, "Member 'UVehicleWheel::DebugLatSlip' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, DebugNormalizedTireLoad) == 0x0000AC, "Member 'UVehicleWheel::DebugNormalizedTireLoad' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, DebugWheelTorque) == 0x0000B4, "Member 'UVehicleWheel::DebugWheelTorque' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, DebugLongForce) == 0x0000B8, "Member 'UVehicleWheel::DebugLongForce' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, DebugLatForce) == 0x0000BC, "Member 'UVehicleWheel::DebugLatForce' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, Location) == 0x0000C0, "Member 'UVehicleWheel::Location' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, OldLocation) == 0x0000CC, "Member 'UVehicleWheel::OldLocation' has a wrong offset!");
static_assert(offsetof(UVehicleWheel, Velocity) == 0x0000D8, "Member 'UVehicleWheel::Velocity' has a wrong offset!");

// Class PhysXVehicles.WheeledVehicle
// 0x0010 (0x0388 - 0x0378)
class AWheeledVehicle final : public APawn
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWheeledVehicleMovementComponent*       VehicleMovement;                                   // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheeledVehicle">();
	}
	static class AWheeledVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWheeledVehicle>();
	}
};
static_assert(alignof(AWheeledVehicle) == 0x000008, "Wrong alignment on AWheeledVehicle");
static_assert(sizeof(AWheeledVehicle) == 0x000388, "Wrong size on AWheeledVehicle");
static_assert(offsetof(AWheeledVehicle, Mesh) == 0x000378, "Member 'AWheeledVehicle::Mesh' has a wrong offset!");
static_assert(offsetof(AWheeledVehicle, VehicleMovement) == 0x000380, "Member 'AWheeledVehicle::VehicleMovement' has a wrong offset!");

// Class PhysXVehicles.WheeledVehicleMovementComponent4W
// 0x0160 (0x0440 - 0x02E0)
class UWheeledVehicleMovementComponent4W final : public UWheeledVehicleMovementComponent
{
public:
	struct FVehicleEngineData                     EngineSetup;                                       // 0x02E0(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FVehicleDifferential4WData             DifferentialSetup;                                 // 0x0370(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleTransmissionData               TransmissionSetup;                                 // 0x0390(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SteeringCurve;                                     // 0x03C0(0x0078)(Edit, NativeAccessSpecifierPublic)
	float                                         AckermannAccuracy;                                 // 0x0438(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheeledVehicleMovementComponent4W">();
	}
	static class UWheeledVehicleMovementComponent4W* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWheeledVehicleMovementComponent4W>();
	}
};
static_assert(alignof(UWheeledVehicleMovementComponent4W) == 0x000008, "Wrong alignment on UWheeledVehicleMovementComponent4W");
static_assert(sizeof(UWheeledVehicleMovementComponent4W) == 0x000440, "Wrong size on UWheeledVehicleMovementComponent4W");
static_assert(offsetof(UWheeledVehicleMovementComponent4W, EngineSetup) == 0x0002E0, "Member 'UWheeledVehicleMovementComponent4W::EngineSetup' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent4W, DifferentialSetup) == 0x000370, "Member 'UWheeledVehicleMovementComponent4W::DifferentialSetup' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent4W, TransmissionSetup) == 0x000390, "Member 'UWheeledVehicleMovementComponent4W::TransmissionSetup' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent4W, SteeringCurve) == 0x0003C0, "Member 'UWheeledVehicleMovementComponent4W::SteeringCurve' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponent4W, AckermannAccuracy) == 0x000438, "Member 'UWheeledVehicleMovementComponent4W::AckermannAccuracy' has a wrong offset!");

}

