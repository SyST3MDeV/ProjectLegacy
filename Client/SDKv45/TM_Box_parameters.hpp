#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TM_Box

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TM_Box.TM_Box_C.ExecuteUbergraph_TM_Box
// 0x0200 (0x0200 - 0x0000)
struct TM_Box_C_ExecuteUbergraph_TM_Box final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable2;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable3;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable3;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable4;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable5;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0050(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_MinBounds;                            // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_MaxBounds;                            // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X3;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y3;                           // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z3;                           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue2;                  // 0x00BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue3;                  // 0x00CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_Select2_Default;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X4;                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y4;                           // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z4;                           // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_Select3_Default;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue2;          // 0x00FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue4;                  // 0x0108(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X5;                           // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y5;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z5;                           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue5;                  // 0x0140(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0158(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_Select4_Default;                            // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue6;                  // 0x01F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue2;                 // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TM_Box_C_ExecuteUbergraph_TM_Box) == 0x000008, "Wrong alignment on TM_Box_C_ExecuteUbergraph_TM_Box");
static_assert(sizeof(TM_Box_C_ExecuteUbergraph_TM_Box) == 0x000200, "Wrong size on TM_Box_C_ExecuteUbergraph_TM_Box");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, EntryPoint) == 0x000000, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::EntryPoint' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_bool_Variable) == 0x000004, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_object_Variable) == 0x000008, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_bool_Variable2) == 0x000010, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_object_Variable2) == 0x000018, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_bool_Variable3) == 0x000020, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_object_Variable3) == 0x000028, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_bool_Variable4) == 0x000030, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_object_Variable4) == 0x000038, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_object_Variable4' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, Temp_object_Variable5) == 0x000040, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::Temp_object_Variable5' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, K2Node_Select_Default) == 0x000048, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000050, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, K2Node_Event_MinBounds) == 0x000060, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::K2Node_Event_MinBounds' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, K2Node_Event_MaxBounds) == 0x00006C, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::K2Node_Event_MaxBounds' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_X) == 0x000078, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Y) == 0x00007C, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Z) == 0x000080, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000084, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000090, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_X2) == 0x000094, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Y2) == 0x000098, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Z2) == 0x00009C, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_X3) == 0x0000A0, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_X3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Y3) == 0x0000A4, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Y3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Z3) == 0x0000A8, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Z3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000AC, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_MakeVector_ReturnValue2) == 0x0000BC, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_MakeVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000C8, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000C9, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_MakeVector_ReturnValue3) == 0x0000CC, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_MakeVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, K2Node_Select2_Default) == 0x0000D8, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_X4) == 0x0000E0, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_X4' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Y4) == 0x0000E4, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Y4' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Z4) == 0x0000E8, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Z4' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, K2Node_Select3_Default) == 0x0000F0, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0000F8, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Divide_VectorFloat_ReturnValue2) == 0x0000FC, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Divide_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_MakeVector_ReturnValue4) == 0x000108, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_MakeVector_ReturnValue4' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_X5) == 0x000114, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_X5' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Y5) == 0x000118, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Y5' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_BreakVector_Z5) == 0x00011C, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_BreakVector_Z5' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Add_FloatFloat_ReturnValue) == 0x000120, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Abs_ReturnValue) == 0x000124, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000128, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00012C, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000130, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x000134, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x000138, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00013C, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_MakeVector_ReturnValue5) == 0x000140, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_MakeVector_ReturnValue5' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x00014C, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000150, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000158, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_SelectFloat_ReturnValue) == 0x0001E0, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, K2Node_Select4_Default) == 0x0001E8, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_MakeVector_ReturnValue6) == 0x0001F0, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_MakeVector_ReturnValue6' has a wrong offset!");
static_assert(offsetof(TM_Box_C_ExecuteUbergraph_TM_Box, CallFunc_SelectFloat_ReturnValue2) == 0x0001FC, "Member 'TM_Box_C_ExecuteUbergraph_TM_Box::CallFunc_SelectFloat_ReturnValue2' has a wrong offset!");

// Function TM_Box.TM_Box_C.OnFacetBoxBuilt
// 0x0018 (0x0018 - 0x0000)
struct TM_Box_C_OnFacetBoxBuilt final
{
public:
	struct FVector                                MinBounds;                                         // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MaxBounds;                                         // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TM_Box_C_OnFacetBoxBuilt) == 0x000004, "Wrong alignment on TM_Box_C_OnFacetBoxBuilt");
static_assert(sizeof(TM_Box_C_OnFacetBoxBuilt) == 0x000018, "Wrong size on TM_Box_C_OnFacetBoxBuilt");
static_assert(offsetof(TM_Box_C_OnFacetBoxBuilt, MinBounds) == 0x000000, "Member 'TM_Box_C_OnFacetBoxBuilt::MinBounds' has a wrong offset!");
static_assert(offsetof(TM_Box_C_OnFacetBoxBuilt, MaxBounds) == 0x00000C, "Member 'TM_Box_C_OnFacetBoxBuilt::MaxBounds' has a wrong offset!");

// Function TM_Box.TM_Box_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct TM_Box_C_UserConstructionScript final
{
public:
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0004(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TM_Box_C_UserConstructionScript) == 0x000008, "Wrong alignment on TM_Box_C_UserConstructionScript");
static_assert(sizeof(TM_Box_C_UserConstructionScript) == 0x000020, "Wrong size on TM_Box_C_UserConstructionScript");
static_assert(offsetof(TM_Box_C_UserConstructionScript, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000000, "Member 'TM_Box_C_UserConstructionScript::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_UserConstructionScript, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000004, "Member 'TM_Box_C_UserConstructionScript::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TM_Box_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'TM_Box_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}

