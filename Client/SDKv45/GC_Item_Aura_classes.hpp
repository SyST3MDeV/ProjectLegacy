#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_Item_Aura

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GC_Item_Aura.GC_Item_Aura_C
// 0x0070 (0x08B0 - 0x0840)
class AGC_Item_Aura_C : public AOrionGameplayCueNotify_Looping
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0840(0x0008)(Transient, DuplicateTransient)
	class UOrionDecalComponent*                   Decal;                                             // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Pulsing_Control_Pulse_Limit_3ED68384420F1B4413E9259C40F4558A; // 0x0858(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pulsing_Control_Pulse_Decal_3ED68384420F1B4413E9259C40F4558A; // 0x085C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Pulsing_Control__Direction_3ED68384420F1B4413E9259C40F4558A; // 0x0860(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Pulsing_Control;                                   // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Limit_MID;                                         // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Decal_MID;                                         // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0880(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PulseDelay;                                        // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PulseSpeed;                                        // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_88C[0x4];                                      // 0x088C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Affinity;                                          // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture*                               Noise_Texture;                                     // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         U_Scale;                                           // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         V_Scale;                                           // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Intensity;                                // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x08AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseAffinityColor_;                                 // 0x08AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GC_Item_Aura(int32 EntryPoint);
	void K2_WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UParticleSystemComponent* LoopingParticleSystem, const TArray<class UParticleSystemComponent*>& AdditionalParticleSystem, class UNiagaraComponent* LoopingNiagaraParticleSystem, const TArray<class UNiagaraComponent*>& AdditionalNiagaraParticleSystems);
	void K2_OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UParticleSystemComponent* RemovalParticleSystem, const TArray<class UParticleSystemComponent*>& AdditionalParticleSystems, class UNiagaraComponent* RemovalNiagaraParticleSystem, const TArray<class UNiagaraComponent*>& AdditionalNiagaraParticleSystems);
	void Pulsing_Control__UpdateFunc();
	void Pulsing_Control__FinishedFunc();
	void UserConstructionScript();
	void Setup();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GC_Item_Aura_C">();
	}
	static class AGC_Item_Aura_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGC_Item_Aura_C>();
	}
};
static_assert(alignof(AGC_Item_Aura_C) == 0x000010, "Wrong alignment on AGC_Item_Aura_C");
static_assert(sizeof(AGC_Item_Aura_C) == 0x0008B0, "Wrong size on AGC_Item_Aura_C");
static_assert(offsetof(AGC_Item_Aura_C, UberGraphFrame) == 0x000840, "Member 'AGC_Item_Aura_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Decal) == 0x000848, "Member 'AGC_Item_Aura_C::Decal' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Sphere) == 0x000850, "Member 'AGC_Item_Aura_C::Sphere' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Pulsing_Control_Pulse_Limit_3ED68384420F1B4413E9259C40F4558A) == 0x000858, "Member 'AGC_Item_Aura_C::Pulsing_Control_Pulse_Limit_3ED68384420F1B4413E9259C40F4558A' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Pulsing_Control_Pulse_Decal_3ED68384420F1B4413E9259C40F4558A) == 0x00085C, "Member 'AGC_Item_Aura_C::Pulsing_Control_Pulse_Decal_3ED68384420F1B4413E9259C40F4558A' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Pulsing_Control__Direction_3ED68384420F1B4413E9259C40F4558A) == 0x000860, "Member 'AGC_Item_Aura_C::Pulsing_Control__Direction_3ED68384420F1B4413E9259C40F4558A' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Pulsing_Control) == 0x000868, "Member 'AGC_Item_Aura_C::Pulsing_Control' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Limit_MID) == 0x000870, "Member 'AGC_Item_Aura_C::Limit_MID' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Decal_MID) == 0x000878, "Member 'AGC_Item_Aura_C::Decal_MID' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Radius) == 0x000880, "Member 'AGC_Item_Aura_C::Radius' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, PulseDelay) == 0x000884, "Member 'AGC_Item_Aura_C::PulseDelay' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, PulseSpeed) == 0x000888, "Member 'AGC_Item_Aura_C::PulseSpeed' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Affinity) == 0x000890, "Member 'AGC_Item_Aura_C::Affinity' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Noise_Texture) == 0x000898, "Member 'AGC_Item_Aura_C::Noise_Texture' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, U_Scale) == 0x0008A0, "Member 'AGC_Item_Aura_C::U_Scale' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, V_Scale) == 0x0008A4, "Member 'AGC_Item_Aura_C::V_Scale' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Emissive_Intensity) == 0x0008A8, "Member 'AGC_Item_Aura_C::Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, Debug) == 0x0008AC, "Member 'AGC_Item_Aura_C::Debug' has a wrong offset!");
static_assert(offsetof(AGC_Item_Aura_C, UseAffinityColor_) == 0x0008AD, "Member 'AGC_Item_Aura_C::UseAffinityColor_' has a wrong offset!");

}

