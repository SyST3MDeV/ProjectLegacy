#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Reticle3D_SingleTarget

#include "Basic.hpp"

#include "GameplayAbilities_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Reticle3D_SingleTarget.BP_Reticle3D_SingleTarget_C
// 0x0040 (0x0378 - 0x0338)
class ABP_Reticle3D_SingleTarget_C : public AGameplayAbilityWorldReticle
{
public:
	class UParticleSystemComponent*               MoveToArrow;                                       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            MB_TargetingGlow;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Emitter_Target_Cylinder;                           // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            MoveToSpriteBeam;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            MB_TargetingBrackets;                              // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh1;                                       // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AbilityRadius;                                     // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MovingToTarget;                                    // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Reticle3D_SingleTarget_C">();
	}
	static class ABP_Reticle3D_SingleTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Reticle3D_SingleTarget_C>();
	}
};
static_assert(alignof(ABP_Reticle3D_SingleTarget_C) == 0x000008, "Wrong alignment on ABP_Reticle3D_SingleTarget_C");
static_assert(sizeof(ABP_Reticle3D_SingleTarget_C) == 0x000378, "Wrong size on ABP_Reticle3D_SingleTarget_C");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, MoveToArrow) == 0x000338, "Member 'ABP_Reticle3D_SingleTarget_C::MoveToArrow' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, MB_TargetingGlow) == 0x000340, "Member 'ABP_Reticle3D_SingleTarget_C::MB_TargetingGlow' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, PointLight) == 0x000348, "Member 'ABP_Reticle3D_SingleTarget_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, Emitter_Target_Cylinder) == 0x000350, "Member 'ABP_Reticle3D_SingleTarget_C::Emitter_Target_Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, MoveToSpriteBeam) == 0x000358, "Member 'ABP_Reticle3D_SingleTarget_C::MoveToSpriteBeam' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, MB_TargetingBrackets) == 0x000360, "Member 'ABP_Reticle3D_SingleTarget_C::MB_TargetingBrackets' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, StaticMesh1) == 0x000368, "Member 'ABP_Reticle3D_SingleTarget_C::StaticMesh1' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, AbilityRadius) == 0x000370, "Member 'ABP_Reticle3D_SingleTarget_C::AbilityRadius' has a wrong offset!");
static_assert(offsetof(ABP_Reticle3D_SingleTarget_C, MovingToTarget) == 0x000374, "Member 'ABP_Reticle3D_SingleTarget_C::MovingToTarget' has a wrong offset!");

}

