#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Hero

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OrionGame_structs.hpp"
#include "OrionGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Hero.BP_Hero_C
// 0x01E0 (0x1380 - 0x11A0)
class ABP_Hero_C final : public AOrionCharHero
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x11A0(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               HatFX;                                             // 0x11A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HatMesh;                                           // 0x11B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          LaunchOnDeath;                                     // 0x11B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11B9[0x3];                                     // 0x11B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LaunchMagnitudeMin;                                // 0x11BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchMagnitudeMax;                                // 0x11C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RawDamageRangeMin;                                 // 0x11C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RawDamageRangeMax;                                 // 0x11C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CoinsPerLevel;                                     // 0x11CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              EnemyImpactSound;                                  // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TravelModeCamera;                                  // 0x11D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinCoinsToSpawn;                                   // 0x11E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E4[0x4];                                     // 0x11E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LootSpawnSocket;                                   // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FOrion2DReticle                        ReticleData;                                       // 0x11F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class USoundCue*                              PlayerImpactSound;                                 // 0x1208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 RecallCamera;                                      // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_DeathLightRays;                                 // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Audio_DeathLightRays;                              // 0x1220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LOD_FX;                                            // 0x1228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LOD_FX_Camera;                                     // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnemyKnockbackSound;                               // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PlayerKnockbackSound;                              // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HeroLowHealthBreath;                               // 0x1248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TravelModeExitCamera;                              // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_Death;                                          // 0x1258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_CardShopWhileDead;                              // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraAnim*                            CA_TakeDamage;                                     // 0x1268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraAnim*                            CA_CriticalDamage;                                 // 0x1270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraAnim*                            CA_ShieldDamage;                                   // 0x1278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ActorTagsToIgnore;                                 // 0x1280(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Mastery_FX_HeadRadius;                             // 0x12A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A4[0x4];                                     // 0x12A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             JumpPadLandSound;                                  // 0x12A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  SourceTagsToIgnore;                                // 0x12B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  GCTagsToIgnore;                                    // 0x12D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  DotDamageIgnore;                                   // 0x12F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   HatAttachSocket;                                   // 0x1310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HatScale;                                          // 0x1318(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HatRotation;                                       // 0x1324(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                HatLocation;                                       // 0x1330(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133C[0x4];                                     // 0x133C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Bound_Anim;                                        // 0x1340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_StatusIsDead;                                   // 0x1348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TestHatMesh;                                       // 0x1350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1351[0x7];                                     // 0x1351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            PreviewHat;                                        // 0x1358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        PreviewHatFX;                                      // 0x1360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           KillCelebrationAnim;                               // 0x1368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlying;                                          // 0x1370(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          EnableSnow;                                        // 0x1371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Hero(int32 EntryPoint);
	void OnCrownReady();
	void OnShowMasteryCrown();
	void GameplayCue_Damage(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void DoDamageReaction(const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Damage_Hero(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnTeamChanged(EOrionTeam NewTeamIdx);
	void ReceiveBeginPlay();
	void GameplayCue_Death(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnDeath_Bind(class AOrionChar* DeadChar, class AController* Killer, class AActor* DamageCauser);
	void GameplayCue_RecallTeleport(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Damage_CriticalHit(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void ApplyShadowPlaneMaterials();
	void GameplayCue_ShieldDamage(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void RemoveShadowPlaneMaterials();
	void GameplayCue_KnockBack(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void InpActEvt_Shift_L_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void UserConstructionScript();
	void SetupTeamColors();
	void DirectionalCameraHitFeedback(const struct FGameplayCueParameters& CueParams, class UCameraAnim* Anim);
	void OnRep_MasteryHatEnabled();
	void SetupCrown();
	void OnRep_isFlying();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Hero_C">();
	}
	static class ABP_Hero_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Hero_C>();
	}
};
static_assert(alignof(ABP_Hero_C) == 0x000010, "Wrong alignment on ABP_Hero_C");
static_assert(sizeof(ABP_Hero_C) == 0x001380, "Wrong size on ABP_Hero_C");
static_assert(offsetof(ABP_Hero_C, UberGraphFrame) == 0x0011A0, "Member 'ABP_Hero_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, HatFX) == 0x0011A8, "Member 'ABP_Hero_C::HatFX' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, HatMesh) == 0x0011B0, "Member 'ABP_Hero_C::HatMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, LaunchOnDeath) == 0x0011B8, "Member 'ABP_Hero_C::LaunchOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, LaunchMagnitudeMin) == 0x0011BC, "Member 'ABP_Hero_C::LaunchMagnitudeMin' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, LaunchMagnitudeMax) == 0x0011C0, "Member 'ABP_Hero_C::LaunchMagnitudeMax' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, RawDamageRangeMin) == 0x0011C4, "Member 'ABP_Hero_C::RawDamageRangeMin' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, RawDamageRangeMax) == 0x0011C8, "Member 'ABP_Hero_C::RawDamageRangeMax' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, CoinsPerLevel) == 0x0011CC, "Member 'ABP_Hero_C::CoinsPerLevel' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, EnemyImpactSound) == 0x0011D0, "Member 'ABP_Hero_C::EnemyImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, TravelModeCamera) == 0x0011D8, "Member 'ABP_Hero_C::TravelModeCamera' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, MinCoinsToSpawn) == 0x0011E0, "Member 'ABP_Hero_C::MinCoinsToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, LootSpawnSocket) == 0x0011E8, "Member 'ABP_Hero_C::LootSpawnSocket' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, ReticleData) == 0x0011F0, "Member 'ABP_Hero_C::ReticleData' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, PlayerImpactSound) == 0x001208, "Member 'ABP_Hero_C::PlayerImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, RecallCamera) == 0x001210, "Member 'ABP_Hero_C::RecallCamera' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, FX_DeathLightRays) == 0x001218, "Member 'ABP_Hero_C::FX_DeathLightRays' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, Audio_DeathLightRays) == 0x001220, "Member 'ABP_Hero_C::Audio_DeathLightRays' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, LOD_FX) == 0x001228, "Member 'ABP_Hero_C::LOD_FX' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, LOD_FX_Camera) == 0x001230, "Member 'ABP_Hero_C::LOD_FX_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, EnemyKnockbackSound) == 0x001238, "Member 'ABP_Hero_C::EnemyKnockbackSound' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, PlayerKnockbackSound) == 0x001240, "Member 'ABP_Hero_C::PlayerKnockbackSound' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, HeroLowHealthBreath) == 0x001248, "Member 'ABP_Hero_C::HeroLowHealthBreath' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, TravelModeExitCamera) == 0x001250, "Member 'ABP_Hero_C::TravelModeExitCamera' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, FX_Death) == 0x001258, "Member 'ABP_Hero_C::FX_Death' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, GE_CardShopWhileDead) == 0x001260, "Member 'ABP_Hero_C::GE_CardShopWhileDead' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, CA_TakeDamage) == 0x001268, "Member 'ABP_Hero_C::CA_TakeDamage' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, CA_CriticalDamage) == 0x001270, "Member 'ABP_Hero_C::CA_CriticalDamage' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, CA_ShieldDamage) == 0x001278, "Member 'ABP_Hero_C::CA_ShieldDamage' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, ActorTagsToIgnore) == 0x001280, "Member 'ABP_Hero_C::ActorTagsToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, Mastery_FX_HeadRadius) == 0x0012A0, "Member 'ABP_Hero_C::Mastery_FX_HeadRadius' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, JumpPadLandSound) == 0x0012A8, "Member 'ABP_Hero_C::JumpPadLandSound' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, SourceTagsToIgnore) == 0x0012B0, "Member 'ABP_Hero_C::SourceTagsToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, GCTagsToIgnore) == 0x0012D0, "Member 'ABP_Hero_C::GCTagsToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, DotDamageIgnore) == 0x0012F0, "Member 'ABP_Hero_C::DotDamageIgnore' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, HatAttachSocket) == 0x001310, "Member 'ABP_Hero_C::HatAttachSocket' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, HatScale) == 0x001318, "Member 'ABP_Hero_C::HatScale' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, HatRotation) == 0x001324, "Member 'ABP_Hero_C::HatRotation' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, HatLocation) == 0x001330, "Member 'ABP_Hero_C::HatLocation' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, Bound_Anim) == 0x001340, "Member 'ABP_Hero_C::Bound_Anim' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, GE_StatusIsDead) == 0x001348, "Member 'ABP_Hero_C::GE_StatusIsDead' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, TestHatMesh) == 0x001350, "Member 'ABP_Hero_C::TestHatMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, PreviewHat) == 0x001358, "Member 'ABP_Hero_C::PreviewHat' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, PreviewHatFX) == 0x001360, "Member 'ABP_Hero_C::PreviewHatFX' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, KillCelebrationAnim) == 0x001368, "Member 'ABP_Hero_C::KillCelebrationAnim' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, IsFlying) == 0x001370, "Member 'ABP_Hero_C::IsFlying' has a wrong offset!");
static_assert(offsetof(ABP_Hero_C, EnableSnow) == 0x001371, "Member 'ABP_Hero_C::EnableSnow' has a wrong offset!");

}

