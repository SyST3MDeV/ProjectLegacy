#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FogVolume

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FogVolume.BP_FogVolume_C.ExecuteUbergraph_BP_FogVolume
// 0x0004 (0x0004 - 0x0000)
struct BP_FogVolume_C_ExecuteUbergraph_BP_FogVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FogVolume_C_ExecuteUbergraph_BP_FogVolume) == 0x000004, "Wrong alignment on BP_FogVolume_C_ExecuteUbergraph_BP_FogVolume");
static_assert(sizeof(BP_FogVolume_C_ExecuteUbergraph_BP_FogVolume) == 0x000004, "Wrong size on BP_FogVolume_C_ExecuteUbergraph_BP_FogVolume");
static_assert(offsetof(BP_FogVolume_C_ExecuteUbergraph_BP_FogVolume, EntryPoint) == 0x000000, "Member 'BP_FogVolume_C_ExecuteUbergraph_BP_FogVolume::EntryPoint' has a wrong offset!");

// Function BP_FogVolume.BP_FogVolume_C.SetScalarOnFogMaterial
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) BP_FogVolume_C_SetScalarOnFogMaterial final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FogVolume_C_SetScalarOnFogMaterial) == 0x000008, "Wrong alignment on BP_FogVolume_C_SetScalarOnFogMaterial");
static_assert(sizeof(BP_FogVolume_C_SetScalarOnFogMaterial) == 0x000010, "Wrong size on BP_FogVolume_C_SetScalarOnFogMaterial");
static_assert(offsetof(BP_FogVolume_C_SetScalarOnFogMaterial, Value) == 0x000000, "Member 'BP_FogVolume_C_SetScalarOnFogMaterial::Value' has a wrong offset!");
static_assert(offsetof(BP_FogVolume_C_SetScalarOnFogMaterial, Name_0) == 0x000008, "Member 'BP_FogVolume_C_SetScalarOnFogMaterial::Name_0' has a wrong offset!");

// Function BP_FogVolume.BP_FogVolume_C.SetVectorOnFogMaterial
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) BP_FogVolume_C_SetVectorOnFogMaterial final
{
public:
	struct FLinearColor                           Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Name_0;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FogVolume_C_SetVectorOnFogMaterial) == 0x000008, "Wrong alignment on BP_FogVolume_C_SetVectorOnFogMaterial");
static_assert(sizeof(BP_FogVolume_C_SetVectorOnFogMaterial) == 0x000018, "Wrong size on BP_FogVolume_C_SetVectorOnFogMaterial");
static_assert(offsetof(BP_FogVolume_C_SetVectorOnFogMaterial, Value) == 0x000000, "Member 'BP_FogVolume_C_SetVectorOnFogMaterial::Value' has a wrong offset!");
static_assert(offsetof(BP_FogVolume_C_SetVectorOnFogMaterial, Name_0) == 0x000010, "Member 'BP_FogVolume_C_SetVectorOnFogMaterial::Name_0' has a wrong offset!");

// Function BP_FogVolume.BP_FogVolume_C.updateParticle
// 0x0028 (0x0028 - 0x0000)
struct BP_FogVolume_C_UpdateParticle final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable2;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FogVolume_C_UpdateParticle) == 0x000008, "Wrong alignment on BP_FogVolume_C_UpdateParticle");
static_assert(sizeof(BP_FogVolume_C_UpdateParticle) == 0x000028, "Wrong size on BP_FogVolume_C_UpdateParticle");
static_assert(offsetof(BP_FogVolume_C_UpdateParticle, Temp_bool_Variable) == 0x000000, "Member 'BP_FogVolume_C_UpdateParticle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FogVolume_C_UpdateParticle, Temp_object_Variable) == 0x000008, "Member 'BP_FogVolume_C_UpdateParticle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_FogVolume_C_UpdateParticle, Temp_object_Variable2) == 0x000010, "Member 'BP_FogVolume_C_UpdateParticle::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(BP_FogVolume_C_UpdateParticle, K2Node_Select_Default) == 0x000018, "Member 'BP_FogVolume_C_UpdateParticle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FogVolume_C_UpdateParticle, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000020, "Member 'BP_FogVolume_C_UpdateParticle::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}

