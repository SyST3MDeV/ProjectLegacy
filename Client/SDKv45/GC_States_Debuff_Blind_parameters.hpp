#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_States_Debuff_Blind

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GC_States_Debuff_Blind.GC_States_Debuff_Blind_C.ExecuteUbergraph_GC_States_Debuff_Blind
// 0x01E8 (0x01E8 - 0x0000)
struct GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_MyTarget2;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 K2Node_Event_Parameters2;                          // 0x0010(0x00B8)(ContainsInstancedReference)
	class UParticleSystemComponent*               K2Node_Event_RemovalParticleSystem;                // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       K2Node_Event_AdditionalParticleSystems;            // 0x00D0(0x0010)(ZeroConstructor, ReferenceParm)
	class UNiagaraComponent*                      K2Node_Event_RemovalNiagaraParticleSystem;         // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              K2Node_Event_AdditionalNiagaraParticleSystems2;    // 0x00E8(0x0010)(ZeroConstructor, ReferenceParm)
	class AActor*                                 K2Node_Event_MyTarget;                             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 K2Node_Event_Parameters;                           // 0x0100(0x00B8)(ContainsInstancedReference)
	class UParticleSystemComponent*               K2Node_Event_LoopingParticleSystem;                // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       K2Node_Event_AdditionalParticleSystem;             // 0x01C0(0x0010)(ZeroConstructor, ReferenceParm)
	class UNiagaraComponent*                      K2Node_Event_LoopingNiagaraParticleSystem;         // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              K2Node_Event_AdditionalNiagaraParticleSystems;     // 0x01D8(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind) == 0x000008, "Wrong alignment on GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind");
static_assert(sizeof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind) == 0x0001E8, "Wrong size on GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, EntryPoint) == 0x000000, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::EntryPoint' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_MyTarget2) == 0x000008, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_MyTarget2' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_Parameters2) == 0x000010, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_Parameters2' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_RemovalParticleSystem) == 0x0000C8, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_RemovalParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_AdditionalParticleSystems) == 0x0000D0, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_AdditionalParticleSystems' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_RemovalNiagaraParticleSystem) == 0x0000E0, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_RemovalNiagaraParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_AdditionalNiagaraParticleSystems2) == 0x0000E8, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_AdditionalNiagaraParticleSystems2' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_MyTarget) == 0x0000F8, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_MyTarget' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_Parameters) == 0x000100, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_Parameters' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_LoopingParticleSystem) == 0x0001B8, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_LoopingParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_AdditionalParticleSystem) == 0x0001C0, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_AdditionalParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_LoopingNiagaraParticleSystem) == 0x0001D0, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_LoopingNiagaraParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind, K2Node_Event_AdditionalNiagaraParticleSystems) == 0x0001D8, "Member 'GC_States_Debuff_Blind_C_ExecuteUbergraph_GC_States_Debuff_Blind::K2Node_Event_AdditionalNiagaraParticleSystems' has a wrong offset!");

// Function GC_States_Debuff_Blind.GC_States_Debuff_Blind_C.K2_WhileActive
// 0x00F0 (0x00F0 - 0x0000)
struct GC_States_Debuff_Blind_C_K2_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UParticleSystemComponent*               LoopingParticleSystem;                             // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       AdditionalParticleSystem;                          // 0x00C8(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UNiagaraComponent*                      LoopingNiagaraParticleSystem;                      // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              AdditionalNiagaraParticleSystems;                  // 0x00E0(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(GC_States_Debuff_Blind_C_K2_WhileActive) == 0x000008, "Wrong alignment on GC_States_Debuff_Blind_C_K2_WhileActive");
static_assert(sizeof(GC_States_Debuff_Blind_C_K2_WhileActive) == 0x0000F0, "Wrong size on GC_States_Debuff_Blind_C_K2_WhileActive");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_WhileActive, MyTarget) == 0x000000, "Member 'GC_States_Debuff_Blind_C_K2_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_WhileActive, Parameters) == 0x000008, "Member 'GC_States_Debuff_Blind_C_K2_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_WhileActive, LoopingParticleSystem) == 0x0000C0, "Member 'GC_States_Debuff_Blind_C_K2_WhileActive::LoopingParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_WhileActive, AdditionalParticleSystem) == 0x0000C8, "Member 'GC_States_Debuff_Blind_C_K2_WhileActive::AdditionalParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_WhileActive, LoopingNiagaraParticleSystem) == 0x0000D8, "Member 'GC_States_Debuff_Blind_C_K2_WhileActive::LoopingNiagaraParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_WhileActive, AdditionalNiagaraParticleSystems) == 0x0000E0, "Member 'GC_States_Debuff_Blind_C_K2_WhileActive::AdditionalNiagaraParticleSystems' has a wrong offset!");

// Function GC_States_Debuff_Blind.GC_States_Debuff_Blind_C.K2_OnRemove
// 0x00F0 (0x00F0 - 0x0000)
struct GC_States_Debuff_Blind_C_K2_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UParticleSystemComponent*               RemovalParticleSystem;                             // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       AdditionalParticleSystems;                         // 0x00C8(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UNiagaraComponent*                      RemovalNiagaraParticleSystem;                      // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              AdditionalNiagaraParticleSystems;                  // 0x00E0(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(GC_States_Debuff_Blind_C_K2_OnRemove) == 0x000008, "Wrong alignment on GC_States_Debuff_Blind_C_K2_OnRemove");
static_assert(sizeof(GC_States_Debuff_Blind_C_K2_OnRemove) == 0x0000F0, "Wrong size on GC_States_Debuff_Blind_C_K2_OnRemove");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_OnRemove, MyTarget) == 0x000000, "Member 'GC_States_Debuff_Blind_C_K2_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_OnRemove, Parameters) == 0x000008, "Member 'GC_States_Debuff_Blind_C_K2_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_OnRemove, RemovalParticleSystem) == 0x0000C0, "Member 'GC_States_Debuff_Blind_C_K2_OnRemove::RemovalParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_OnRemove, AdditionalParticleSystems) == 0x0000C8, "Member 'GC_States_Debuff_Blind_C_K2_OnRemove::AdditionalParticleSystems' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_OnRemove, RemovalNiagaraParticleSystem) == 0x0000D8, "Member 'GC_States_Debuff_Blind_C_K2_OnRemove::RemovalNiagaraParticleSystem' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_K2_OnRemove, AdditionalNiagaraParticleSystems) == 0x0000E0, "Member 'GC_States_Debuff_Blind_C_K2_OnRemove::AdditionalNiagaraParticleSystems' has a wrong offset!");

// Function GC_States_Debuff_Blind.GC_States_Debuff_Blind_C.WhileActive
// 0x00D8 (0x00D8 - 0x0000)
struct GC_States_Debuff_Blind_C_WhileActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExponentialHeightFog*                  CallFunc_GetGlobalExponentialHeightFog_ReturnValue; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WhileActive_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlledPlayer_ReturnValue;    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GC_States_Debuff_Blind_C_WhileActive) == 0x000008, "Wrong alignment on GC_States_Debuff_Blind_C_WhileActive");
static_assert(sizeof(GC_States_Debuff_Blind_C_WhileActive) == 0x0000D8, "Wrong size on GC_States_Debuff_Blind_C_WhileActive");
static_assert(offsetof(GC_States_Debuff_Blind_C_WhileActive, MyTarget) == 0x000000, "Member 'GC_States_Debuff_Blind_C_WhileActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_WhileActive, Parameters) == 0x000008, "Member 'GC_States_Debuff_Blind_C_WhileActive::Parameters' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_WhileActive, ReturnValue) == 0x0000C0, "Member 'GC_States_Debuff_Blind_C_WhileActive::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_WhileActive, CallFunc_GetGlobalExponentialHeightFog_ReturnValue) == 0x0000C8, "Member 'GC_States_Debuff_Blind_C_WhileActive::CallFunc_GetGlobalExponentialHeightFog_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_WhileActive, CallFunc_WhileActive_ReturnValue) == 0x0000D0, "Member 'GC_States_Debuff_Blind_C_WhileActive::CallFunc_WhileActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_WhileActive, CallFunc_IsValid_ReturnValue) == 0x0000D1, "Member 'GC_States_Debuff_Blind_C_WhileActive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_States_Debuff_Blind_C_WhileActive, CallFunc_IsLocallyControlledPlayer_ReturnValue) == 0x0000D2, "Member 'GC_States_Debuff_Blind_C_WhileActive::CallFunc_IsLocallyControlledPlayer_ReturnValue' has a wrong offset!");

// Function GC_States_Debuff_Blind.GC_States_Debuff_Blind_C.ClearCameraEffect
// 0x0001 (0x0001 - 0x0000)
struct GC_States_Debuff_Blind_C_ClearCameraEffect final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GC_States_Debuff_Blind_C_ClearCameraEffect) == 0x000001, "Wrong alignment on GC_States_Debuff_Blind_C_ClearCameraEffect");
static_assert(sizeof(GC_States_Debuff_Blind_C_ClearCameraEffect) == 0x000001, "Wrong size on GC_States_Debuff_Blind_C_ClearCameraEffect");
static_assert(offsetof(GC_States_Debuff_Blind_C_ClearCameraEffect, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GC_States_Debuff_Blind_C_ClearCameraEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

