#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Party

#include "Basic.hpp"


namespace SDK
{

// Enum Party.EPartyType
// NumValues: 0x0004
enum class EPartyType : uint8
{
	Public                                   = 0,
	FriendsOnly                              = 1,
	Private                                  = 2,
	EPartyType_MAX                           = 3,
};

// Enum Party.EJoinPartyDenialReason
// NumValues: 0x0008
enum class EJoinPartyDenialReason : uint8
{
	NoReason                                 = 0,
	Busy                                     = 1,
	PartyFull                                = 2,
	GameFull                                 = 3,
	NotPartyLeader                           = 4,
	PartyPrivate                             = 5,
	NeedsTutorial                            = 6,
	EJoinPartyDenialReason_MAX               = 7,
};

// ScriptStruct Party.PartyState
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPartyState
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPartyType                                    PartyType;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderFriendsOnly;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderInvitesOnly;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvitesDisabled;                                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyState) == 0x000008, "Wrong alignment on FPartyState");
static_assert(sizeof(FPartyState) == 0x000010, "Wrong size on FPartyState");
static_assert(offsetof(FPartyState, PartyType) == 0x000008, "Member 'FPartyState::PartyType' has a wrong offset!");
static_assert(offsetof(FPartyState, bLeaderFriendsOnly) == 0x000009, "Member 'FPartyState::bLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(FPartyState, bLeaderInvitesOnly) == 0x00000A, "Member 'FPartyState::bLeaderInvitesOnly' has a wrong offset!");
static_assert(offsetof(FPartyState, bInvitesDisabled) == 0x00000B, "Member 'FPartyState::bInvitesDisabled' has a wrong offset!");

// ScriptStruct Party.PartyMemberRepState
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPartyMemberRepState
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyMemberRepState) == 0x000008, "Wrong alignment on FPartyMemberRepState");
static_assert(sizeof(FPartyMemberRepState) == 0x000008, "Wrong size on FPartyMemberRepState");

}

