#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Dustmotes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Dustmotes.BP_Dustmotes_C
// 0x0050 (0x0368 - 0x0318)
class ABP_Dustmotes_C final : public AActor
{
public:
	class UBillboardComponent*                    Billboard;                                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_DustMotes01;                                    // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DustMoteMaterial;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindOffset;                                        // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size01;                                            // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size02;                                            // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlinkSpeed;                                        // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Brightness;                                        // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CullDistance;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x034C(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity;                                           // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Winterfest_;                                       // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void UserConstructionScript();
	void MaterialSetup();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Dustmotes_C">();
	}
	static class ABP_Dustmotes_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Dustmotes_C>();
	}
};
static_assert(alignof(ABP_Dustmotes_C) == 0x000008, "Wrong alignment on ABP_Dustmotes_C");
static_assert(sizeof(ABP_Dustmotes_C) == 0x000368, "Wrong size on ABP_Dustmotes_C");
static_assert(offsetof(ABP_Dustmotes_C, Billboard) == 0x000318, "Member 'ABP_Dustmotes_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, SM_DustMotes01) == 0x000320, "Member 'ABP_Dustmotes_C::SM_DustMotes01' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, DustMoteMaterial) == 0x000328, "Member 'ABP_Dustmotes_C::DustMoteMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, Speed) == 0x000330, "Member 'ABP_Dustmotes_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, WindOffset) == 0x000334, "Member 'ABP_Dustmotes_C::WindOffset' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, Size01) == 0x000338, "Member 'ABP_Dustmotes_C::Size01' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, Size02) == 0x00033C, "Member 'ABP_Dustmotes_C::Size02' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, BlinkSpeed) == 0x000340, "Member 'ABP_Dustmotes_C::BlinkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, Brightness) == 0x000344, "Member 'ABP_Dustmotes_C::Brightness' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, CullDistance) == 0x000348, "Member 'ABP_Dustmotes_C::CullDistance' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, Color) == 0x00034C, "Member 'ABP_Dustmotes_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, Opacity) == 0x00035C, "Member 'ABP_Dustmotes_C::Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Dustmotes_C, Winterfest_) == 0x000360, "Member 'ABP_Dustmotes_C::Winterfest_' has a wrong offset!");

}

