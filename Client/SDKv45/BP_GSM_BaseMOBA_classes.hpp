#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GSM_BaseMOBA

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OrionGame_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GSM_BaseMOBA.BP_GSM_BaseMOBA_C
// 0x0150 (0x09E0 - 0x0890)
class ABP_GSM_BaseMOBA_C final : public AOrionGameState_MOBA
{
public:
	uint8                                         Pad_888[0x8];                                      // 0x0888(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0890(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 RedObjective;                                      // 0x08A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 BlueObjective;                                     // 0x08A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AOrionDamageableObjective_Base*> Damagable_Objective;                               // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         TowerLevelUpInterval;                              // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C4[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   TestPlayMatinee;                                   // 0x08C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         WellLevelUpInterval;                               // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AOrionWell_Base*>                Wells;                                             // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	UMulticastDelegateProperty_                   HeroHasRecalled_Dispatch;                          // 0x08F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   TriggerVictoryEvent;                               // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HasEndMatchCeni;                                   // 0x0910(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TryToUseEndMatchCeni;                              // 0x0911(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_912[0x6];                                      // 0x0912(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_StandardAwardTowerXP;                           // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_StandardAwardWellXP;                            // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_MinionsSpawningVO;                              // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   DecoyWasCreated_Dispatch;                          // 0x0930(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   HeroHasSpawned_Dispatch;                           // 0x0940(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   HeroHasDied_Dispatch;                              // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USoundBase*                             MatchStartMusic_Cue;                               // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MatchAmbientMusic;                                 // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MatchAmbientMusic_Cue;                             // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   MinionsSpawning_Dispatch;                          // 0x0978(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   PrimeHelixKilled_Dispatch;                         // 0x0988(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAudioComponent*                        VictoryMusic;                                      // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        DefeatMusic;                                       // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MatchStartMusicComp;                               // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   StopVictoryDefeatMusicDispatch;                    // 0x09B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USoundBase*                             VictoryMusicCue;                                   // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DefeatMusicCue;                                    // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundMix*                              LoadingScreenMix;                                  // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TestPlayMatinee__DelegateSignature();
	void HeroHasRecalled_Dispatch__DelegateSignature(EOrionTeam HeroTeam);
	void TriggerVictoryEvent__DelegateSignature(EOrionTeam WinningTeam);
	void DecoyWasCreated_Dispatch__DelegateSignature(class AActor* TargetableActor);
	void HeroHasSpawned_Dispatch__DelegateSignature(class AActor* SpawnedHero);
	void HeroHasDied_Dispatch__DelegateSignature(class AActor* DeadHero, class AActor* Killer);
	void MinionsSpawning_Dispatch__DelegateSignature();
	void PrimeHelixKilled_Dispatch__DelegateSignature(EOrionTeam TeamNum);
	void StopVictoryDefeatMusicDispatch__DelegateSignature();
	void ExecuteUbergraph_BP_GSM_BaseMOBA(int32 EntryPoint);
	void StopVictoryDefeatMusic();
	void PlayVictoryDefeatMusic();
	void MatchStartMusic();
	void OnGameStateMatchStarted_Bind();
	void ReceiveBeginPlay();
	void MinionsSpawning();
	void PlayEndMatchSequence(EOrionTeam WinningTeamNum_0);
	void HeroHasRecalled(EOrionTeam HeroTeam);
	void GSM_LevelUpTowers();
	void UserConstructionScript();
	void Register_Team_Objective(class AOrionDamageableObjective_Base* InObjective);
	void GetWinningTeamNum(EOrionTeam* WinningTeam);
	void IsMatchOver(bool* GameOver);
	void RegisterTeamTowers(class AOrionDamageableObjective_Base* NewParam);
	void ForceDestroyCore(EOrionTeam TeamNum);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GSM_BaseMOBA_C">();
	}
	static class ABP_GSM_BaseMOBA_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GSM_BaseMOBA_C>();
	}
};
static_assert(alignof(ABP_GSM_BaseMOBA_C) == 0x000010, "Wrong alignment on ABP_GSM_BaseMOBA_C");
static_assert(sizeof(ABP_GSM_BaseMOBA_C) == 0x0009E0, "Wrong size on ABP_GSM_BaseMOBA_C");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, UberGraphFrame) == 0x000890, "Member 'ABP_GSM_BaseMOBA_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, DefaultSceneRoot) == 0x000898, "Member 'ABP_GSM_BaseMOBA_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, RedObjective) == 0x0008A0, "Member 'ABP_GSM_BaseMOBA_C::RedObjective' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, BlueObjective) == 0x0008A8, "Member 'ABP_GSM_BaseMOBA_C::BlueObjective' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, Damagable_Objective) == 0x0008B0, "Member 'ABP_GSM_BaseMOBA_C::Damagable_Objective' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, TowerLevelUpInterval) == 0x0008C0, "Member 'ABP_GSM_BaseMOBA_C::TowerLevelUpInterval' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, TestPlayMatinee) == 0x0008C8, "Member 'ABP_GSM_BaseMOBA_C::TestPlayMatinee' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, WellLevelUpInterval) == 0x0008D8, "Member 'ABP_GSM_BaseMOBA_C::WellLevelUpInterval' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, Wells) == 0x0008E0, "Member 'ABP_GSM_BaseMOBA_C::Wells' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, HeroHasRecalled_Dispatch) == 0x0008F0, "Member 'ABP_GSM_BaseMOBA_C::HeroHasRecalled_Dispatch' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, TriggerVictoryEvent) == 0x000900, "Member 'ABP_GSM_BaseMOBA_C::TriggerVictoryEvent' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, HasEndMatchCeni) == 0x000910, "Member 'ABP_GSM_BaseMOBA_C::HasEndMatchCeni' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, TryToUseEndMatchCeni) == 0x000911, "Member 'ABP_GSM_BaseMOBA_C::TryToUseEndMatchCeni' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, GE_StandardAwardTowerXP) == 0x000918, "Member 'ABP_GSM_BaseMOBA_C::GE_StandardAwardTowerXP' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, GE_StandardAwardWellXP) == 0x000920, "Member 'ABP_GSM_BaseMOBA_C::GE_StandardAwardWellXP' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, GE_MinionsSpawningVO) == 0x000928, "Member 'ABP_GSM_BaseMOBA_C::GE_MinionsSpawningVO' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, DecoyWasCreated_Dispatch) == 0x000930, "Member 'ABP_GSM_BaseMOBA_C::DecoyWasCreated_Dispatch' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, HeroHasSpawned_Dispatch) == 0x000940, "Member 'ABP_GSM_BaseMOBA_C::HeroHasSpawned_Dispatch' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, HeroHasDied_Dispatch) == 0x000950, "Member 'ABP_GSM_BaseMOBA_C::HeroHasDied_Dispatch' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, MatchStartMusic_Cue) == 0x000960, "Member 'ABP_GSM_BaseMOBA_C::MatchStartMusic_Cue' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, MatchAmbientMusic) == 0x000968, "Member 'ABP_GSM_BaseMOBA_C::MatchAmbientMusic' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, MatchAmbientMusic_Cue) == 0x000970, "Member 'ABP_GSM_BaseMOBA_C::MatchAmbientMusic_Cue' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, MinionsSpawning_Dispatch) == 0x000978, "Member 'ABP_GSM_BaseMOBA_C::MinionsSpawning_Dispatch' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, PrimeHelixKilled_Dispatch) == 0x000988, "Member 'ABP_GSM_BaseMOBA_C::PrimeHelixKilled_Dispatch' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, VictoryMusic) == 0x000998, "Member 'ABP_GSM_BaseMOBA_C::VictoryMusic' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, DefeatMusic) == 0x0009A0, "Member 'ABP_GSM_BaseMOBA_C::DefeatMusic' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, MatchStartMusicComp) == 0x0009A8, "Member 'ABP_GSM_BaseMOBA_C::MatchStartMusicComp' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, StopVictoryDefeatMusicDispatch) == 0x0009B0, "Member 'ABP_GSM_BaseMOBA_C::StopVictoryDefeatMusicDispatch' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, VictoryMusicCue) == 0x0009C0, "Member 'ABP_GSM_BaseMOBA_C::VictoryMusicCue' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, DefeatMusicCue) == 0x0009C8, "Member 'ABP_GSM_BaseMOBA_C::DefeatMusicCue' has a wrong offset!");
static_assert(offsetof(ABP_GSM_BaseMOBA_C, LoadingScreenMix) == 0x0009D0, "Member 'ABP_GSM_BaseMOBA_C::LoadingScreenMix' has a wrong offset!");

}

