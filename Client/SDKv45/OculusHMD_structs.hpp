#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusHMD

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum OculusHMD.ETrackedDeviceType
// NumValues: 0x0008
enum class ETrackedDeviceType : uint8
{
	None                                     = 0,
	HMD                                      = 1,
	LTouch                                   = 2,
	RTouch                                   = 3,
	Touch                                    = 4,
	DeviceObjectZero                         = 5,
	All                                      = 6,
	ETrackedDeviceType_MAX                   = 7,
};

// Enum OculusHMD.EBoundaryType
// NumValues: 0x0003
enum class EBoundaryType : uint8
{
	Boundary_Outer                           = 0,
	Boundary_PlayArea                        = 1,
	Boundary_MAX                             = 2,
};

// Enum OculusHMD.EGearVRControllerHandedness_DEPRECATED
// NumValues: 0x0004
enum class EGearVRControllerHandedness_DEPRECATED : uint8
{
	RightHanded_DEPRECATED                   = 0,
	LeftHanded_DEPRECATED                    = 1,
	Unknown_DEPRECATED                       = 2,
	EGearVRControllerHandedness_MAX          = 3,
};

// ScriptStruct OculusHMD.BoundaryTestResult
// 0x0020 (0x0020 - 0x0000)
struct FBoundaryTestResult final
{
public:
	bool                                          IsTriggering;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackedDeviceType                            DeviceType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClosestDistance;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPoint;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPointNormal;                                // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoundaryTestResult) == 0x000004, "Wrong alignment on FBoundaryTestResult");
static_assert(sizeof(FBoundaryTestResult) == 0x000020, "Wrong size on FBoundaryTestResult");
static_assert(offsetof(FBoundaryTestResult, IsTriggering) == 0x000000, "Member 'FBoundaryTestResult::IsTriggering' has a wrong offset!");
static_assert(offsetof(FBoundaryTestResult, DeviceType) == 0x000001, "Member 'FBoundaryTestResult::DeviceType' has a wrong offset!");
static_assert(offsetof(FBoundaryTestResult, ClosestDistance) == 0x000004, "Member 'FBoundaryTestResult::ClosestDistance' has a wrong offset!");
static_assert(offsetof(FBoundaryTestResult, ClosestPoint) == 0x000008, "Member 'FBoundaryTestResult::ClosestPoint' has a wrong offset!");
static_assert(offsetof(FBoundaryTestResult, ClosestPointNormal) == 0x000014, "Member 'FBoundaryTestResult::ClosestPointNormal' has a wrong offset!");

// ScriptStruct OculusHMD.HmdUserProfileField
// 0x0020 (0x0020 - 0x0000)
struct FHmdUserProfileField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FieldValue;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHmdUserProfileField) == 0x000008, "Wrong alignment on FHmdUserProfileField");
static_assert(sizeof(FHmdUserProfileField) == 0x000020, "Wrong size on FHmdUserProfileField");
static_assert(offsetof(FHmdUserProfileField, FieldName) == 0x000000, "Member 'FHmdUserProfileField::FieldName' has a wrong offset!");
static_assert(offsetof(FHmdUserProfileField, FieldValue) == 0x000010, "Member 'FHmdUserProfileField::FieldValue' has a wrong offset!");

// ScriptStruct OculusHMD.HmdUserProfile
// 0x0048 (0x0048 - 0x0000)
struct FHmdUserProfile final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gender;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerHeight;                                      // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeHeight;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IPD;                                               // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NeckToEyeDistance;                                 // 0x002C(0x0008)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHmdUserProfileField>           ExtraFields;                                       // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHmdUserProfile) == 0x000008, "Wrong alignment on FHmdUserProfile");
static_assert(sizeof(FHmdUserProfile) == 0x000048, "Wrong size on FHmdUserProfile");
static_assert(offsetof(FHmdUserProfile, Name) == 0x000000, "Member 'FHmdUserProfile::Name' has a wrong offset!");
static_assert(offsetof(FHmdUserProfile, Gender) == 0x000010, "Member 'FHmdUserProfile::Gender' has a wrong offset!");
static_assert(offsetof(FHmdUserProfile, PlayerHeight) == 0x000020, "Member 'FHmdUserProfile::PlayerHeight' has a wrong offset!");
static_assert(offsetof(FHmdUserProfile, EyeHeight) == 0x000024, "Member 'FHmdUserProfile::EyeHeight' has a wrong offset!");
static_assert(offsetof(FHmdUserProfile, IPD) == 0x000028, "Member 'FHmdUserProfile::IPD' has a wrong offset!");
static_assert(offsetof(FHmdUserProfile, NeckToEyeDistance) == 0x00002C, "Member 'FHmdUserProfile::NeckToEyeDistance' has a wrong offset!");
static_assert(offsetof(FHmdUserProfile, ExtraFields) == 0x000038, "Member 'FHmdUserProfile::ExtraFields' has a wrong offset!");

// ScriptStruct OculusHMD.OculusSplashDesc
// 0x00A0 (0x00A0 - 0x0000)
struct FOculusSplashDesc final
{
public:
	struct FSoftObjectPath                        TexturePath;                                       // 0x0000(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformInMeters;                                 // 0x0020(0x0030)(Edit, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              QuadSizeInMeters;                                  // 0x0050(0x0008)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  DeltaRotation;                                     // 0x0060(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              TextureOffset;                                     // 0x0070(0x0008)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextureScale;                                      // 0x0078(0x0008)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoAlphaChannel;                                   // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x1F];                                      // 0x0081(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOculusSplashDesc) == 0x000010, "Wrong alignment on FOculusSplashDesc");
static_assert(sizeof(FOculusSplashDesc) == 0x0000A0, "Wrong size on FOculusSplashDesc");
static_assert(offsetof(FOculusSplashDesc, TexturePath) == 0x000000, "Member 'FOculusSplashDesc::TexturePath' has a wrong offset!");
static_assert(offsetof(FOculusSplashDesc, TransformInMeters) == 0x000020, "Member 'FOculusSplashDesc::TransformInMeters' has a wrong offset!");
static_assert(offsetof(FOculusSplashDesc, QuadSizeInMeters) == 0x000050, "Member 'FOculusSplashDesc::QuadSizeInMeters' has a wrong offset!");
static_assert(offsetof(FOculusSplashDesc, DeltaRotation) == 0x000060, "Member 'FOculusSplashDesc::DeltaRotation' has a wrong offset!");
static_assert(offsetof(FOculusSplashDesc, TextureOffset) == 0x000070, "Member 'FOculusSplashDesc::TextureOffset' has a wrong offset!");
static_assert(offsetof(FOculusSplashDesc, TextureScale) == 0x000078, "Member 'FOculusSplashDesc::TextureScale' has a wrong offset!");
static_assert(offsetof(FOculusSplashDesc, bNoAlphaChannel) == 0x000080, "Member 'FOculusSplashDesc::bNoAlphaChannel' has a wrong offset!");

}

