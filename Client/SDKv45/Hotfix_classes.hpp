#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hotfix

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Hotfix_structs.hpp"


namespace SDK
{

// Class Hotfix.OnlineHotfixManager
// 0x03A8 (0x03D0 - 0x0028)
class UOnlineHotfixManager : public UObject
{
public:
	uint8                                         Pad_28[0x368];                                     // 0x0028(0x0368)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OSSName;                                           // 0x0390(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HotfixManagerClassName;                            // 0x03A0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugPrefix;                                       // 0x03B0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        AssetsHotfixedFromIniFiles;                        // 0x03C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	void StartHotfixProcess();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineHotfixManager">();
	}
	static class UOnlineHotfixManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineHotfixManager>();
	}
};
static_assert(alignof(UOnlineHotfixManager) == 0x000008, "Wrong alignment on UOnlineHotfixManager");
static_assert(sizeof(UOnlineHotfixManager) == 0x0003D0, "Wrong size on UOnlineHotfixManager");
static_assert(offsetof(UOnlineHotfixManager, OSSName) == 0x000390, "Member 'UOnlineHotfixManager::OSSName' has a wrong offset!");
static_assert(offsetof(UOnlineHotfixManager, HotfixManagerClassName) == 0x0003A0, "Member 'UOnlineHotfixManager::HotfixManagerClassName' has a wrong offset!");
static_assert(offsetof(UOnlineHotfixManager, DebugPrefix) == 0x0003B0, "Member 'UOnlineHotfixManager::DebugPrefix' has a wrong offset!");
static_assert(offsetof(UOnlineHotfixManager, AssetsHotfixedFromIniFiles) == 0x0003C0, "Member 'UOnlineHotfixManager::AssetsHotfixedFromIniFiles' has a wrong offset!");

// Class Hotfix.UpdateManager
// 0x0248 (0x0270 - 0x0028)
class UUpdateManager : public UObject
{
public:
	uint8                                         Pad_28[0x1C8];                                     // 0x0028(0x01C8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HotfixCheckCompleteDelay;                          // 0x01F0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateCheckCompleteDelay;                          // 0x01F4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HotfixAvailabilityCheckCompleteDelay;              // 0x01F8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateCheckAvailabilityCompleteDelay;              // 0x01FC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlatformEnvironmentDetected;                      // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInitialUpdateFinished;                            // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckHotfixAvailabilityOnly;                      // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUpdateState                                  CurrentUpdateState;                                // 0x0203(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WorstNumFilesPendingLoadViewed;                    // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPatchCheckResult                             LastPatchCheckResult;                              // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHotfixResult                                 LastHotfixResult;                                  // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_20A[0x2E];                                     // 0x020A(0x002E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastUpdateCheck[0x2];                              // 0x0238(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUpdateCompletionStatus                       LastCompletionResult[0x2];                         // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24A[0x16];                                     // 0x024A(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnum*                                  UpdateStateEnum;                                   // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEnum*                                  UpdateCompletionEnum;                              // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UpdateManager">();
	}
	static class UUpdateManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUpdateManager>();
	}
};
static_assert(alignof(UUpdateManager) == 0x000008, "Wrong alignment on UUpdateManager");
static_assert(sizeof(UUpdateManager) == 0x000270, "Wrong size on UUpdateManager");
static_assert(offsetof(UUpdateManager, HotfixCheckCompleteDelay) == 0x0001F0, "Member 'UUpdateManager::HotfixCheckCompleteDelay' has a wrong offset!");
static_assert(offsetof(UUpdateManager, UpdateCheckCompleteDelay) == 0x0001F4, "Member 'UUpdateManager::UpdateCheckCompleteDelay' has a wrong offset!");
static_assert(offsetof(UUpdateManager, HotfixAvailabilityCheckCompleteDelay) == 0x0001F8, "Member 'UUpdateManager::HotfixAvailabilityCheckCompleteDelay' has a wrong offset!");
static_assert(offsetof(UUpdateManager, UpdateCheckAvailabilityCompleteDelay) == 0x0001FC, "Member 'UUpdateManager::UpdateCheckAvailabilityCompleteDelay' has a wrong offset!");
static_assert(offsetof(UUpdateManager, bPlatformEnvironmentDetected) == 0x000200, "Member 'UUpdateManager::bPlatformEnvironmentDetected' has a wrong offset!");
static_assert(offsetof(UUpdateManager, bInitialUpdateFinished) == 0x000201, "Member 'UUpdateManager::bInitialUpdateFinished' has a wrong offset!");
static_assert(offsetof(UUpdateManager, bCheckHotfixAvailabilityOnly) == 0x000202, "Member 'UUpdateManager::bCheckHotfixAvailabilityOnly' has a wrong offset!");
static_assert(offsetof(UUpdateManager, CurrentUpdateState) == 0x000203, "Member 'UUpdateManager::CurrentUpdateState' has a wrong offset!");
static_assert(offsetof(UUpdateManager, WorstNumFilesPendingLoadViewed) == 0x000204, "Member 'UUpdateManager::WorstNumFilesPendingLoadViewed' has a wrong offset!");
static_assert(offsetof(UUpdateManager, LastPatchCheckResult) == 0x000208, "Member 'UUpdateManager::LastPatchCheckResult' has a wrong offset!");
static_assert(offsetof(UUpdateManager, LastHotfixResult) == 0x000209, "Member 'UUpdateManager::LastHotfixResult' has a wrong offset!");
static_assert(offsetof(UUpdateManager, LastUpdateCheck) == 0x000238, "Member 'UUpdateManager::LastUpdateCheck' has a wrong offset!");
static_assert(offsetof(UUpdateManager, LastCompletionResult) == 0x000248, "Member 'UUpdateManager::LastCompletionResult' has a wrong offset!");
static_assert(offsetof(UUpdateManager, UpdateStateEnum) == 0x000260, "Member 'UUpdateManager::UpdateStateEnum' has a wrong offset!");
static_assert(offsetof(UUpdateManager, UpdateCompletionEnum) == 0x000268, "Member 'UUpdateManager::UpdateCompletionEnum' has a wrong offset!");

}

