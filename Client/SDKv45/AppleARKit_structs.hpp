#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AppleARKit

#include "Basic.hpp"

#include "AugmentedReality_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AppleARKit.EAppleARKitHitTestResultType
// NumValues: 0x0006
enum class EAppleARKitHitTestResultType : uint8
{
	None                                     = 0,
	FeaturePoint                             = 1,
	EstimatedHorizontalPlane                 = 2,
	ExistingPlane                            = 4,
	ExistingPlaneUsingExtent                 = 8,
	EAppleARKitHitTestResultType_MAX         = 9,
};

// Enum AppleARKit.EARKitTextureType
// NumValues: 0x0003
enum class EARKitTextureType : uint8
{
	TextureY                                 = 0,
	TextureCbCr                              = 1,
	EARKitTextureType_MAX                    = 2,
};

// ScriptStruct AppleARKit.AppleARKitLightEstimate
// 0x0008 (0x0008 - 0x0000)
struct FAppleARKitLightEstimate final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmbientIntensity;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppleARKitLightEstimate) == 0x000004, "Wrong alignment on FAppleARKitLightEstimate");
static_assert(sizeof(FAppleARKitLightEstimate) == 0x000008, "Wrong size on FAppleARKitLightEstimate");
static_assert(offsetof(FAppleARKitLightEstimate, bIsValid) == 0x000000, "Member 'FAppleARKitLightEstimate::bIsValid' has a wrong offset!");
static_assert(offsetof(FAppleARKitLightEstimate, AmbientIntensity) == 0x000004, "Member 'FAppleARKitLightEstimate::AmbientIntensity' has a wrong offset!");

// ScriptStruct AppleARKit.AppleARKitCamera
// 0x0080 (0x0080 - 0x0000)
struct FAppleARKitCamera final
{
public:
	EARTrackingQuality                            TrackingQuality;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Orientation;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0050(0x000C)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageResolution;                                   // 0x005C(0x0008)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FocalLength;                                       // 0x0064(0x0008)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PrincipalPoint;                                    // 0x006C(0x0008)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppleARKitCamera) == 0x000010, "Wrong alignment on FAppleARKitCamera");
static_assert(sizeof(FAppleARKitCamera) == 0x000080, "Wrong size on FAppleARKitCamera");
static_assert(offsetof(FAppleARKitCamera, TrackingQuality) == 0x000000, "Member 'FAppleARKitCamera::TrackingQuality' has a wrong offset!");
static_assert(offsetof(FAppleARKitCamera, Transform) == 0x000010, "Member 'FAppleARKitCamera::Transform' has a wrong offset!");
static_assert(offsetof(FAppleARKitCamera, Orientation) == 0x000040, "Member 'FAppleARKitCamera::Orientation' has a wrong offset!");
static_assert(offsetof(FAppleARKitCamera, Translation) == 0x000050, "Member 'FAppleARKitCamera::Translation' has a wrong offset!");
static_assert(offsetof(FAppleARKitCamera, ImageResolution) == 0x00005C, "Member 'FAppleARKitCamera::ImageResolution' has a wrong offset!");
static_assert(offsetof(FAppleARKitCamera, FocalLength) == 0x000064, "Member 'FAppleARKitCamera::FocalLength' has a wrong offset!");
static_assert(offsetof(FAppleARKitCamera, PrincipalPoint) == 0x00006C, "Member 'FAppleARKitCamera::PrincipalPoint' has a wrong offset!");

// ScriptStruct AppleARKit.AppleARKitFrame
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FAppleARKitFrame final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppleARKitFrame) == 0x000010, "Wrong alignment on FAppleARKitFrame");
static_assert(sizeof(FAppleARKitFrame) == 0x0000B0, "Wrong size on FAppleARKitFrame");

// ScriptStruct AppleARKit.AppleARKitHitTestResult
// 0x0050 (0x0050 - 0x0000)
struct FAppleARKitHitTestResult final
{
public:
	EAppleARKitHitTestResultType                  Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAppleARKitAnchor*                      Anchor;                                            // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppleARKitHitTestResult) == 0x000010, "Wrong alignment on FAppleARKitHitTestResult");
static_assert(sizeof(FAppleARKitHitTestResult) == 0x000050, "Wrong size on FAppleARKitHitTestResult");
static_assert(offsetof(FAppleARKitHitTestResult, Type) == 0x000000, "Member 'FAppleARKitHitTestResult::Type' has a wrong offset!");
static_assert(offsetof(FAppleARKitHitTestResult, Distance) == 0x000004, "Member 'FAppleARKitHitTestResult::Distance' has a wrong offset!");
static_assert(offsetof(FAppleARKitHitTestResult, Transform) == 0x000010, "Member 'FAppleARKitHitTestResult::Transform' has a wrong offset!");
static_assert(offsetof(FAppleARKitHitTestResult, Anchor) == 0x000040, "Member 'FAppleARKitHitTestResult::Anchor' has a wrong offset!");

}

