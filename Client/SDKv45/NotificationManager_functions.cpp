#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NotificationManager

#include "Basic.hpp"

#include "NotificationManager_classes.hpp"
#include "NotificationManager_parameters.hpp"


namespace SDK
{

// Function NotificationManager.NotificationManager_C.ExecuteUbergraph_NotificationManager
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UNotificationManager_C::ExecuteUbergraph_NotificationManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationManager_C", "ExecuteUbergraph_NotificationManager");

	Params::NotificationManager_C_ExecuteUbergraph_NotificationManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationManager.NotificationManager_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNotificationManager_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationManager_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationManager.NotificationManager_C.Construct New Notification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FOrionNotification               Notification_Data                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void UNotificationManager_C::Construct_New_Notification(const struct FOrionNotification& Notification_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationManager_C", "Construct New Notification");

	Params::NotificationManager_C_Construct_New_Notification Parms{};

	Parms.Notification_Data = std::move(Notification_Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationManager.NotificationManager_C.Remove Dead Notification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FOrionNotification               Notification                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UNotificationManager_C::Remove_Dead_Notification(const struct FOrionNotification& Notification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationManager_C", "Remove Dead Notification");

	Params::NotificationManager_C_Remove_Dead_Notification Parms{};

	Parms.Notification = std::move(Notification);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationManager.NotificationManager_C.Notification Exit Finished
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNotification_C*                  Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UNotificationManager_C::Notification_Exit_Finished(class UNotification_C* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationManager_C", "Notification Exit Finished");

	Params::NotificationManager_C_Notification_Exit_Finished Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationManager.NotificationManager_C.Set Display State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCanShowNotifications                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UNotificationManager_C::Set_Display_State(bool bCanShowNotifications)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationManager_C", "Set Display State");

	Params::NotificationManager_C_Set_Display_State Parms{};

	Parms.bCanShowNotifications = bCanShowNotifications;

	UObject::ProcessEvent(Func, &Parms);
}

}

