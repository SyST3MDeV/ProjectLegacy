#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EditorStyle

#include "Basic.hpp"

#include "EditorStyle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class EditorStyle.EditorStyleSettings
// 0x0268 (0x0290 - 0x0028)
class UEditorStyleSettings final : public UObject
{
public:
	bool                                          bEnableHighDPIAwareness;                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SelectionColor;                                    // 0x002C(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PressedSelectionColor;                             // 0x003C(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InactiveSelectionColor;                            // 0x004C(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KeyboardFocusColor;                                // 0x005C(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorVisionDeficiency                        ColorVisionDeficiencyPreviewType;                  // 0x006C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EditorWindowBackgroundColor;                       // 0x0070(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EditorMainWindowBackgroundOverride;                // 0x0080(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EditorChildWindowBackgroundOverride;               // 0x00F8(0x0078)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bResetEditorWindowBackgroundSettings;              // 0x0170(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseSmallToolBarIcons : 1;                         // 0x0174(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseGrid : 1;                                      // 0x0174(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           RegularColor;                                      // 0x0178(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RuleColor;                                         // 0x0188(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CenterColor;                                       // 0x0198(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GridSnapSize;                                      // 0x01A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableWindowAnimations : 1;                       // 0x01AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowFriendlyNames : 1;                            // 0x01AC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExpandConfigurationMenus : 1;                     // 0x01AC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowProjectMenus : 1;                             // 0x01AC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowLaunchMenus : 1;                              // 0x01AC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LogBackgroundColor;                                // 0x01B0(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LogSelectionBackgroundColor;                       // 0x01C0(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LogNormalColor;                                    // 0x01D0(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LogCommandColor;                                   // 0x01E0(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LogWarningColor;                                   // 0x01F0(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LogErrorColor;                                     // 0x0200(0x0010)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShowAllAdvancedDetails : 1;                       // 0x0210(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowHiddenPropertiesWhilePlaying : 1;             // 0x0210(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogFontSize;                                       // 0x0214(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogTimes                                     LogTimestampMode;                                  // 0x0218(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPromoteOutputLogWarningsDuringPIE;                // 0x0219(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAssetEditorOpenLocation                      AssetEditorOpenLocation;                           // 0x021A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B[0x1];                                      // 0x021B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableColorizedEditorTabs : 1;                    // 0x021C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21D[0x73];                                     // 0x021D(0x0073)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditorStyleSettings">();
	}
	static class UEditorStyleSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditorStyleSettings>();
	}
};
static_assert(alignof(UEditorStyleSettings) == 0x000008, "Wrong alignment on UEditorStyleSettings");
static_assert(sizeof(UEditorStyleSettings) == 0x000290, "Wrong size on UEditorStyleSettings");
static_assert(offsetof(UEditorStyleSettings, bEnableHighDPIAwareness) == 0x000028, "Member 'UEditorStyleSettings::bEnableHighDPIAwareness' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, SelectionColor) == 0x00002C, "Member 'UEditorStyleSettings::SelectionColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, PressedSelectionColor) == 0x00003C, "Member 'UEditorStyleSettings::PressedSelectionColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, InactiveSelectionColor) == 0x00004C, "Member 'UEditorStyleSettings::InactiveSelectionColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, KeyboardFocusColor) == 0x00005C, "Member 'UEditorStyleSettings::KeyboardFocusColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, ColorVisionDeficiencyPreviewType) == 0x00006C, "Member 'UEditorStyleSettings::ColorVisionDeficiencyPreviewType' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, EditorWindowBackgroundColor) == 0x000070, "Member 'UEditorStyleSettings::EditorWindowBackgroundColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, EditorMainWindowBackgroundOverride) == 0x000080, "Member 'UEditorStyleSettings::EditorMainWindowBackgroundOverride' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, EditorChildWindowBackgroundOverride) == 0x0000F8, "Member 'UEditorStyleSettings::EditorChildWindowBackgroundOverride' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, bResetEditorWindowBackgroundSettings) == 0x000170, "Member 'UEditorStyleSettings::bResetEditorWindowBackgroundSettings' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, RegularColor) == 0x000178, "Member 'UEditorStyleSettings::RegularColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, RuleColor) == 0x000188, "Member 'UEditorStyleSettings::RuleColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, CenterColor) == 0x000198, "Member 'UEditorStyleSettings::CenterColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, GridSnapSize) == 0x0001A8, "Member 'UEditorStyleSettings::GridSnapSize' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogBackgroundColor) == 0x0001B0, "Member 'UEditorStyleSettings::LogBackgroundColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogSelectionBackgroundColor) == 0x0001C0, "Member 'UEditorStyleSettings::LogSelectionBackgroundColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogNormalColor) == 0x0001D0, "Member 'UEditorStyleSettings::LogNormalColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogCommandColor) == 0x0001E0, "Member 'UEditorStyleSettings::LogCommandColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogWarningColor) == 0x0001F0, "Member 'UEditorStyleSettings::LogWarningColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogErrorColor) == 0x000200, "Member 'UEditorStyleSettings::LogErrorColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogFontSize) == 0x000214, "Member 'UEditorStyleSettings::LogFontSize' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogTimestampMode) == 0x000218, "Member 'UEditorStyleSettings::LogTimestampMode' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, bPromoteOutputLogWarningsDuringPIE) == 0x000219, "Member 'UEditorStyleSettings::bPromoteOutputLogWarningsDuringPIE' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, AssetEditorOpenLocation) == 0x00021A, "Member 'UEditorStyleSettings::AssetEditorOpenLocation' has a wrong offset!");

}

