#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Card_Hide

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Card_Hide.GA_Card_Hide_C
// 0x0240 (0x0DB0 - 0x0B70)
class UGA_Card_Hide_C final : public UOrionAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B70(0x0008)(Transient, DuplicateTransient)
	class UClass*                                 GE_ShadowPlane;                                    // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationBefore;                                    // 0x0B80(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationAfter;                                     // 0x0B8C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ShadowplaneGE;                                     // 0x0B98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA4[0x4];                                      // 0x0BA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_MovingTag;                                      // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            MovedGE;                                           // 0x0BB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB8[0x8];                                      // 0x0BB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectQuery                   TagQuery;                                          // 0x0BC0(0x0170)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          CanDealAoeDamage;                                  // 0x0D30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D31[0x3];                                      // 0x0D31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Charges;                                           // 0x0D34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCharges;                                        // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3C[0x4];                                      // 0x0D3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ValueMaxCharges;                                   // 0x0D40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DamageToDeal;                                      // 0x0D68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6C[0x4];                                      // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ValueDamagePerSecond;                              // 0x0D70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DamagePerCharge;                                   // 0x0D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9C[0x4];                                      // 0x0D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ChargeTimer;                                       // 0x0DA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_GA_Card_Hide(int32 EntryPoint);
	void Added_D827C27A47C71C3F8F3BAD80FB0EA187();
	void BuildCharges();
	void Cancelled_884725504F022250D51DD0BD45E4BF31(const struct FGameplayAbilityTargetDataHandle& Targets);
	void Confirmed_884725504F022250D51DD0BD45E4BF31(const struct FGameplayAbilityTargetDataHandle& Targets);
	void K2_ActivateAbility();
	void LocationCheck();
	void OnCommit_66A672EE4F96F91E45834EAAFC06A43D(class UGameplayAbility* ActivatedAbility);
	void OnCommit_BA853DFC45265C7F96DF2E89C03DA69F(class UGameplayAbility* ActivatedAbility);
	void OnMovementInput_3D276F39404A9C6B6AC9F9BDB114D86D();
	void OnStateEnded_7E7F0B4C487B294C61A3B69B0CA7DAD1();
	void OnStateInterrupted_7E7F0B4C487B294C61A3B69B0CA7DAD1();
	void Removed_B6CAF4AA44F38123DA641D8F217502BD();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Card_Hide_C">();
	}
	static class UGA_Card_Hide_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Card_Hide_C>();
	}
};
static_assert(alignof(UGA_Card_Hide_C) == 0x000010, "Wrong alignment on UGA_Card_Hide_C");
static_assert(sizeof(UGA_Card_Hide_C) == 0x000DB0, "Wrong size on UGA_Card_Hide_C");
static_assert(offsetof(UGA_Card_Hide_C, UberGraphFrame) == 0x000B70, "Member 'UGA_Card_Hide_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, GE_ShadowPlane) == 0x000B78, "Member 'UGA_Card_Hide_C::GE_ShadowPlane' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, LocationBefore) == 0x000B80, "Member 'UGA_Card_Hide_C::LocationBefore' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, LocationAfter) == 0x000B8C, "Member 'UGA_Card_Hide_C::LocationAfter' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, ShadowplaneGE) == 0x000B98, "Member 'UGA_Card_Hide_C::ShadowplaneGE' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, Index_0) == 0x000BA0, "Member 'UGA_Card_Hide_C::Index_0' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, GE_MovingTag) == 0x000BA8, "Member 'UGA_Card_Hide_C::GE_MovingTag' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, MovedGE) == 0x000BB0, "Member 'UGA_Card_Hide_C::MovedGE' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, TagQuery) == 0x000BC0, "Member 'UGA_Card_Hide_C::TagQuery' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, CanDealAoeDamage) == 0x000D30, "Member 'UGA_Card_Hide_C::CanDealAoeDamage' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, Charges) == 0x000D34, "Member 'UGA_Card_Hide_C::Charges' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, MaxCharges) == 0x000D38, "Member 'UGA_Card_Hide_C::MaxCharges' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, ValueMaxCharges) == 0x000D40, "Member 'UGA_Card_Hide_C::ValueMaxCharges' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, DamageToDeal) == 0x000D68, "Member 'UGA_Card_Hide_C::DamageToDeal' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, ValueDamagePerSecond) == 0x000D70, "Member 'UGA_Card_Hide_C::ValueDamagePerSecond' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, DamagePerCharge) == 0x000D98, "Member 'UGA_Card_Hide_C::DamagePerCharge' has a wrong offset!");
static_assert(offsetof(UGA_Card_Hide_C, ChargeTimer) == 0x000DA0, "Member 'UGA_Card_Hide_C::ChargeTimer' has a wrong offset!");

}

