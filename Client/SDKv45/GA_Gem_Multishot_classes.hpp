#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Gem_Multishot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OrionGame_structs.hpp"
#include "OrionGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Gem_Multishot.GA_Gem_Multishot_C
// 0x0060 (0x0BD0 - 0x0B70)
class UGA_Gem_Multishot_C final : public UOrionAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B70(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTagRequirements               SourceTagReq;                                      // 0x0B78(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 ApplyTagToTarget;                                  // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ProjectileClass;                                   // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrionProjectileSpeed                         LaunchSpeed;                                       // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC9[0x3];                                      // 0x0BC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnDelay;                                        // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Gem_Multishot(int32 EntryPoint);
	void Cancelled_D6793ECB4467D062B26970A8A398E783(const struct FGameplayAbilityTargetDataHandle& Targets);
	void Confirmed_D6793ECB4467D062B26970A8A398E783(const struct FGameplayAbilityTargetDataHandle& Targets);
	void FailedToSpawn_11A6B006442BEC7D9B52CE8B15EB2589(class AOrionProjectile* SpawnedProjectile);
	void FailedToSpawn_DCE7B60940582C24480875BF898DD4FF(class AOrionProjectile* SpawnedProjectile);
	void K2_ActivateAbility();
	void NotAuthority_11A6B006442BEC7D9B52CE8B15EB2589(class AOrionProjectile* SpawnedProjectile);
	void NotAuthority_DCE7B60940582C24480875BF898DD4FF(class AOrionProjectile* SpawnedProjectile);
	void OnApplied_E84C8E9C4A7E8EE6FBCB5F8D547474F0(class AActor* Target, const struct FGameplayEffectSpecHandle& SpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle);
	void OnCommit_9115CBA0403119C43D334FA4874F7ABF(class UGameplayAbility* ActivatedAbility);
	void OnFinish_63AA840D4746C6AB0C9135B8495567E4();
	void OnStateEnded_C99938E04A3BDE1E2A7BFD9BF0946830();
	void OnStateInterrupted_C99938E04A3BDE1E2A7BFD9BF0946830();
	void PreSpawned_11A6B006442BEC7D9B52CE8B15EB2589(class AOrionProjectile* SpawnedProjectile);
	void PreSpawned_DCE7B60940582C24480875BF898DD4FF(class AOrionProjectile* SpawnedProjectile);
	void Success_11A6B006442BEC7D9B52CE8B15EB2589(class AOrionProjectile* SpawnedProjectile);
	void Success_DCE7B60940582C24480875BF898DD4FF(class AOrionProjectile* SpawnedProjectile);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Gem_Multishot_C">();
	}
	static class UGA_Gem_Multishot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Gem_Multishot_C>();
	}
};
static_assert(alignof(UGA_Gem_Multishot_C) == 0x000010, "Wrong alignment on UGA_Gem_Multishot_C");
static_assert(sizeof(UGA_Gem_Multishot_C) == 0x000BD0, "Wrong size on UGA_Gem_Multishot_C");
static_assert(offsetof(UGA_Gem_Multishot_C, UberGraphFrame) == 0x000B70, "Member 'UGA_Gem_Multishot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Gem_Multishot_C, SourceTagReq) == 0x000B78, "Member 'UGA_Gem_Multishot_C::SourceTagReq' has a wrong offset!");
static_assert(offsetof(UGA_Gem_Multishot_C, ApplyTagToTarget) == 0x000BB8, "Member 'UGA_Gem_Multishot_C::ApplyTagToTarget' has a wrong offset!");
static_assert(offsetof(UGA_Gem_Multishot_C, ProjectileClass) == 0x000BC0, "Member 'UGA_Gem_Multishot_C::ProjectileClass' has a wrong offset!");
static_assert(offsetof(UGA_Gem_Multishot_C, LaunchSpeed) == 0x000BC8, "Member 'UGA_Gem_Multishot_C::LaunchSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Gem_Multishot_C, SpawnDelay) == 0x000BCC, "Member 'UGA_Gem_Multishot_C::SpawnDelay' has a wrong offset!");

}

