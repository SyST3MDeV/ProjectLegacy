#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueprintContext

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Party_structs.hpp"
#include "OrionGame_structs.hpp"
#include "Account_structs.hpp"
#include "BlueprintContext_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function BlueprintContext.AnalogCursorContext.EnableAnalogCursor
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_EnableAnalogCursor final
{
public:
	bool                                          bEnableParallax;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_EnableAnalogCursor) == 0x000001, "Wrong alignment on AnalogCursorContext_EnableAnalogCursor");
static_assert(sizeof(AnalogCursorContext_EnableAnalogCursor) == 0x000001, "Wrong size on AnalogCursorContext_EnableAnalogCursor");
static_assert(offsetof(AnalogCursorContext_EnableAnalogCursor, bEnableParallax) == 0x000000, "Member 'AnalogCursorContext_EnableAnalogCursor::bEnableParallax' has a wrong offset!");

// DelegateFunction BlueprintContext.AnalogCursorContext.OnAnalogCursorEnabledToggle__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_OnAnalogCursorEnabledToggle__DelegateSignature final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_OnAnalogCursorEnabledToggle__DelegateSignature) == 0x000001, "Wrong alignment on AnalogCursorContext_OnAnalogCursorEnabledToggle__DelegateSignature");
static_assert(sizeof(AnalogCursorContext_OnAnalogCursorEnabledToggle__DelegateSignature) == 0x000001, "Wrong size on AnalogCursorContext_OnAnalogCursorEnabledToggle__DelegateSignature");
static_assert(offsetof(AnalogCursorContext_OnAnalogCursorEnabledToggle__DelegateSignature, bIsEnabled) == 0x000000, "Member 'AnalogCursorContext_OnAnalogCursorEnabledToggle__DelegateSignature::bIsEnabled' has a wrong offset!");

// DelegateFunction BlueprintContext.AnalogCursorContext.OnAnalogCursorHovered__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_OnAnalogCursorHovered__DelegateSignature final
{
public:
	bool                                          bIsHovering;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_OnAnalogCursorHovered__DelegateSignature) == 0x000001, "Wrong alignment on AnalogCursorContext_OnAnalogCursorHovered__DelegateSignature");
static_assert(sizeof(AnalogCursorContext_OnAnalogCursorHovered__DelegateSignature) == 0x000001, "Wrong size on AnalogCursorContext_OnAnalogCursorHovered__DelegateSignature");
static_assert(offsetof(AnalogCursorContext_OnAnalogCursorHovered__DelegateSignature, bIsHovering) == 0x000000, "Member 'AnalogCursorContext_OnAnalogCursorHovered__DelegateSignature::bIsHovering' has a wrong offset!");

// DelegateFunction BlueprintContext.AnalogCursorContext.OnAnalogCursorToggle__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_OnAnalogCursorToggle__DelegateSignature final
{
public:
	bool                                          UsingAnalog;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_OnAnalogCursorToggle__DelegateSignature) == 0x000001, "Wrong alignment on AnalogCursorContext_OnAnalogCursorToggle__DelegateSignature");
static_assert(sizeof(AnalogCursorContext_OnAnalogCursorToggle__DelegateSignature) == 0x000001, "Wrong size on AnalogCursorContext_OnAnalogCursorToggle__DelegateSignature");
static_assert(offsetof(AnalogCursorContext_OnAnalogCursorToggle__DelegateSignature, UsingAnalog) == 0x000000, "Member 'AnalogCursorContext_OnAnalogCursorToggle__DelegateSignature::UsingAnalog' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.SetControllingAnalogStick
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_SetControllingAnalogStick final
{
public:
	EOrionAnalogStick                             NewAnalogStick;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_SetControllingAnalogStick) == 0x000001, "Wrong alignment on AnalogCursorContext_SetControllingAnalogStick");
static_assert(sizeof(AnalogCursorContext_SetControllingAnalogStick) == 0x000001, "Wrong size on AnalogCursorContext_SetControllingAnalogStick");
static_assert(offsetof(AnalogCursorContext_SetControllingAnalogStick, NewAnalogStick) == 0x000000, "Member 'AnalogCursorContext_SetControllingAnalogStick::NewAnalogStick' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.SetIsListeningForGestures
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_SetIsListeningForGestures final
{
public:
	bool                                          bNewlyListening;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_SetIsListeningForGestures) == 0x000001, "Wrong alignment on AnalogCursorContext_SetIsListeningForGestures");
static_assert(sizeof(AnalogCursorContext_SetIsListeningForGestures) == 0x000001, "Wrong size on AnalogCursorContext_SetIsListeningForGestures");
static_assert(offsetof(AnalogCursorContext_SetIsListeningForGestures, bNewlyListening) == 0x000000, "Member 'AnalogCursorContext_SetIsListeningForGestures::bNewlyListening' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.SetNormalizedPosition
// 0x0008 (0x0008 - 0x0000)
struct AnalogCursorContext_SetNormalizedPosition final
{
public:
	struct FVector2D                              NewRelativePosition;                               // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_SetNormalizedPosition) == 0x000004, "Wrong alignment on AnalogCursorContext_SetNormalizedPosition");
static_assert(sizeof(AnalogCursorContext_SetNormalizedPosition) == 0x000008, "Wrong size on AnalogCursorContext_SetNormalizedPosition");
static_assert(offsetof(AnalogCursorContext_SetNormalizedPosition, NewRelativePosition) == 0x000000, "Member 'AnalogCursorContext_SetNormalizedPosition::NewRelativePosition' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetAnalogStickValues
// 0x0008 (0x0008 - 0x0000)
struct AnalogCursorContext_GetAnalogStickValues final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetAnalogStickValues) == 0x000004, "Wrong alignment on AnalogCursorContext_GetAnalogStickValues");
static_assert(sizeof(AnalogCursorContext_GetAnalogStickValues) == 0x000008, "Wrong size on AnalogCursorContext_GetAnalogStickValues");
static_assert(offsetof(AnalogCursorContext_GetAnalogStickValues, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetAnalogStickValues::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetCurrentPosition
// 0x0008 (0x0008 - 0x0000)
struct AnalogCursorContext_GetCurrentPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetCurrentPosition) == 0x000004, "Wrong alignment on AnalogCursorContext_GetCurrentPosition");
static_assert(sizeof(AnalogCursorContext_GetCurrentPosition) == 0x000008, "Wrong size on AnalogCursorContext_GetCurrentPosition");
static_assert(offsetof(AnalogCursorContext_GetCurrentPosition, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetCurrentPosition::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetDirectionFromVector
// 0x000C (0x000C - 0x0000)
struct AnalogCursorContext_GetDirectionFromVector final
{
public:
	struct FVector2D                              Vector;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionGestureDirection                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnalogCursorContext_GetDirectionFromVector) == 0x000004, "Wrong alignment on AnalogCursorContext_GetDirectionFromVector");
static_assert(sizeof(AnalogCursorContext_GetDirectionFromVector) == 0x00000C, "Wrong size on AnalogCursorContext_GetDirectionFromVector");
static_assert(offsetof(AnalogCursorContext_GetDirectionFromVector, Vector) == 0x000000, "Member 'AnalogCursorContext_GetDirectionFromVector::Vector' has a wrong offset!");
static_assert(offsetof(AnalogCursorContext_GetDirectionFromVector, ReturnValue) == 0x000008, "Member 'AnalogCursorContext_GetDirectionFromVector::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetGestureInfo
// 0x0002 (0x0002 - 0x0000)
struct AnalogCursorContext_GetGestureInfo final
{
public:
	EOrionGestureDirection                        Direction0;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionGestureDirection                        Direction1;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetGestureInfo) == 0x000001, "Wrong alignment on AnalogCursorContext_GetGestureInfo");
static_assert(sizeof(AnalogCursorContext_GetGestureInfo) == 0x000002, "Wrong size on AnalogCursorContext_GetGestureInfo");
static_assert(offsetof(AnalogCursorContext_GetGestureInfo, Direction0) == 0x000000, "Member 'AnalogCursorContext_GetGestureInfo::Direction0' has a wrong offset!");
static_assert(offsetof(AnalogCursorContext_GetGestureInfo, Direction1) == 0x000001, "Member 'AnalogCursorContext_GetGestureInfo::Direction1' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetHoveredWidgetName
// 0x0008 (0x0008 - 0x0000)
struct AnalogCursorContext_GetHoveredWidgetName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetHoveredWidgetName) == 0x000004, "Wrong alignment on AnalogCursorContext_GetHoveredWidgetName");
static_assert(sizeof(AnalogCursorContext_GetHoveredWidgetName) == 0x000008, "Wrong size on AnalogCursorContext_GetHoveredWidgetName");
static_assert(offsetof(AnalogCursorContext_GetHoveredWidgetName, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetHoveredWidgetName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetIsInFastMode
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_GetIsInFastMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetIsInFastMode) == 0x000001, "Wrong alignment on AnalogCursorContext_GetIsInFastMode");
static_assert(sizeof(AnalogCursorContext_GetIsInFastMode) == 0x000001, "Wrong size on AnalogCursorContext_GetIsInFastMode");
static_assert(offsetof(AnalogCursorContext_GetIsInFastMode, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetIsInFastMode::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetIsUsingGamePad
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_GetIsUsingGamePad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetIsUsingGamePad) == 0x000001, "Wrong alignment on AnalogCursorContext_GetIsUsingGamePad");
static_assert(sizeof(AnalogCursorContext_GetIsUsingGamePad) == 0x000001, "Wrong size on AnalogCursorContext_GetIsUsingGamePad");
static_assert(offsetof(AnalogCursorContext_GetIsUsingGamePad, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetIsUsingGamePad::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetLastCursorDirection
// 0x0008 (0x0008 - 0x0000)
struct AnalogCursorContext_GetLastCursorDirection final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetLastCursorDirection) == 0x000004, "Wrong alignment on AnalogCursorContext_GetLastCursorDirection");
static_assert(sizeof(AnalogCursorContext_GetLastCursorDirection) == 0x000008, "Wrong size on AnalogCursorContext_GetLastCursorDirection");
static_assert(offsetof(AnalogCursorContext_GetLastCursorDirection, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetLastCursorDirection::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetNormalizedPosition
// 0x0008 (0x0008 - 0x0000)
struct AnalogCursorContext_GetNormalizedPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetNormalizedPosition) == 0x000004, "Wrong alignment on AnalogCursorContext_GetNormalizedPosition");
static_assert(sizeof(AnalogCursorContext_GetNormalizedPosition) == 0x000008, "Wrong size on AnalogCursorContext_GetNormalizedPosition");
static_assert(offsetof(AnalogCursorContext_GetNormalizedPosition, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetNormalizedPosition::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetRadius
// 0x0004 (0x0004 - 0x0000)
struct AnalogCursorContext_GetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetRadius) == 0x000004, "Wrong alignment on AnalogCursorContext_GetRadius");
static_assert(sizeof(AnalogCursorContext_GetRadius) == 0x000004, "Wrong size on AnalogCursorContext_GetRadius");
static_assert(offsetof(AnalogCursorContext_GetRadius, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetRadius::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetRightTriggerValue
// 0x0004 (0x0004 - 0x0000)
struct AnalogCursorContext_GetRightTriggerValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetRightTriggerValue) == 0x000004, "Wrong alignment on AnalogCursorContext_GetRightTriggerValue");
static_assert(sizeof(AnalogCursorContext_GetRightTriggerValue) == 0x000004, "Wrong size on AnalogCursorContext_GetRightTriggerValue");
static_assert(offsetof(AnalogCursorContext_GetRightTriggerValue, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetRightTriggerValue::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.GetVelocity
// 0x0008 (0x0008 - 0x0000)
struct AnalogCursorContext_GetVelocity final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_GetVelocity) == 0x000004, "Wrong alignment on AnalogCursorContext_GetVelocity");
static_assert(sizeof(AnalogCursorContext_GetVelocity) == 0x000008, "Wrong size on AnalogCursorContext_GetVelocity");
static_assert(offsetof(AnalogCursorContext_GetVelocity, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_GetVelocity::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.IsDelegateToggleBound
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_IsDelegateToggleBound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_IsDelegateToggleBound) == 0x000001, "Wrong alignment on AnalogCursorContext_IsDelegateToggleBound");
static_assert(sizeof(AnalogCursorContext_IsDelegateToggleBound) == 0x000001, "Wrong size on AnalogCursorContext_IsDelegateToggleBound");
static_assert(offsetof(AnalogCursorContext_IsDelegateToggleBound, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_IsDelegateToggleBound::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.IsHovering
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_IsHovering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_IsHovering) == 0x000001, "Wrong alignment on AnalogCursorContext_IsHovering");
static_assert(sizeof(AnalogCursorContext_IsHovering) == 0x000001, "Wrong size on AnalogCursorContext_IsHovering");
static_assert(offsetof(AnalogCursorContext_IsHovering, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_IsHovering::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AnalogCursorContext.IsUsingAnalogCursor
// 0x0001 (0x0001 - 0x0000)
struct AnalogCursorContext_IsUsingAnalogCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalogCursorContext_IsUsingAnalogCursor) == 0x000001, "Wrong alignment on AnalogCursorContext_IsUsingAnalogCursor");
static_assert(sizeof(AnalogCursorContext_IsUsingAnalogCursor) == 0x000001, "Wrong size on AnalogCursorContext_IsUsingAnalogCursor");
static_assert(offsetof(AnalogCursorContext_IsUsingAnalogCursor, ReturnValue) == 0x000000, "Member 'AnalogCursorContext_IsUsingAnalogCursor::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ArcadeContext.GetCurrentRoundIndex
// 0x0004 (0x0004 - 0x0000)
struct ArcadeContext_GetCurrentRoundIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeContext_GetCurrentRoundIndex) == 0x000004, "Wrong alignment on ArcadeContext_GetCurrentRoundIndex");
static_assert(sizeof(ArcadeContext_GetCurrentRoundIndex) == 0x000004, "Wrong size on ArcadeContext_GetCurrentRoundIndex");
static_assert(offsetof(ArcadeContext_GetCurrentRoundIndex, ReturnValue) == 0x000000, "Member 'ArcadeContext_GetCurrentRoundIndex::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ArcadeContext.GetCurrentRoundTime
// 0x0004 (0x0004 - 0x0000)
struct ArcadeContext_GetCurrentRoundTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeContext_GetCurrentRoundTime) == 0x000004, "Wrong alignment on ArcadeContext_GetCurrentRoundTime");
static_assert(sizeof(ArcadeContext_GetCurrentRoundTime) == 0x000004, "Wrong size on ArcadeContext_GetCurrentRoundTime");
static_assert(offsetof(ArcadeContext_GetCurrentRoundTime, ReturnValue) == 0x000000, "Member 'ArcadeContext_GetCurrentRoundTime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ArcadeContext.GetRoundState
// 0x0018 (0x0018 - 0x0000)
struct ArcadeContext_GetRoundState final
{
public:
	struct FArcadeRoundState                      ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeContext_GetRoundState) == 0x000004, "Wrong alignment on ArcadeContext_GetRoundState");
static_assert(sizeof(ArcadeContext_GetRoundState) == 0x000018, "Wrong size on ArcadeContext_GetRoundState");
static_assert(offsetof(ArcadeContext_GetRoundState, ReturnValue) == 0x000000, "Member 'ArcadeContext_GetRoundState::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ArcadeContext.GetVictoryPoints
// 0x0004 (0x0004 - 0x0000)
struct ArcadeContext_GetVictoryPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeContext_GetVictoryPoints) == 0x000004, "Wrong alignment on ArcadeContext_GetVictoryPoints");
static_assert(sizeof(ArcadeContext_GetVictoryPoints) == 0x000004, "Wrong size on ArcadeContext_GetVictoryPoints");
static_assert(offsetof(ArcadeContext_GetVictoryPoints, ReturnValue) == 0x000000, "Member 'ArcadeContext_GetVictoryPoints::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ArcadeContext.InOvertime
// 0x0001 (0x0001 - 0x0000)
struct ArcadeContext_InOvertime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeContext_InOvertime) == 0x000001, "Wrong alignment on ArcadeContext_InOvertime");
static_assert(sizeof(ArcadeContext_InOvertime) == 0x000001, "Wrong size on ArcadeContext_InOvertime");
static_assert(offsetof(ArcadeContext_InOvertime, ReturnValue) == 0x000000, "Member 'ArcadeContext_InOvertime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ArcadeContext.IsInArcade
// 0x0001 (0x0001 - 0x0000)
struct ArcadeContext_IsInArcade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeContext_IsInArcade) == 0x000001, "Wrong alignment on ArcadeContext_IsInArcade");
static_assert(sizeof(ArcadeContext_IsInArcade) == 0x000001, "Wrong size on ArcadeContext_IsInArcade");
static_assert(offsetof(ArcadeContext_IsInArcade, ReturnValue) == 0x000000, "Member 'ArcadeContext_IsInArcade::ReturnValue' has a wrong offset!");

// Function BlueprintContext.AutomationContext.ActivateAbilityForPawn
// 0x0010 (0x0010 - 0x0000)
struct AutomationContext_ActivateAbilityForPawn final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionAbilityBinding                          InputID;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationContext_ActivateAbilityForPawn) == 0x000008, "Wrong alignment on AutomationContext_ActivateAbilityForPawn");
static_assert(sizeof(AutomationContext_ActivateAbilityForPawn) == 0x000010, "Wrong size on AutomationContext_ActivateAbilityForPawn");
static_assert(offsetof(AutomationContext_ActivateAbilityForPawn, InChar) == 0x000000, "Member 'AutomationContext_ActivateAbilityForPawn::InChar' has a wrong offset!");
static_assert(offsetof(AutomationContext_ActivateAbilityForPawn, InputID) == 0x000008, "Member 'AutomationContext_ActivateAbilityForPawn::InputID' has a wrong offset!");
static_assert(offsetof(AutomationContext_ActivateAbilityForPawn, bPressed) == 0x000009, "Member 'AutomationContext_ActivateAbilityForPawn::bPressed' has a wrong offset!");

// Function BlueprintContext.AutomationContext.ActivateAIAbility
// 0x0010 (0x0010 - 0x0000)
struct AutomationContext_ActivateAIAbility final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionAbilityBinding                          InputID;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationContext_ActivateAIAbility) == 0x000008, "Wrong alignment on AutomationContext_ActivateAIAbility");
static_assert(sizeof(AutomationContext_ActivateAIAbility) == 0x000010, "Wrong size on AutomationContext_ActivateAIAbility");
static_assert(offsetof(AutomationContext_ActivateAIAbility, InChar) == 0x000000, "Member 'AutomationContext_ActivateAIAbility::InChar' has a wrong offset!");
static_assert(offsetof(AutomationContext_ActivateAIAbility, InputID) == 0x000008, "Member 'AutomationContext_ActivateAIAbility::InputID' has a wrong offset!");

// Function BlueprintContext.AutomationContext.AddPawnMovementInput
// 0x0020 (0x0020 - 0x0000)
struct AutomationContext_AddPawnMovementInput final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationContext_AddPawnMovementInput) == 0x000008, "Wrong alignment on AutomationContext_AddPawnMovementInput");
static_assert(sizeof(AutomationContext_AddPawnMovementInput) == 0x000020, "Wrong size on AutomationContext_AddPawnMovementInput");
static_assert(offsetof(AutomationContext_AddPawnMovementInput, InChar) == 0x000000, "Member 'AutomationContext_AddPawnMovementInput::InChar' has a wrong offset!");
static_assert(offsetof(AutomationContext_AddPawnMovementInput, WorldDirection) == 0x000008, "Member 'AutomationContext_AddPawnMovementInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(AutomationContext_AddPawnMovementInput, ScaleValue) == 0x000014, "Member 'AutomationContext_AddPawnMovementInput::ScaleValue' has a wrong offset!");
static_assert(offsetof(AutomationContext_AddPawnMovementInput, bForce) == 0x000018, "Member 'AutomationContext_AddPawnMovementInput::bForce' has a wrong offset!");

// Function BlueprintContext.AutomationContext.CancelAbilityForPawn
// 0x0008 (0x0008 - 0x0000)
struct AutomationContext_CancelAbilityForPawn final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_CancelAbilityForPawn) == 0x000008, "Wrong alignment on AutomationContext_CancelAbilityForPawn");
static_assert(sizeof(AutomationContext_CancelAbilityForPawn) == 0x000008, "Wrong size on AutomationContext_CancelAbilityForPawn");
static_assert(offsetof(AutomationContext_CancelAbilityForPawn, InChar) == 0x000000, "Member 'AutomationContext_CancelAbilityForPawn::InChar' has a wrong offset!");

// Function BlueprintContext.AutomationContext.CancelAllAbilities
// 0x0008 (0x0008 - 0x0000)
struct AutomationContext_CancelAllAbilities final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_CancelAllAbilities) == 0x000008, "Wrong alignment on AutomationContext_CancelAllAbilities");
static_assert(sizeof(AutomationContext_CancelAllAbilities) == 0x000008, "Wrong size on AutomationContext_CancelAllAbilities");
static_assert(offsetof(AutomationContext_CancelAllAbilities, InChar) == 0x000000, "Member 'AutomationContext_CancelAllAbilities::InChar' has a wrong offset!");

// Function BlueprintContext.AutomationContext.ConfirmAbilityForPawn
// 0x0008 (0x0008 - 0x0000)
struct AutomationContext_ConfirmAbilityForPawn final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_ConfirmAbilityForPawn) == 0x000008, "Wrong alignment on AutomationContext_ConfirmAbilityForPawn");
static_assert(sizeof(AutomationContext_ConfirmAbilityForPawn) == 0x000008, "Wrong size on AutomationContext_ConfirmAbilityForPawn");
static_assert(offsetof(AutomationContext_ConfirmAbilityForPawn, InChar) == 0x000000, "Member 'AutomationContext_ConfirmAbilityForPawn::InChar' has a wrong offset!");

// Function BlueprintContext.AutomationContext.GetRemainingCooldownForAbility
// 0x0010 (0x0010 - 0x0000)
struct AutomationContext_GetRemainingCooldownForAbility final
{
public:
	class UOrionAbilitySystemComponent*           AbilitySystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionAbilityBinding                          InputID;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_GetRemainingCooldownForAbility) == 0x000008, "Wrong alignment on AutomationContext_GetRemainingCooldownForAbility");
static_assert(sizeof(AutomationContext_GetRemainingCooldownForAbility) == 0x000010, "Wrong size on AutomationContext_GetRemainingCooldownForAbility");
static_assert(offsetof(AutomationContext_GetRemainingCooldownForAbility, AbilitySystem) == 0x000000, "Member 'AutomationContext_GetRemainingCooldownForAbility::AbilitySystem' has a wrong offset!");
static_assert(offsetof(AutomationContext_GetRemainingCooldownForAbility, InputID) == 0x000008, "Member 'AutomationContext_GetRemainingCooldownForAbility::InputID' has a wrong offset!");
static_assert(offsetof(AutomationContext_GetRemainingCooldownForAbility, ReturnValue) == 0x00000C, "Member 'AutomationContext_GetRemainingCooldownForAbility::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.AutomationContext.OnOrionCharSpawned__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AutomationContext_OnOrionCharSpawned__DelegateSignature final
{
public:
	class AOrionChar*                             NewOrionChar;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_OnOrionCharSpawned__DelegateSignature) == 0x000008, "Wrong alignment on AutomationContext_OnOrionCharSpawned__DelegateSignature");
static_assert(sizeof(AutomationContext_OnOrionCharSpawned__DelegateSignature) == 0x000008, "Wrong size on AutomationContext_OnOrionCharSpawned__DelegateSignature");
static_assert(offsetof(AutomationContext_OnOrionCharSpawned__DelegateSignature, NewOrionChar) == 0x000000, "Member 'AutomationContext_OnOrionCharSpawned__DelegateSignature::NewOrionChar' has a wrong offset!");

// Function BlueprintContext.AutomationContext.ScriptAIBehavior
// 0x0010 (0x0010 - 0x0000)
struct AutomationContext_ScriptAIBehavior final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIScriptedBehavior*                    ScriptedBehavior;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_ScriptAIBehavior) == 0x000008, "Wrong alignment on AutomationContext_ScriptAIBehavior");
static_assert(sizeof(AutomationContext_ScriptAIBehavior) == 0x000010, "Wrong size on AutomationContext_ScriptAIBehavior");
static_assert(offsetof(AutomationContext_ScriptAIBehavior, InChar) == 0x000000, "Member 'AutomationContext_ScriptAIBehavior::InChar' has a wrong offset!");
static_assert(offsetof(AutomationContext_ScriptAIBehavior, ScriptedBehavior) == 0x000008, "Member 'AutomationContext_ScriptAIBehavior::ScriptedBehavior' has a wrong offset!");

// Function BlueprintContext.AutomationContext.SetHealth
// 0x0010 (0x0010 - 0x0000)
struct AutomationContext_SetHealth final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercent;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationContext_SetHealth) == 0x000008, "Wrong alignment on AutomationContext_SetHealth");
static_assert(sizeof(AutomationContext_SetHealth) == 0x000010, "Wrong size on AutomationContext_SetHealth");
static_assert(offsetof(AutomationContext_SetHealth, InChar) == 0x000000, "Member 'AutomationContext_SetHealth::InChar' has a wrong offset!");
static_assert(offsetof(AutomationContext_SetHealth, InPercent) == 0x000008, "Member 'AutomationContext_SetHealth::InPercent' has a wrong offset!");

// Function BlueprintContext.AutomationContext.TeleportCharTo
// 0x0020 (0x0020 - 0x0000)
struct AutomationContext_TeleportCharTo final
{
public:
	class AOrionChar*                             InChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_TeleportCharTo) == 0x000008, "Wrong alignment on AutomationContext_TeleportCharTo");
static_assert(sizeof(AutomationContext_TeleportCharTo) == 0x000020, "Wrong size on AutomationContext_TeleportCharTo");
static_assert(offsetof(AutomationContext_TeleportCharTo, InChar) == 0x000000, "Member 'AutomationContext_TeleportCharTo::InChar' has a wrong offset!");
static_assert(offsetof(AutomationContext_TeleportCharTo, DestLocation) == 0x000008, "Member 'AutomationContext_TeleportCharTo::DestLocation' has a wrong offset!");
static_assert(offsetof(AutomationContext_TeleportCharTo, DestRotation) == 0x000014, "Member 'AutomationContext_TeleportCharTo::DestRotation' has a wrong offset!");

// Function BlueprintContext.AutomationContext.ViewTarget
// 0x0008 (0x0008 - 0x0000)
struct AutomationContext_ViewTarget final
{
public:
	class AActor*                                 ActorToFace;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationContext_ViewTarget) == 0x000008, "Wrong alignment on AutomationContext_ViewTarget");
static_assert(sizeof(AutomationContext_ViewTarget) == 0x000008, "Wrong size on AutomationContext_ViewTarget");
static_assert(offsetof(AutomationContext_ViewTarget, ActorToFace) == 0x000000, "Member 'AutomationContext_ViewTarget::ActorToFace' has a wrong offset!");

// Function BlueprintContext.BannerContext.AddRandomAlterationsToSocket
// 0x0060 (0x0060 - 0x0000)
struct BannerContext_AddRandomAlterationsToSocket final
{
public:
	struct FSingleBannerEntry                     Socket;                                            // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         NumRandomAlterations;                              // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_AddRandomAlterationsToSocket) == 0x000008, "Wrong alignment on BannerContext_AddRandomAlterationsToSocket");
static_assert(sizeof(BannerContext_AddRandomAlterationsToSocket) == 0x000060, "Wrong size on BannerContext_AddRandomAlterationsToSocket");
static_assert(offsetof(BannerContext_AddRandomAlterationsToSocket, Socket) == 0x000000, "Member 'BannerContext_AddRandomAlterationsToSocket::Socket' has a wrong offset!");
static_assert(offsetof(BannerContext_AddRandomAlterationsToSocket, NumRandomAlterations) == 0x000058, "Member 'BannerContext_AddRandomAlterationsToSocket::NumRandomAlterations' has a wrong offset!");

// Function BlueprintContext.BannerContext.AddRandomItemToSocketSlot
// 0x0058 (0x0058 - 0x0000)
struct BannerContext_AddRandomItemToSocketSlot final
{
public:
	struct FSingleBannerEntry                     Socket;                                            // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_AddRandomItemToSocketSlot) == 0x000008, "Wrong alignment on BannerContext_AddRandomItemToSocketSlot");
static_assert(sizeof(BannerContext_AddRandomItemToSocketSlot) == 0x000058, "Wrong size on BannerContext_AddRandomItemToSocketSlot");
static_assert(offsetof(BannerContext_AddRandomItemToSocketSlot, Socket) == 0x000000, "Member 'BannerContext_AddRandomItemToSocketSlot::Socket' has a wrong offset!");

// Function BlueprintContext.BannerContext.CountOverlapAlterations
// 0x0050 (0x0050 - 0x0000)
struct BannerContext_CountOverlapAlterations final
{
public:
	struct FBannerItemIdent                       BannerItem;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_CountOverlapAlterations) == 0x000008, "Wrong alignment on BannerContext_CountOverlapAlterations");
static_assert(sizeof(BannerContext_CountOverlapAlterations) == 0x000050, "Wrong size on BannerContext_CountOverlapAlterations");
static_assert(offsetof(BannerContext_CountOverlapAlterations, BannerItem) == 0x000000, "Member 'BannerContext_CountOverlapAlterations::BannerItem' has a wrong offset!");
static_assert(offsetof(BannerContext_CountOverlapAlterations, ReturnValue) == 0x000048, "Member 'BannerContext_CountOverlapAlterations::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.CountValidAlterations
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_CountValidAlterations final
{
public:
	TArray<class FString>                         Alterations;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_CountValidAlterations) == 0x000008, "Wrong alignment on BannerContext_CountValidAlterations");
static_assert(sizeof(BannerContext_CountValidAlterations) == 0x000018, "Wrong size on BannerContext_CountValidAlterations");
static_assert(offsetof(BannerContext_CountValidAlterations, Alterations) == 0x000000, "Member 'BannerContext_CountValidAlterations::Alterations' has a wrong offset!");
static_assert(offsetof(BannerContext_CountValidAlterations, ReturnValue) == 0x000010, "Member 'BannerContext_CountValidAlterations::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.CreateDefaultBannerSpec
// 0x0070 (0x0070 - 0x0000)
struct BannerContext_CreateDefaultBannerSpec final
{
public:
	struct FBannerSpec                            DefaultBanner;                                     // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_CreateDefaultBannerSpec) == 0x000008, "Wrong alignment on BannerContext_CreateDefaultBannerSpec");
static_assert(sizeof(BannerContext_CreateDefaultBannerSpec) == 0x000070, "Wrong size on BannerContext_CreateDefaultBannerSpec");
static_assert(offsetof(BannerContext_CreateDefaultBannerSpec, DefaultBanner) == 0x000000, "Member 'BannerContext_CreateDefaultBannerSpec::DefaultBanner' has a wrong offset!");
static_assert(offsetof(BannerContext_CreateDefaultBannerSpec, ReturnValue) == 0x000068, "Member 'BannerContext_CreateDefaultBannerSpec::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.CreateRandomBannerSpec
// 0x0070 (0x0070 - 0x0000)
struct BannerContext_CreateRandomBannerSpec final
{
public:
	struct FBannerSpec                            RandomBanner;                                      // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_CreateRandomBannerSpec) == 0x000008, "Wrong alignment on BannerContext_CreateRandomBannerSpec");
static_assert(sizeof(BannerContext_CreateRandomBannerSpec) == 0x000070, "Wrong size on BannerContext_CreateRandomBannerSpec");
static_assert(offsetof(BannerContext_CreateRandomBannerSpec, RandomBanner) == 0x000000, "Member 'BannerContext_CreateRandomBannerSpec::RandomBanner' has a wrong offset!");
static_assert(offsetof(BannerContext_CreateRandomBannerSpec, ReturnValue) == 0x000068, "Member 'BannerContext_CreateRandomBannerSpec::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetMaxAlterations
// 0x0004 (0x0004 - 0x0000)
struct BannerContext_GetMaxAlterations final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetMaxAlterations) == 0x000004, "Wrong alignment on BannerContext_GetMaxAlterations");
static_assert(sizeof(BannerContext_GetMaxAlterations) == 0x000004, "Wrong size on BannerContext_GetMaxAlterations");
static_assert(offsetof(BannerContext_GetMaxAlterations, ReturnValue) == 0x000000, "Member 'BannerContext_GetMaxAlterations::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.IsValidAlteration
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_IsValidAlteration final
{
public:
	class FString                                 AlterationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_IsValidAlteration) == 0x000008, "Wrong alignment on BannerContext_IsValidAlteration");
static_assert(sizeof(BannerContext_IsValidAlteration) == 0x000018, "Wrong size on BannerContext_IsValidAlteration");
static_assert(offsetof(BannerContext_IsValidAlteration, AlterationId) == 0x000000, "Member 'BannerContext_IsValidAlteration::AlterationId' has a wrong offset!");
static_assert(offsetof(BannerContext_IsValidAlteration, ReturnValue) == 0x000010, "Member 'BannerContext_IsValidAlteration::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.BuildListOfExistingItemAllocations
// 0x0028 (0x0028 - 0x0000)
struct BannerContext_BuildListOfExistingItemAllocations final
{
public:
	const class UOrionMcpProfileAccount*          McpProfile;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBannerItemIdent>               AllocatedBannerIdents;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBannerItemIdent>               OwnedBannerItems;                                  // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_BuildListOfExistingItemAllocations) == 0x000008, "Wrong alignment on BannerContext_BuildListOfExistingItemAllocations");
static_assert(sizeof(BannerContext_BuildListOfExistingItemAllocations) == 0x000028, "Wrong size on BannerContext_BuildListOfExistingItemAllocations");
static_assert(offsetof(BannerContext_BuildListOfExistingItemAllocations, McpProfile) == 0x000000, "Member 'BannerContext_BuildListOfExistingItemAllocations::McpProfile' has a wrong offset!");
static_assert(offsetof(BannerContext_BuildListOfExistingItemAllocations, AllocatedBannerIdents) == 0x000008, "Member 'BannerContext_BuildListOfExistingItemAllocations::AllocatedBannerIdents' has a wrong offset!");
static_assert(offsetof(BannerContext_BuildListOfExistingItemAllocations, OwnedBannerItems) == 0x000018, "Member 'BannerContext_BuildListOfExistingItemAllocations::OwnedBannerItems' has a wrong offset!");

// Function BlueprintContext.BannerContext.FindActiveBanner
// 0x0010 (0x0010 - 0x0000)
struct BannerContext_FindActiveBanner final
{
public:
	const class UOrionMcpProfileAccount*          McpProfile;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionMcpBannerItem*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_FindActiveBanner) == 0x000008, "Wrong alignment on BannerContext_FindActiveBanner");
static_assert(sizeof(BannerContext_FindActiveBanner) == 0x000010, "Wrong size on BannerContext_FindActiveBanner");
static_assert(offsetof(BannerContext_FindActiveBanner, McpProfile) == 0x000000, "Member 'BannerContext_FindActiveBanner::McpProfile' has a wrong offset!");
static_assert(offsetof(BannerContext_FindActiveBanner, ReturnValue) == 0x000008, "Member 'BannerContext_FindActiveBanner::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GenerateBannerItemIDs
// 0x0080 (0x0080 - 0x0000)
struct BannerContext_GenerateBannerItemIDs final
{
public:
	class AOrionPlayerController_Game*            PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBannerItemIdent>               ItemIdents;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBannerSpec                            BannerEntry;                                       // 0x0018(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GenerateBannerItemIDs) == 0x000008, "Wrong alignment on BannerContext_GenerateBannerItemIDs");
static_assert(sizeof(BannerContext_GenerateBannerItemIDs) == 0x000080, "Wrong size on BannerContext_GenerateBannerItemIDs");
static_assert(offsetof(BannerContext_GenerateBannerItemIDs, PlayerController) == 0x000000, "Member 'BannerContext_GenerateBannerItemIDs::PlayerController' has a wrong offset!");
static_assert(offsetof(BannerContext_GenerateBannerItemIDs, ItemIdents) == 0x000008, "Member 'BannerContext_GenerateBannerItemIDs::ItemIdents' has a wrong offset!");
static_assert(offsetof(BannerContext_GenerateBannerItemIDs, BannerEntry) == 0x000018, "Member 'BannerContext_GenerateBannerItemIDs::BannerEntry' has a wrong offset!");

// Function BlueprintContext.BannerContext.GeneratePrototypeBannerItemIDs
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_GeneratePrototypeBannerItemIDs final
{
public:
	class AOrionPlayerController_Game*            PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBannerItemIdent>               ItemIdents;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GeneratePrototypeBannerItemIDs) == 0x000008, "Wrong alignment on BannerContext_GeneratePrototypeBannerItemIDs");
static_assert(sizeof(BannerContext_GeneratePrototypeBannerItemIDs) == 0x000018, "Wrong size on BannerContext_GeneratePrototypeBannerItemIDs");
static_assert(offsetof(BannerContext_GeneratePrototypeBannerItemIDs, PlayerController) == 0x000000, "Member 'BannerContext_GeneratePrototypeBannerItemIDs::PlayerController' has a wrong offset!");
static_assert(offsetof(BannerContext_GeneratePrototypeBannerItemIDs, ItemIdents) == 0x000008, "Member 'BannerContext_GeneratePrototypeBannerItemIDs::ItemIdents' has a wrong offset!");

// Function BlueprintContext.BannerContext.SetPrototypeSocketAlteration
// 0x0020 (0x0020 - 0x0000)
struct BannerContext_SetPrototypeSocketAlteration final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlterationIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ident;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_SetPrototypeSocketAlteration) == 0x000008, "Wrong alignment on BannerContext_SetPrototypeSocketAlteration");
static_assert(sizeof(BannerContext_SetPrototypeSocketAlteration) == 0x000020, "Wrong size on BannerContext_SetPrototypeSocketAlteration");
static_assert(offsetof(BannerContext_SetPrototypeSocketAlteration, SocketIndex) == 0x000000, "Member 'BannerContext_SetPrototypeSocketAlteration::SocketIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketAlteration, AlterationIndex) == 0x000004, "Member 'BannerContext_SetPrototypeSocketAlteration::AlterationIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketAlteration, Ident) == 0x000008, "Member 'BannerContext_SetPrototypeSocketAlteration::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketAlteration, SocketType) == 0x000018, "Member 'BannerContext_SetPrototypeSocketAlteration::SocketType' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketAlteration, ReturnValue) == 0x000019, "Member 'BannerContext_SetPrototypeSocketAlteration::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.SetPrototypeSocketIdent
// 0x0020 (0x0020 - 0x0000)
struct BannerContext_SetPrototypeSocketIdent final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ident;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_SetPrototypeSocketIdent) == 0x000008, "Wrong alignment on BannerContext_SetPrototypeSocketIdent");
static_assert(sizeof(BannerContext_SetPrototypeSocketIdent) == 0x000020, "Wrong size on BannerContext_SetPrototypeSocketIdent");
static_assert(offsetof(BannerContext_SetPrototypeSocketIdent, SocketIndex) == 0x000000, "Member 'BannerContext_SetPrototypeSocketIdent::SocketIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketIdent, Ident) == 0x000008, "Member 'BannerContext_SetPrototypeSocketIdent::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketIdent, SocketType) == 0x000018, "Member 'BannerContext_SetPrototypeSocketIdent::SocketType' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketIdent, ReturnValue) == 0x000019, "Member 'BannerContext_SetPrototypeSocketIdent::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.SetPrototypeSocketIdentFromArray
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_SetPrototypeSocketIdentFromArray final
{
public:
	TArray<class FString>                         SocketIdentArray;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_SetPrototypeSocketIdentFromArray) == 0x000008, "Wrong alignment on BannerContext_SetPrototypeSocketIdentFromArray");
static_assert(sizeof(BannerContext_SetPrototypeSocketIdentFromArray) == 0x000018, "Wrong size on BannerContext_SetPrototypeSocketIdentFromArray");
static_assert(offsetof(BannerContext_SetPrototypeSocketIdentFromArray, SocketIdentArray) == 0x000000, "Member 'BannerContext_SetPrototypeSocketIdentFromArray::SocketIdentArray' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeSocketIdentFromArray, SocketType) == 0x000010, "Member 'BannerContext_SetPrototypeSocketIdentFromArray::SocketType' has a wrong offset!");

// Function BlueprintContext.BannerContext.SetPrototypeStaffFromIdent
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_SetPrototypeStaffFromIdent final
{
public:
	class FString                                 BannerIdent;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetainSocketID;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_SetPrototypeStaffFromIdent) == 0x000008, "Wrong alignment on BannerContext_SetPrototypeStaffFromIdent");
static_assert(sizeof(BannerContext_SetPrototypeStaffFromIdent) == 0x000018, "Wrong size on BannerContext_SetPrototypeStaffFromIdent");
static_assert(offsetof(BannerContext_SetPrototypeStaffFromIdent, BannerIdent) == 0x000000, "Member 'BannerContext_SetPrototypeStaffFromIdent::BannerIdent' has a wrong offset!");
static_assert(offsetof(BannerContext_SetPrototypeStaffFromIdent, bRetainSocketID) == 0x000010, "Member 'BannerContext_SetPrototypeStaffFromIdent::bRetainSocketID' has a wrong offset!");

// Function BlueprintContext.BannerContext.SetupPrototypeFromDef
// 0x0008 (0x0008 - 0x0000)
struct BannerContext_SetupPrototypeFromDef final
{
public:
	class UOrionMcpBannerItemDefinition*          BannerSpec;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_SetupPrototypeFromDef) == 0x000008, "Wrong alignment on BannerContext_SetupPrototypeFromDef");
static_assert(sizeof(BannerContext_SetupPrototypeFromDef) == 0x000008, "Wrong size on BannerContext_SetupPrototypeFromDef");
static_assert(offsetof(BannerContext_SetupPrototypeFromDef, BannerSpec) == 0x000000, "Member 'BannerContext_SetupPrototypeFromDef::BannerSpec' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetBannerAlterationDisplayNameFromName
// 0x0020 (0x0020 - 0x0000)
struct BannerContext_GetBannerAlterationDisplayNameFromName final
{
public:
	class FString                                 Ident;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetBannerAlterationDisplayNameFromName) == 0x000008, "Wrong alignment on BannerContext_GetBannerAlterationDisplayNameFromName");
static_assert(sizeof(BannerContext_GetBannerAlterationDisplayNameFromName) == 0x000020, "Wrong size on BannerContext_GetBannerAlterationDisplayNameFromName");
static_assert(offsetof(BannerContext_GetBannerAlterationDisplayNameFromName, Ident) == 0x000000, "Member 'BannerContext_GetBannerAlterationDisplayNameFromName::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerAlterationDisplayNameFromName, ReturnValue) == 0x000010, "Member 'BannerContext_GetBannerAlterationDisplayNameFromName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetBannerAlterationNameFromDisplayName
// 0x0020 (0x0020 - 0x0000)
struct BannerContext_GetBannerAlterationNameFromDisplayName final
{
public:
	class FString                                 Ident;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetBannerAlterationNameFromDisplayName) == 0x000008, "Wrong alignment on BannerContext_GetBannerAlterationNameFromDisplayName");
static_assert(sizeof(BannerContext_GetBannerAlterationNameFromDisplayName) == 0x000020, "Wrong size on BannerContext_GetBannerAlterationNameFromDisplayName");
static_assert(offsetof(BannerContext_GetBannerAlterationNameFromDisplayName, Ident) == 0x000000, "Member 'BannerContext_GetBannerAlterationNameFromDisplayName::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerAlterationNameFromDisplayName, ReturnValue) == 0x000010, "Member 'BannerContext_GetBannerAlterationNameFromDisplayName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetBannerAlterationStrings
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_GetBannerAlterationStrings final
{
public:
	TArray<class FString>                         OutArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMustOwn;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetBannerAlterationStrings) == 0x000008, "Wrong alignment on BannerContext_GetBannerAlterationStrings");
static_assert(sizeof(BannerContext_GetBannerAlterationStrings) == 0x000018, "Wrong size on BannerContext_GetBannerAlterationStrings");
static_assert(offsetof(BannerContext_GetBannerAlterationStrings, OutArray) == 0x000000, "Member 'BannerContext_GetBannerAlterationStrings::OutArray' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerAlterationStrings, bMustOwn) == 0x000010, "Member 'BannerContext_GetBannerAlterationStrings::bMustOwn' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetBannerItemDisplayNameFromName
// 0x0028 (0x0028 - 0x0000)
struct BannerContext_GetBannerItemDisplayNameFromName final
{
public:
	EOrionBannerType                              ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ident;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetBannerItemDisplayNameFromName) == 0x000008, "Wrong alignment on BannerContext_GetBannerItemDisplayNameFromName");
static_assert(sizeof(BannerContext_GetBannerItemDisplayNameFromName) == 0x000028, "Wrong size on BannerContext_GetBannerItemDisplayNameFromName");
static_assert(offsetof(BannerContext_GetBannerItemDisplayNameFromName, ItemType) == 0x000000, "Member 'BannerContext_GetBannerItemDisplayNameFromName::ItemType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemDisplayNameFromName, Ident) == 0x000008, "Member 'BannerContext_GetBannerItemDisplayNameFromName::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemDisplayNameFromName, ReturnValue) == 0x000018, "Member 'BannerContext_GetBannerItemDisplayNameFromName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetBannerItemNameFromDisplayName
// 0x0028 (0x0028 - 0x0000)
struct BannerContext_GetBannerItemNameFromDisplayName final
{
public:
	EOrionBannerType                              ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ident;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetBannerItemNameFromDisplayName) == 0x000008, "Wrong alignment on BannerContext_GetBannerItemNameFromDisplayName");
static_assert(sizeof(BannerContext_GetBannerItemNameFromDisplayName) == 0x000028, "Wrong size on BannerContext_GetBannerItemNameFromDisplayName");
static_assert(offsetof(BannerContext_GetBannerItemNameFromDisplayName, ItemType) == 0x000000, "Member 'BannerContext_GetBannerItemNameFromDisplayName::ItemType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemNameFromDisplayName, Ident) == 0x000008, "Member 'BannerContext_GetBannerItemNameFromDisplayName::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemNameFromDisplayName, ReturnValue) == 0x000018, "Member 'BannerContext_GetBannerItemNameFromDisplayName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetBannerItemsOfType
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_GetBannerItemsOfType final
{
public:
	EOrionBannerType                              ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UOrionMcpBannerItemDefinition*>  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetBannerItemsOfType) == 0x000008, "Wrong alignment on BannerContext_GetBannerItemsOfType");
static_assert(sizeof(BannerContext_GetBannerItemsOfType) == 0x000018, "Wrong size on BannerContext_GetBannerItemsOfType");
static_assert(offsetof(BannerContext_GetBannerItemsOfType, ItemType) == 0x000000, "Member 'BannerContext_GetBannerItemsOfType::ItemType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemsOfType, ReturnValue) == 0x000008, "Member 'BannerContext_GetBannerItemsOfType::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetBannerItemStringsOfType
// 0x0020 (0x0020 - 0x0000)
struct BannerContext_GetBannerItemStringsOfType final
{
public:
	EOrionBannerType                              ItemTypes;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutArray;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMustOwn;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetBannerItemStringsOfType) == 0x000008, "Wrong alignment on BannerContext_GetBannerItemStringsOfType");
static_assert(sizeof(BannerContext_GetBannerItemStringsOfType) == 0x000020, "Wrong size on BannerContext_GetBannerItemStringsOfType");
static_assert(offsetof(BannerContext_GetBannerItemStringsOfType, ItemTypes) == 0x000000, "Member 'BannerContext_GetBannerItemStringsOfType::ItemTypes' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemStringsOfType, OutArray) == 0x000008, "Member 'BannerContext_GetBannerItemStringsOfType::OutArray' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemStringsOfType, bMustOwn) == 0x000018, "Member 'BannerContext_GetBannerItemStringsOfType::bMustOwn' has a wrong offset!");
static_assert(offsetof(BannerContext_GetBannerItemStringsOfType, ReturnValue) == 0x000019, "Member 'BannerContext_GetBannerItemStringsOfType::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetDisplayNameFromName
// 0x0028 (0x0028 - 0x0000)
struct BannerContext_GetDisplayNameFromName final
{
public:
	EOrionBannerType                              ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ident;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetDisplayNameFromName) == 0x000008, "Wrong alignment on BannerContext_GetDisplayNameFromName");
static_assert(sizeof(BannerContext_GetDisplayNameFromName) == 0x000028, "Wrong size on BannerContext_GetDisplayNameFromName");
static_assert(offsetof(BannerContext_GetDisplayNameFromName, ItemType) == 0x000000, "Member 'BannerContext_GetDisplayNameFromName::ItemType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetDisplayNameFromName, Ident) == 0x000008, "Member 'BannerContext_GetDisplayNameFromName::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_GetDisplayNameFromName, ReturnValue) == 0x000018, "Member 'BannerContext_GetDisplayNameFromName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetNameFromDisplayName
// 0x0028 (0x0028 - 0x0000)
struct BannerContext_GetNameFromDisplayName final
{
public:
	EOrionBannerType                              ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ident;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetNameFromDisplayName) == 0x000008, "Wrong alignment on BannerContext_GetNameFromDisplayName");
static_assert(sizeof(BannerContext_GetNameFromDisplayName) == 0x000028, "Wrong size on BannerContext_GetNameFromDisplayName");
static_assert(offsetof(BannerContext_GetNameFromDisplayName, ItemType) == 0x000000, "Member 'BannerContext_GetNameFromDisplayName::ItemType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetNameFromDisplayName, Ident) == 0x000008, "Member 'BannerContext_GetNameFromDisplayName::Ident' has a wrong offset!");
static_assert(offsetof(BannerContext_GetNameFromDisplayName, ReturnValue) == 0x000018, "Member 'BannerContext_GetNameFromDisplayName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetNumAlterationsOnPrototypeSocket
// 0x000C (0x000C - 0x0000)
struct BannerContext_GetNumAlterationsOnPrototypeSocket final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetNumAlterationsOnPrototypeSocket) == 0x000004, "Wrong alignment on BannerContext_GetNumAlterationsOnPrototypeSocket");
static_assert(sizeof(BannerContext_GetNumAlterationsOnPrototypeSocket) == 0x00000C, "Wrong size on BannerContext_GetNumAlterationsOnPrototypeSocket");
static_assert(offsetof(BannerContext_GetNumAlterationsOnPrototypeSocket, SocketIndex) == 0x000000, "Member 'BannerContext_GetNumAlterationsOnPrototypeSocket::SocketIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_GetNumAlterationsOnPrototypeSocket, SocketType) == 0x000004, "Member 'BannerContext_GetNumAlterationsOnPrototypeSocket::SocketType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetNumAlterationsOnPrototypeSocket, ReturnValue) == 0x000008, "Member 'BannerContext_GetNumAlterationsOnPrototypeSocket::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetNumSockets
// 0x0070 (0x0070 - 0x0000)
struct BannerContext_GetNumSockets final
{
public:
	struct FBannerSpec                            BannerEntry;                                       // 0x0000(0x0068)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetNumSockets) == 0x000008, "Wrong alignment on BannerContext_GetNumSockets");
static_assert(sizeof(BannerContext_GetNumSockets) == 0x000070, "Wrong size on BannerContext_GetNumSockets");
static_assert(offsetof(BannerContext_GetNumSockets, BannerEntry) == 0x000000, "Member 'BannerContext_GetNumSockets::BannerEntry' has a wrong offset!");
static_assert(offsetof(BannerContext_GetNumSockets, ReturnValue) == 0x000068, "Member 'BannerContext_GetNumSockets::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetNumSocketsOfType
// 0x0070 (0x0070 - 0x0000)
struct BannerContext_GetNumSocketsOfType final
{
public:
	struct FBannerSpec                            BannerEntry;                                       // 0x0000(0x0068)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EOrionBannerType                              ItemType;                                          // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x006C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetNumSocketsOfType) == 0x000008, "Wrong alignment on BannerContext_GetNumSocketsOfType");
static_assert(sizeof(BannerContext_GetNumSocketsOfType) == 0x000070, "Wrong size on BannerContext_GetNumSocketsOfType");
static_assert(offsetof(BannerContext_GetNumSocketsOfType, BannerEntry) == 0x000000, "Member 'BannerContext_GetNumSocketsOfType::BannerEntry' has a wrong offset!");
static_assert(offsetof(BannerContext_GetNumSocketsOfType, ItemType) == 0x000068, "Member 'BannerContext_GetNumSocketsOfType::ItemType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetNumSocketsOfType, ReturnValue) == 0x00006C, "Member 'BannerContext_GetNumSocketsOfType::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetOwnedIDBannerItem
// 0x0070 (0x0070 - 0x0000)
struct BannerContext_GetOwnedIDBannerItem final
{
public:
	TArray<class UOrionMcpBannerItem*>            Banners;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InItemIdent;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBannerItemIdent                       OutItemID;                                         // 0x0020(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetOwnedIDBannerItem) == 0x000008, "Wrong alignment on BannerContext_GetOwnedIDBannerItem");
static_assert(sizeof(BannerContext_GetOwnedIDBannerItem) == 0x000070, "Wrong size on BannerContext_GetOwnedIDBannerItem");
static_assert(offsetof(BannerContext_GetOwnedIDBannerItem, Banners) == 0x000000, "Member 'BannerContext_GetOwnedIDBannerItem::Banners' has a wrong offset!");
static_assert(offsetof(BannerContext_GetOwnedIDBannerItem, InItemIdent) == 0x000010, "Member 'BannerContext_GetOwnedIDBannerItem::InItemIdent' has a wrong offset!");
static_assert(offsetof(BannerContext_GetOwnedIDBannerItem, OutItemID) == 0x000020, "Member 'BannerContext_GetOwnedIDBannerItem::OutItemID' has a wrong offset!");
static_assert(offsetof(BannerContext_GetOwnedIDBannerItem, ReturnValue) == 0x000068, "Member 'BannerContext_GetOwnedIDBannerItem::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetPrototypeAlterationIdentArray
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_GetPrototypeAlterationIdentArray final
{
public:
	TArray<class FString>                         AlterationIdentArray;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetPrototypeAlterationIdentArray) == 0x000008, "Wrong alignment on BannerContext_GetPrototypeAlterationIdentArray");
static_assert(sizeof(BannerContext_GetPrototypeAlterationIdentArray) == 0x000018, "Wrong size on BannerContext_GetPrototypeAlterationIdentArray");
static_assert(offsetof(BannerContext_GetPrototypeAlterationIdentArray, AlterationIdentArray) == 0x000000, "Member 'BannerContext_GetPrototypeAlterationIdentArray::AlterationIdentArray' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeAlterationIdentArray, SocketIndex) == 0x000010, "Member 'BannerContext_GetPrototypeAlterationIdentArray::SocketIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeAlterationIdentArray, SocketType) == 0x000014, "Member 'BannerContext_GetPrototypeAlterationIdentArray::SocketType' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetPrototypeSocketAlteration
// 0x0020 (0x0020 - 0x0000)
struct BannerContext_GetPrototypeSocketAlteration final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlterationIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SocketIdent;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetPrototypeSocketAlteration) == 0x000008, "Wrong alignment on BannerContext_GetPrototypeSocketAlteration");
static_assert(sizeof(BannerContext_GetPrototypeSocketAlteration) == 0x000020, "Wrong size on BannerContext_GetPrototypeSocketAlteration");
static_assert(offsetof(BannerContext_GetPrototypeSocketAlteration, SocketIndex) == 0x000000, "Member 'BannerContext_GetPrototypeSocketAlteration::SocketIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketAlteration, AlterationIndex) == 0x000004, "Member 'BannerContext_GetPrototypeSocketAlteration::AlterationIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketAlteration, SocketIdent) == 0x000008, "Member 'BannerContext_GetPrototypeSocketAlteration::SocketIdent' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketAlteration, SocketType) == 0x000018, "Member 'BannerContext_GetPrototypeSocketAlteration::SocketType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketAlteration, ReturnValue) == 0x000019, "Member 'BannerContext_GetPrototypeSocketAlteration::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetPrototypeSocketIdent
// 0x0020 (0x0020 - 0x0000)
struct BannerContext_GetPrototypeSocketIdent final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketIdent;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetPrototypeSocketIdent) == 0x000008, "Wrong alignment on BannerContext_GetPrototypeSocketIdent");
static_assert(sizeof(BannerContext_GetPrototypeSocketIdent) == 0x000020, "Wrong size on BannerContext_GetPrototypeSocketIdent");
static_assert(offsetof(BannerContext_GetPrototypeSocketIdent, SocketIndex) == 0x000000, "Member 'BannerContext_GetPrototypeSocketIdent::SocketIndex' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketIdent, SocketIdent) == 0x000008, "Member 'BannerContext_GetPrototypeSocketIdent::SocketIdent' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketIdent, SocketType) == 0x000018, "Member 'BannerContext_GetPrototypeSocketIdent::SocketType' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketIdent, ReturnValue) == 0x000019, "Member 'BannerContext_GetPrototypeSocketIdent::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetPrototypeSocketIdentArray
// 0x0018 (0x0018 - 0x0000)
struct BannerContext_GetPrototypeSocketIdentArray final
{
public:
	TArray<class FString>                         SocketIdentArray;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EOrionBannerType                              SocketType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_GetPrototypeSocketIdentArray) == 0x000008, "Wrong alignment on BannerContext_GetPrototypeSocketIdentArray");
static_assert(sizeof(BannerContext_GetPrototypeSocketIdentArray) == 0x000018, "Wrong size on BannerContext_GetPrototypeSocketIdentArray");
static_assert(offsetof(BannerContext_GetPrototypeSocketIdentArray, SocketIdentArray) == 0x000000, "Member 'BannerContext_GetPrototypeSocketIdentArray::SocketIdentArray' has a wrong offset!");
static_assert(offsetof(BannerContext_GetPrototypeSocketIdentArray, SocketType) == 0x000010, "Member 'BannerContext_GetPrototypeSocketIdentArray::SocketType' has a wrong offset!");

// Function BlueprintContext.BannerContext.GetProtoypeBanner
// 0x0068 (0x0068 - 0x0000)
struct BannerContext_GetProtoypeBanner final
{
public:
	struct FBannerSpec                            BannerSpec;                                        // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BannerContext_GetProtoypeBanner) == 0x000008, "Wrong alignment on BannerContext_GetProtoypeBanner");
static_assert(sizeof(BannerContext_GetProtoypeBanner) == 0x000068, "Wrong size on BannerContext_GetProtoypeBanner");
static_assert(offsetof(BannerContext_GetProtoypeBanner, BannerSpec) == 0x000000, "Member 'BannerContext_GetProtoypeBanner::BannerSpec' has a wrong offset!");

// Function BlueprintContext.BannerContext.SetupBannerSocketFromIdent
// 0x0070 (0x0070 - 0x0000)
struct BannerContext_SetupBannerSocketFromIdent final
{
public:
	struct FSingleBannerEntry                     Socket;                                            // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 BannerIdent;                                       // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetainSocketID;                                   // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BannerContext_SetupBannerSocketFromIdent) == 0x000008, "Wrong alignment on BannerContext_SetupBannerSocketFromIdent");
static_assert(sizeof(BannerContext_SetupBannerSocketFromIdent) == 0x000070, "Wrong size on BannerContext_SetupBannerSocketFromIdent");
static_assert(offsetof(BannerContext_SetupBannerSocketFromIdent, Socket) == 0x000000, "Member 'BannerContext_SetupBannerSocketFromIdent::Socket' has a wrong offset!");
static_assert(offsetof(BannerContext_SetupBannerSocketFromIdent, BannerIdent) == 0x000058, "Member 'BannerContext_SetupBannerSocketFromIdent::BannerIdent' has a wrong offset!");
static_assert(offsetof(BannerContext_SetupBannerSocketFromIdent, bRetainSocketID) == 0x000068, "Member 'BannerContext_SetupBannerSocketFromIdent::bRetainSocketID' has a wrong offset!");
static_assert(offsetof(BannerContext_SetupBannerSocketFromIdent, ReturnValue) == 0x000069, "Member 'BannerContext_SetupBannerSocketFromIdent::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.ChangeMenuOpenState
// 0x0002 (0x0002 - 0x0000)
struct BaseHUDContext_ChangeMenuOpenState final
{
public:
	EOrionMenuSlotTypes                           MenuSlot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewlyOpen;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_ChangeMenuOpenState) == 0x000001, "Wrong alignment on BaseHUDContext_ChangeMenuOpenState");
static_assert(sizeof(BaseHUDContext_ChangeMenuOpenState) == 0x000002, "Wrong size on BaseHUDContext_ChangeMenuOpenState");
static_assert(offsetof(BaseHUDContext_ChangeMenuOpenState, MenuSlot) == 0x000000, "Member 'BaseHUDContext_ChangeMenuOpenState::MenuSlot' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_ChangeMenuOpenState, bNewlyOpen) == 0x000001, "Member 'BaseHUDContext_ChangeMenuOpenState::bNewlyOpen' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetCurrentMatchTime
// 0x0004 (0x0004 - 0x0000)
struct BaseHUDContext_GetCurrentMatchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetCurrentMatchTime) == 0x000004, "Wrong alignment on BaseHUDContext_GetCurrentMatchTime");
static_assert(sizeof(BaseHUDContext_GetCurrentMatchTime) == 0x000004, "Wrong size on BaseHUDContext_GetCurrentMatchTime");
static_assert(offsetof(BaseHUDContext_GetCurrentMatchTime, ReturnValue) == 0x000000, "Member 'BaseHUDContext_GetCurrentMatchTime::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnAbilityFinishedCooldown__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature final
{
public:
	EOrionAbilityBinding                          InputID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrionAbilityUIData                    AbilityData;                                       // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature) == 0x000008, "Wrong alignment on BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature) == 0x0000C8, "Wrong size on BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature, InputID) == 0x000000, "Member 'BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature::InputID' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature, AbilityData) == 0x000008, "Member 'BaseHUDContext_OnAbilityFinishedCooldown__DelegateSignature::AbilityData' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnAbilityUnlocked__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct BaseHUDContext_OnAbilityUnlocked__DelegateSignature final
{
public:
	EOrionAbilityBinding                          InputID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrionAbilityUIData                    AbilityData;                                       // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnAbilityUnlocked__DelegateSignature) == 0x000008, "Wrong alignment on BaseHUDContext_OnAbilityUnlocked__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnAbilityUnlocked__DelegateSignature) == 0x0000C8, "Wrong size on BaseHUDContext_OnAbilityUnlocked__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnAbilityUnlocked__DelegateSignature, InputID) == 0x000000, "Member 'BaseHUDContext_OnAbilityUnlocked__DelegateSignature::InputID' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnAbilityUnlocked__DelegateSignature, AbilityData) == 0x000008, "Member 'BaseHUDContext_OnAbilityUnlocked__DelegateSignature::AbilityData' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnAbilityUpdate__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct BaseHUDContext_OnAbilityUpdate__DelegateSignature final
{
public:
	EOrionAbilityBinding                          InputID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrionAbilityUIData                    AbilityData;                                       // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnAbilityUpdate__DelegateSignature) == 0x000008, "Wrong alignment on BaseHUDContext_OnAbilityUpdate__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnAbilityUpdate__DelegateSignature) == 0x0000C8, "Wrong size on BaseHUDContext_OnAbilityUpdate__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnAbilityUpdate__DelegateSignature, InputID) == 0x000000, "Member 'BaseHUDContext_OnAbilityUpdate__DelegateSignature::InputID' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnAbilityUpdate__DelegateSignature, AbilityData) == 0x000008, "Member 'BaseHUDContext_OnAbilityUpdate__DelegateSignature::AbilityData' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnCannotActivateAbility__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct BaseHUDContext_OnCannotActivateAbility__DelegateSignature final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnCannotActivateAbility__DelegateSignature) == 0x000008, "Wrong alignment on BaseHUDContext_OnCannotActivateAbility__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnCannotActivateAbility__DelegateSignature) == 0x000028, "Wrong size on BaseHUDContext_OnCannotActivateAbility__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnCannotActivateAbility__DelegateSignature, InputID) == 0x000000, "Member 'BaseHUDContext_OnCannotActivateAbility__DelegateSignature::InputID' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnCannotActivateAbility__DelegateSignature, RelevantTags) == 0x000008, "Member 'BaseHUDContext_OnCannotActivateAbility__DelegateSignature::RelevantTags' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnCardPointsUpdated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BaseHUDContext_OnCardPointsUpdated__DelegateSignature final
{
public:
	int32                                         NewCardActivationPointsSpent;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCardActivationPointsMax;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnCardPointsUpdated__DelegateSignature) == 0x000004, "Wrong alignment on BaseHUDContext_OnCardPointsUpdated__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnCardPointsUpdated__DelegateSignature) == 0x000008, "Wrong size on BaseHUDContext_OnCardPointsUpdated__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnCardPointsUpdated__DelegateSignature, NewCardActivationPointsSpent) == 0x000000, "Member 'BaseHUDContext_OnCardPointsUpdated__DelegateSignature::NewCardActivationPointsSpent' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnCardPointsUpdated__DelegateSignature, NewCardActivationPointsMax) == 0x000004, "Member 'BaseHUDContext_OnCardPointsUpdated__DelegateSignature::NewCardActivationPointsMax' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnCardXPUpdate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BaseHUDContext_OnCardXPUpdate__DelegateSignature final
{
public:
	float                                         NewXP;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewXPMax;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnCardXPUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BaseHUDContext_OnCardXPUpdate__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnCardXPUpdate__DelegateSignature) == 0x000008, "Wrong size on BaseHUDContext_OnCardXPUpdate__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnCardXPUpdate__DelegateSignature, NewXP) == 0x000000, "Member 'BaseHUDContext_OnCardXPUpdate__DelegateSignature::NewXP' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnCardXPUpdate__DelegateSignature, NewXPMax) == 0x000004, "Member 'BaseHUDContext_OnCardXPUpdate__DelegateSignature::NewXPMax' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnHeroDeathOrSpawnEvent__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct BaseHUDContext_OnHeroDeathOrSpawnEvent__DelegateSignature final
{
public:
	struct FOrionHUDTeamStatusInfo                NewTeamInfo;                                       // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnHeroDeathOrSpawnEvent__DelegateSignature) == 0x000008, "Wrong alignment on BaseHUDContext_OnHeroDeathOrSpawnEvent__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnHeroDeathOrSpawnEvent__DelegateSignature) == 0x000068, "Wrong size on BaseHUDContext_OnHeroDeathOrSpawnEvent__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnHeroDeathOrSpawnEvent__DelegateSignature, NewTeamInfo) == 0x000000, "Member 'BaseHUDContext_OnHeroDeathOrSpawnEvent__DelegateSignature::NewTeamInfo' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnKDAUpdate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BaseHUDContext_OnKDAUpdate__DelegateSignature final
{
public:
	int32                                         Kills;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deaths;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assists;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minions;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnKDAUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BaseHUDContext_OnKDAUpdate__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnKDAUpdate__DelegateSignature) == 0x000010, "Wrong size on BaseHUDContext_OnKDAUpdate__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnKDAUpdate__DelegateSignature, Kills) == 0x000000, "Member 'BaseHUDContext_OnKDAUpdate__DelegateSignature::Kills' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnKDAUpdate__DelegateSignature, Deaths) == 0x000004, "Member 'BaseHUDContext_OnKDAUpdate__DelegateSignature::Deaths' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnKDAUpdate__DelegateSignature, Assists) == 0x000008, "Member 'BaseHUDContext_OnKDAUpdate__DelegateSignature::Assists' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnKDAUpdate__DelegateSignature, Minions) == 0x00000C, "Member 'BaseHUDContext_OnKDAUpdate__DelegateSignature::Minions' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnLevelUp__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BaseHUDContext_OnLevelUp__DelegateSignature final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnLevelUp__DelegateSignature) == 0x000004, "Wrong alignment on BaseHUDContext_OnLevelUp__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnLevelUp__DelegateSignature) == 0x000004, "Wrong size on BaseHUDContext_OnLevelUp__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnLevelUp__DelegateSignature, NewLevel) == 0x000000, "Member 'BaseHUDContext_OnLevelUp__DelegateSignature::NewLevel' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnPlayerXPUpdate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BaseHUDContext_OnPlayerXPUpdate__DelegateSignature final
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxXP;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnPlayerXPUpdate__DelegateSignature) == 0x000004, "Wrong alignment on BaseHUDContext_OnPlayerXPUpdate__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnPlayerXPUpdate__DelegateSignature) == 0x000008, "Wrong size on BaseHUDContext_OnPlayerXPUpdate__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnPlayerXPUpdate__DelegateSignature, XP) == 0x000000, "Member 'BaseHUDContext_OnPlayerXPUpdate__DelegateSignature::XP' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_OnPlayerXPUpdate__DelegateSignature, MaxXP) == 0x000004, "Member 'BaseHUDContext_OnPlayerXPUpdate__DelegateSignature::MaxXP' has a wrong offset!");

// DelegateFunction BlueprintContext.BaseHUDContext.OnUltimateReady__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BaseHUDContext_OnUltimateReady__DelegateSignature final
{
public:
	int32                                         InputID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_OnUltimateReady__DelegateSignature) == 0x000004, "Wrong alignment on BaseHUDContext_OnUltimateReady__DelegateSignature");
static_assert(sizeof(BaseHUDContext_OnUltimateReady__DelegateSignature) == 0x000004, "Wrong size on BaseHUDContext_OnUltimateReady__DelegateSignature");
static_assert(offsetof(BaseHUDContext_OnUltimateReady__DelegateSignature, InputID) == 0x000000, "Member 'BaseHUDContext_OnUltimateReady__DelegateSignature::InputID' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.QueueHUDAlert
// 0x0008 (0x0008 - 0x0000)
struct BaseHUDContext_QueueHUDAlert final
{
public:
	const class UHUDAlertAsset*                   AlertAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_QueueHUDAlert) == 0x000008, "Wrong alignment on BaseHUDContext_QueueHUDAlert");
static_assert(sizeof(BaseHUDContext_QueueHUDAlert) == 0x000008, "Wrong size on BaseHUDContext_QueueHUDAlert");
static_assert(offsetof(BaseHUDContext_QueueHUDAlert, AlertAsset) == 0x000000, "Member 'BaseHUDContext_QueueHUDAlert::AlertAsset' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.SetMatchInfoText
// 0x0018 (0x0018 - 0x0000)
struct BaseHUDContext_SetMatchInfoText final
{
public:
	class FText                                   NewMatchInfoText;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_SetMatchInfoText) == 0x000008, "Wrong alignment on BaseHUDContext_SetMatchInfoText");
static_assert(sizeof(BaseHUDContext_SetMatchInfoText) == 0x000018, "Wrong size on BaseHUDContext_SetMatchInfoText");
static_assert(offsetof(BaseHUDContext_SetMatchInfoText, NewMatchInfoText) == 0x000000, "Member 'BaseHUDContext_SetMatchInfoText::NewMatchInfoText' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.SetMatchInfoTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct BaseHUDContext_SetMatchInfoTextVisibility final
{
public:
	bool                                          bIsNewlyVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_SetMatchInfoTextVisibility) == 0x000001, "Wrong alignment on BaseHUDContext_SetMatchInfoTextVisibility");
static_assert(sizeof(BaseHUDContext_SetMatchInfoTextVisibility) == 0x000001, "Wrong size on BaseHUDContext_SetMatchInfoTextVisibility");
static_assert(offsetof(BaseHUDContext_SetMatchInfoTextVisibility, bIsNewlyVisible) == 0x000000, "Member 'BaseHUDContext_SetMatchInfoTextVisibility::bIsNewlyVisible' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetAbilityData
// 0x00C8 (0x00C8 - 0x0000)
struct BaseHUDContext_GetAbilityData final
{
public:
	EOrionAbilityBinding                          InputID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrionAbilityUIData                    ReturnValue;                                       // 0x0008(0x00C0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetAbilityData) == 0x000008, "Wrong alignment on BaseHUDContext_GetAbilityData");
static_assert(sizeof(BaseHUDContext_GetAbilityData) == 0x0000C8, "Wrong size on BaseHUDContext_GetAbilityData");
static_assert(offsetof(BaseHUDContext_GetAbilityData, InputID) == 0x000000, "Member 'BaseHUDContext_GetAbilityData::InputID' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_GetAbilityData, ReturnValue) == 0x000008, "Member 'BaseHUDContext_GetAbilityData::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetCoreInfo
// 0x002C (0x002C - 0x0000)
struct BaseHUDContext_GetCoreInfo final
{
public:
	EOrionTeam                                    TeamNum;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrionCoreInfo                         ReturnValue;                                       // 0x0004(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetCoreInfo) == 0x000004, "Wrong alignment on BaseHUDContext_GetCoreInfo");
static_assert(sizeof(BaseHUDContext_GetCoreInfo) == 0x00002C, "Wrong size on BaseHUDContext_GetCoreInfo");
static_assert(offsetof(BaseHUDContext_GetCoreInfo, TeamNum) == 0x000000, "Member 'BaseHUDContext_GetCoreInfo::TeamNum' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_GetCoreInfo, ReturnValue) == 0x000004, "Member 'BaseHUDContext_GetCoreInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetCurrentMenu
// 0x0001 (0x0001 - 0x0000)
struct BaseHUDContext_GetCurrentMenu final
{
public:
	EOrionMenuSlotTypes                           ActiveMenu;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetCurrentMenu) == 0x000001, "Wrong alignment on BaseHUDContext_GetCurrentMenu");
static_assert(sizeof(BaseHUDContext_GetCurrentMenu) == 0x000001, "Wrong size on BaseHUDContext_GetCurrentMenu");
static_assert(offsetof(BaseHUDContext_GetCurrentMenu, ActiveMenu) == 0x000000, "Member 'BaseHUDContext_GetCurrentMenu::ActiveMenu' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetEnemyTeam
// 0x0001 (0x0001 - 0x0000)
struct BaseHUDContext_GetEnemyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetEnemyTeam) == 0x000001, "Wrong alignment on BaseHUDContext_GetEnemyTeam");
static_assert(sizeof(BaseHUDContext_GetEnemyTeam) == 0x000001, "Wrong size on BaseHUDContext_GetEnemyTeam");
static_assert(offsetof(BaseHUDContext_GetEnemyTeam, ReturnValue) == 0x000000, "Member 'BaseHUDContext_GetEnemyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetHUDPlayerInfo
// 0x0070 (0x0070 - 0x0000)
struct BaseHUDContext_GetHUDPlayerInfo final
{
public:
	struct FOrionBaseHUDPlayerInfo                ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetHUDPlayerInfo) == 0x000008, "Wrong alignment on BaseHUDContext_GetHUDPlayerInfo");
static_assert(sizeof(BaseHUDContext_GetHUDPlayerInfo) == 0x000070, "Wrong size on BaseHUDContext_GetHUDPlayerInfo");
static_assert(offsetof(BaseHUDContext_GetHUDPlayerInfo, ReturnValue) == 0x000000, "Member 'BaseHUDContext_GetHUDPlayerInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetIsMenuVisible
// 0x0002 (0x0002 - 0x0000)
struct BaseHUDContext_GetIsMenuVisible final
{
public:
	EOrionMenuSlotTypes                           MenuType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetIsMenuVisible) == 0x000001, "Wrong alignment on BaseHUDContext_GetIsMenuVisible");
static_assert(sizeof(BaseHUDContext_GetIsMenuVisible) == 0x000002, "Wrong size on BaseHUDContext_GetIsMenuVisible");
static_assert(offsetof(BaseHUDContext_GetIsMenuVisible, MenuType) == 0x000000, "Member 'BaseHUDContext_GetIsMenuVisible::MenuType' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_GetIsMenuVisible, ReturnValue) == 0x000001, "Member 'BaseHUDContext_GetIsMenuVisible::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetMenuExists
// 0x0002 (0x0002 - 0x0000)
struct BaseHUDContext_GetMenuExists final
{
public:
	EOrionMenuSlotTypes                           MenuType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetMenuExists) == 0x000001, "Wrong alignment on BaseHUDContext_GetMenuExists");
static_assert(sizeof(BaseHUDContext_GetMenuExists) == 0x000002, "Wrong size on BaseHUDContext_GetMenuExists");
static_assert(offsetof(BaseHUDContext_GetMenuExists, MenuType) == 0x000000, "Member 'BaseHUDContext_GetMenuExists::MenuType' has a wrong offset!");
static_assert(offsetof(BaseHUDContext_GetMenuExists, ReturnValue) == 0x000001, "Member 'BaseHUDContext_GetMenuExists::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetMyTeam
// 0x0001 (0x0001 - 0x0000)
struct BaseHUDContext_GetMyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetMyTeam) == 0x000001, "Wrong alignment on BaseHUDContext_GetMyTeam");
static_assert(sizeof(BaseHUDContext_GetMyTeam) == 0x000001, "Wrong size on BaseHUDContext_GetMyTeam");
static_assert(offsetof(BaseHUDContext_GetMyTeam, ReturnValue) == 0x000000, "Member 'BaseHUDContext_GetMyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetTopOpenMenu
// 0x0008 (0x0008 - 0x0000)
struct BaseHUDContext_GetTopOpenMenu final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetTopOpenMenu) == 0x000008, "Wrong alignment on BaseHUDContext_GetTopOpenMenu");
static_assert(sizeof(BaseHUDContext_GetTopOpenMenu) == 0x000008, "Wrong size on BaseHUDContext_GetTopOpenMenu");
static_assert(offsetof(BaseHUDContext_GetTopOpenMenu, ReturnValue) == 0x000000, "Member 'BaseHUDContext_GetTopOpenMenu::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.GetTopOpenMenuInputMode
// 0x0001 (0x0001 - 0x0000)
struct BaseHUDContext_GetTopOpenMenuInputMode final
{
public:
	EOrionDesiredAnalogCursorState                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_GetTopOpenMenuInputMode) == 0x000001, "Wrong alignment on BaseHUDContext_GetTopOpenMenuInputMode");
static_assert(sizeof(BaseHUDContext_GetTopOpenMenuInputMode) == 0x000001, "Wrong size on BaseHUDContext_GetTopOpenMenuInputMode");
static_assert(offsetof(BaseHUDContext_GetTopOpenMenuInputMode, ReturnValue) == 0x000000, "Member 'BaseHUDContext_GetTopOpenMenuInputMode::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BaseHUDContext.IsUltimateReady
// 0x0001 (0x0001 - 0x0000)
struct BaseHUDContext_IsUltimateReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseHUDContext_IsUltimateReady) == 0x000001, "Wrong alignment on BaseHUDContext_IsUltimateReady");
static_assert(sizeof(BaseHUDContext_IsUltimateReady) == 0x000001, "Wrong size on BaseHUDContext_IsUltimateReady");
static_assert(offsetof(BaseHUDContext_IsUltimateReady, ReturnValue) == 0x000000, "Member 'BaseHUDContext_IsUltimateReady::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BlueprintContextLibrary.GetContext
// 0x0018 (0x0018 - 0x0000)
struct BlueprintContextLibrary_GetContext final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBlueprintContextBase>      Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintContextBase*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintContextLibrary_GetContext) == 0x000008, "Wrong alignment on BlueprintContextLibrary_GetContext");
static_assert(sizeof(BlueprintContextLibrary_GetContext) == 0x000018, "Wrong size on BlueprintContextLibrary_GetContext");
static_assert(offsetof(BlueprintContextLibrary_GetContext, ContextObject) == 0x000000, "Member 'BlueprintContextLibrary_GetContext::ContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintContextLibrary_GetContext, Class_0) == 0x000008, "Member 'BlueprintContextLibrary_GetContext::Class_0' has a wrong offset!");
static_assert(offsetof(BlueprintContextLibrary_GetContext, ReturnValue) == 0x000010, "Member 'BlueprintContextLibrary_GetContext::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.PlayerAwareContext.OnMcpError__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct PlayerAwareContext_OnMcpError__DelegateSignature final
{
public:
	class FText                                   ErrorMessage;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAwareContext_OnMcpError__DelegateSignature) == 0x000008, "Wrong alignment on PlayerAwareContext_OnMcpError__DelegateSignature");
static_assert(sizeof(PlayerAwareContext_OnMcpError__DelegateSignature) == 0x000018, "Wrong size on PlayerAwareContext_OnMcpError__DelegateSignature");
static_assert(offsetof(PlayerAwareContext_OnMcpError__DelegateSignature, ErrorMessage) == 0x000000, "Member 'PlayerAwareContext_OnMcpError__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function BlueprintContext.PlayerAwareContext.GetMCPTime
// 0x0008 (0x0008 - 0x0000)
struct PlayerAwareContext_GetMCPTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAwareContext_GetMCPTime) == 0x000008, "Wrong alignment on PlayerAwareContext_GetMCPTime");
static_assert(sizeof(PlayerAwareContext_GetMCPTime) == 0x000008, "Wrong size on PlayerAwareContext_GetMCPTime");
static_assert(offsetof(PlayerAwareContext_GetMCPTime, ReturnValue) == 0x000000, "Member 'PlayerAwareContext_GetMCPTime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BoostContext.GetBoostExpirationTime
// 0x0010 (0x0010 - 0x0000)
struct BoostContext_GetBoostExpirationTime final
{
public:
	EOrionBoostType                               BoostType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoostContext_GetBoostExpirationTime) == 0x000008, "Wrong alignment on BoostContext_GetBoostExpirationTime");
static_assert(sizeof(BoostContext_GetBoostExpirationTime) == 0x000010, "Wrong size on BoostContext_GetBoostExpirationTime");
static_assert(offsetof(BoostContext_GetBoostExpirationTime, BoostType) == 0x000000, "Member 'BoostContext_GetBoostExpirationTime::BoostType' has a wrong offset!");
static_assert(offsetof(BoostContext_GetBoostExpirationTime, ReturnValue) == 0x000008, "Member 'BoostContext_GetBoostExpirationTime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BoostContext.GetBoosts
// 0x0010 (0x0010 - 0x0000)
struct BoostContext_GetBoosts final
{
public:
	TArray<class UOrionMcpBoostItem*>             Boosts;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoostContext_GetBoosts) == 0x000008, "Wrong alignment on BoostContext_GetBoosts");
static_assert(sizeof(BoostContext_GetBoosts) == 0x000010, "Wrong size on BoostContext_GetBoosts");
static_assert(offsetof(BoostContext_GetBoosts, Boosts) == 0x000000, "Member 'BoostContext_GetBoosts::Boosts' has a wrong offset!");

// Function BlueprintContext.BoostContext.GetUsesRemaining
// 0x0008 (0x0008 - 0x0000)
struct BoostContext_GetUsesRemaining final
{
public:
	EOrionBoostType                               BoostType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoostContext_GetUsesRemaining) == 0x000004, "Wrong alignment on BoostContext_GetUsesRemaining");
static_assert(sizeof(BoostContext_GetUsesRemaining) == 0x000008, "Wrong size on BoostContext_GetUsesRemaining");
static_assert(offsetof(BoostContext_GetUsesRemaining, BoostType) == 0x000000, "Member 'BoostContext_GetUsesRemaining::BoostType' has a wrong offset!");
static_assert(offsetof(BoostContext_GetUsesRemaining, ReturnValue) == 0x000004, "Member 'BoostContext_GetUsesRemaining::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BoostContext.IsAnyBoostActive
// 0x0008 (0x0008 - 0x0000)
struct BoostContext_IsAnyBoostActive final
{
public:
	int32                                         NumActive;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BoostContext_IsAnyBoostActive) == 0x000004, "Wrong alignment on BoostContext_IsAnyBoostActive");
static_assert(sizeof(BoostContext_IsAnyBoostActive) == 0x000008, "Wrong size on BoostContext_IsAnyBoostActive");
static_assert(offsetof(BoostContext_IsAnyBoostActive, NumActive) == 0x000000, "Member 'BoostContext_IsAnyBoostActive::NumActive' has a wrong offset!");
static_assert(offsetof(BoostContext_IsAnyBoostActive, ReturnValue) == 0x000004, "Member 'BoostContext_IsAnyBoostActive::ReturnValue' has a wrong offset!");

// Function BlueprintContext.BoostContext.IsBoostActive
// 0x0002 (0x0002 - 0x0000)
struct BoostContext_IsBoostActive final
{
public:
	EOrionBoostType                               BoostType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoostContext_IsBoostActive) == 0x000001, "Wrong alignment on BoostContext_IsBoostActive");
static_assert(sizeof(BoostContext_IsBoostActive) == 0x000002, "Wrong size on BoostContext_IsBoostActive");
static_assert(offsetof(BoostContext_IsBoostActive, BoostType) == 0x000000, "Member 'BoostContext_IsBoostActive::BoostType' has a wrong offset!");
static_assert(offsetof(BoostContext_IsBoostActive, ReturnValue) == 0x000001, "Member 'BoostContext_IsBoostActive::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ChunkInstallContext.Prioritize
// 0x0002 (0x0002 - 0x0000)
struct ChunkInstallContext_Prioritize final
{
public:
	EOrionChunkId                                 InChunk;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInstallPriority                              InPriority;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChunkInstallContext_Prioritize) == 0x000001, "Wrong alignment on ChunkInstallContext_Prioritize");
static_assert(sizeof(ChunkInstallContext_Prioritize) == 0x000002, "Wrong size on ChunkInstallContext_Prioritize");
static_assert(offsetof(ChunkInstallContext_Prioritize, InChunk) == 0x000000, "Member 'ChunkInstallContext_Prioritize::InChunk' has a wrong offset!");
static_assert(offsetof(ChunkInstallContext_Prioritize, InPriority) == 0x000001, "Member 'ChunkInstallContext_Prioritize::InPriority' has a wrong offset!");

// Function BlueprintContext.ChunkInstallContext.SetInstallSpeed
// 0x0001 (0x0001 - 0x0000)
struct ChunkInstallContext_SetInstallSpeed final
{
public:
	EInstallSpeed                                 NewSpeed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChunkInstallContext_SetInstallSpeed) == 0x000001, "Wrong alignment on ChunkInstallContext_SetInstallSpeed");
static_assert(sizeof(ChunkInstallContext_SetInstallSpeed) == 0x000001, "Wrong size on ChunkInstallContext_SetInstallSpeed");
static_assert(offsetof(ChunkInstallContext_SetInstallSpeed, NewSpeed) == 0x000000, "Member 'ChunkInstallContext_SetInstallSpeed::NewSpeed' has a wrong offset!");

// Function BlueprintContext.ChunkInstallContext.GetInstallSpeed
// 0x0001 (0x0001 - 0x0000)
struct ChunkInstallContext_GetInstallSpeed final
{
public:
	EInstallSpeed                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChunkInstallContext_GetInstallSpeed) == 0x000001, "Wrong alignment on ChunkInstallContext_GetInstallSpeed");
static_assert(sizeof(ChunkInstallContext_GetInstallSpeed) == 0x000001, "Wrong size on ChunkInstallContext_GetInstallSpeed");
static_assert(offsetof(ChunkInstallContext_GetInstallSpeed, ReturnValue) == 0x000000, "Member 'ChunkInstallContext_GetInstallSpeed::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ChunkInstallContext.GetProgress
// 0x0008 (0x0008 - 0x0000)
struct ChunkInstallContext_GetProgress final
{
public:
	EOrionChunkId                                 InChunk;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChunkInstallContext_GetProgress) == 0x000004, "Wrong alignment on ChunkInstallContext_GetProgress");
static_assert(sizeof(ChunkInstallContext_GetProgress) == 0x000008, "Wrong size on ChunkInstallContext_GetProgress");
static_assert(offsetof(ChunkInstallContext_GetProgress, InChunk) == 0x000000, "Member 'ChunkInstallContext_GetProgress::InChunk' has a wrong offset!");
static_assert(offsetof(ChunkInstallContext_GetProgress, ReturnValue) == 0x000004, "Member 'ChunkInstallContext_GetProgress::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ChunkInstallContext.GetStatus
// 0x0002 (0x0002 - 0x0000)
struct ChunkInstallContext_GetStatus final
{
public:
	EOrionChunkId                                 InChunk;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInstallStatus                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChunkInstallContext_GetStatus) == 0x000001, "Wrong alignment on ChunkInstallContext_GetStatus");
static_assert(sizeof(ChunkInstallContext_GetStatus) == 0x000002, "Wrong size on ChunkInstallContext_GetStatus");
static_assert(offsetof(ChunkInstallContext_GetStatus, InChunk) == 0x000000, "Member 'ChunkInstallContext_GetStatus::InChunk' has a wrong offset!");
static_assert(offsetof(ChunkInstallContext_GetStatus, ReturnValue) == 0x000001, "Member 'ChunkInstallContext_GetStatus::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ChunkInstallContext.GetTimeRemaining
// 0x0010 (0x0010 - 0x0000)
struct ChunkInstallContext_GetTimeRemaining final
{
public:
	EOrionChunkId                                 InChunk;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChunkInstallContext_GetTimeRemaining) == 0x000008, "Wrong alignment on ChunkInstallContext_GetTimeRemaining");
static_assert(sizeof(ChunkInstallContext_GetTimeRemaining) == 0x000010, "Wrong size on ChunkInstallContext_GetTimeRemaining");
static_assert(offsetof(ChunkInstallContext_GetTimeRemaining, InChunk) == 0x000000, "Member 'ChunkInstallContext_GetTimeRemaining::InChunk' has a wrong offset!");
static_assert(offsetof(ChunkInstallContext_GetTimeRemaining, ReturnValue) == 0x000008, "Member 'ChunkInstallContext_GetTimeRemaining::ReturnValue' has a wrong offset!");

// Function BlueprintContext.FriendsContext.AcceptFriendRequest
// 0x0018 (0x0018 - 0x0000)
struct FriendsContext_AcceptFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsContext_AcceptFriendRequest) == 0x000008, "Wrong alignment on FriendsContext_AcceptFriendRequest");
static_assert(sizeof(FriendsContext_AcceptFriendRequest) == 0x000018, "Wrong size on FriendsContext_AcceptFriendRequest");
static_assert(offsetof(FriendsContext_AcceptFriendRequest, PlayerNetId) == 0x000000, "Member 'FriendsContext_AcceptFriendRequest::PlayerNetId' has a wrong offset!");

// Function BlueprintContext.FriendsContext.CancelFriendRequest
// 0x0018 (0x0018 - 0x0000)
struct FriendsContext_CancelFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsContext_CancelFriendRequest) == 0x000008, "Wrong alignment on FriendsContext_CancelFriendRequest");
static_assert(sizeof(FriendsContext_CancelFriendRequest) == 0x000018, "Wrong size on FriendsContext_CancelFriendRequest");
static_assert(offsetof(FriendsContext_CancelFriendRequest, PlayerNetId) == 0x000000, "Member 'FriendsContext_CancelFriendRequest::PlayerNetId' has a wrong offset!");

// Function BlueprintContext.FriendsContext.GetQuickInviteList
// 0x0010 (0x0010 - 0x0000)
struct FriendsContext_GetQuickInviteList final
{
public:
	TArray<class UOrionFriendItem*>               QuickInviteFriends;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsContext_GetQuickInviteList) == 0x000008, "Wrong alignment on FriendsContext_GetQuickInviteList");
static_assert(sizeof(FriendsContext_GetQuickInviteList) == 0x000010, "Wrong size on FriendsContext_GetQuickInviteList");
static_assert(offsetof(FriendsContext_GetQuickInviteList, QuickInviteFriends) == 0x000000, "Member 'FriendsContext_GetQuickInviteList::QuickInviteFriends' has a wrong offset!");

// Function BlueprintContext.FriendsContext.InitiateWhisperToFriend
// 0x0018 (0x0018 - 0x0000)
struct FriendsContext_InitiateWhisperToFriend final
{
public:
	struct FUniqueNetIdRepl                       FriendNetID;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsContext_InitiateWhisperToFriend) == 0x000008, "Wrong alignment on FriendsContext_InitiateWhisperToFriend");
static_assert(sizeof(FriendsContext_InitiateWhisperToFriend) == 0x000018, "Wrong size on FriendsContext_InitiateWhisperToFriend");
static_assert(offsetof(FriendsContext_InitiateWhisperToFriend, FriendNetID) == 0x000000, "Member 'FriendsContext_InitiateWhisperToFriend::FriendNetID' has a wrong offset!");

// DelegateFunction BlueprintContext.FriendsContext.OnFriendsListChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FriendsContext_OnFriendsListChanged__DelegateSignature final
{
public:
	TArray<class UOrionFriendItem*>               Friends;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsContext_OnFriendsListChanged__DelegateSignature) == 0x000008, "Wrong alignment on FriendsContext_OnFriendsListChanged__DelegateSignature");
static_assert(sizeof(FriendsContext_OnFriendsListChanged__DelegateSignature) == 0x000010, "Wrong size on FriendsContext_OnFriendsListChanged__DelegateSignature");
static_assert(offsetof(FriendsContext_OnFriendsListChanged__DelegateSignature, Friends) == 0x000000, "Member 'FriendsContext_OnFriendsListChanged__DelegateSignature::Friends' has a wrong offset!");

// Function BlueprintContext.FriendsContext.RejectFriendRequest
// 0x0018 (0x0018 - 0x0000)
struct FriendsContext_RejectFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsContext_RejectFriendRequest) == 0x000008, "Wrong alignment on FriendsContext_RejectFriendRequest");
static_assert(sizeof(FriendsContext_RejectFriendRequest) == 0x000018, "Wrong size on FriendsContext_RejectFriendRequest");
static_assert(offsetof(FriendsContext_RejectFriendRequest, PlayerNetId) == 0x000000, "Member 'FriendsContext_RejectFriendRequest::PlayerNetId' has a wrong offset!");

// Function BlueprintContext.FriendsContext.SendFriendRequest
// 0x0018 (0x0018 - 0x0000)
struct FriendsContext_SendFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsContext_SendFriendRequest) == 0x000008, "Wrong alignment on FriendsContext_SendFriendRequest");
static_assert(sizeof(FriendsContext_SendFriendRequest) == 0x000018, "Wrong size on FriendsContext_SendFriendRequest");
static_assert(offsetof(FriendsContext_SendFriendRequest, PlayerNetId) == 0x000000, "Member 'FriendsContext_SendFriendRequest::PlayerNetId' has a wrong offset!");

// Function BlueprintContext.FriendsContext.GetFriendshipStatus
// 0x0020 (0x0020 - 0x0000)
struct FriendsContext_GetFriendshipStatus final
{
public:
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionFriendshipStatus                        ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendsContext_GetFriendshipStatus) == 0x000008, "Wrong alignment on FriendsContext_GetFriendshipStatus");
static_assert(sizeof(FriendsContext_GetFriendshipStatus) == 0x000020, "Wrong size on FriendsContext_GetFriendshipStatus");
static_assert(offsetof(FriendsContext_GetFriendshipStatus, PlayerNetId) == 0x000000, "Member 'FriendsContext_GetFriendshipStatus::PlayerNetId' has a wrong offset!");
static_assert(offsetof(FriendsContext_GetFriendshipStatus, ReturnValue) == 0x000018, "Member 'FriendsContext_GetFriendshipStatus::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.NotifyPreviewHeroChanged
// 0x0008 (0x0008 - 0x0000)
struct HeroContext_NotifyPreviewHeroChanged final
{
public:
	class UOrionHeroData*                         NewHero;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_NotifyPreviewHeroChanged) == 0x000008, "Wrong alignment on HeroContext_NotifyPreviewHeroChanged");
static_assert(sizeof(HeroContext_NotifyPreviewHeroChanged) == 0x000008, "Wrong size on HeroContext_NotifyPreviewHeroChanged");
static_assert(offsetof(HeroContext_NotifyPreviewHeroChanged, NewHero) == 0x000000, "Member 'HeroContext_NotifyPreviewHeroChanged::NewHero' has a wrong offset!");

// Function BlueprintContext.HeroContext.NotifyPreviewSkinChanged
// 0x0008 (0x0008 - 0x0000)
struct HeroContext_NotifyPreviewSkinChanged final
{
public:
	class UOrionSkinItemDefinition*               Skin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_NotifyPreviewSkinChanged) == 0x000008, "Wrong alignment on HeroContext_NotifyPreviewSkinChanged");
static_assert(sizeof(HeroContext_NotifyPreviewSkinChanged) == 0x000008, "Wrong size on HeroContext_NotifyPreviewSkinChanged");
static_assert(offsetof(HeroContext_NotifyPreviewSkinChanged, Skin) == 0x000000, "Member 'HeroContext_NotifyPreviewSkinChanged::Skin' has a wrong offset!");

// DelegateFunction BlueprintContext.HeroContext.OnSelectedSkinChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HeroContext_OnSelectedSkinChanged__DelegateSignature final
{
public:
	const class UOrionSkinItemDefinition*         Skin;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_OnSelectedSkinChanged__DelegateSignature) == 0x000008, "Wrong alignment on HeroContext_OnSelectedSkinChanged__DelegateSignature");
static_assert(sizeof(HeroContext_OnSelectedSkinChanged__DelegateSignature) == 0x000008, "Wrong size on HeroContext_OnSelectedSkinChanged__DelegateSignature");
static_assert(offsetof(HeroContext_OnSelectedSkinChanged__DelegateSignature, Skin) == 0x000000, "Member 'HeroContext_OnSelectedSkinChanged__DelegateSignature::Skin' has a wrong offset!");

// Function BlueprintContext.HeroContext.SetSelectedSkin
// 0x0008 (0x0008 - 0x0000)
struct HeroContext_SetSelectedSkin final
{
public:
	class UOrionSkinItemDefinition*               Skin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_SetSelectedSkin) == 0x000008, "Wrong alignment on HeroContext_SetSelectedSkin");
static_assert(sizeof(HeroContext_SetSelectedSkin) == 0x000008, "Wrong size on HeroContext_SetSelectedSkin");
static_assert(offsetof(HeroContext_SetSelectedSkin, Skin) == 0x000000, "Member 'HeroContext_SetSelectedSkin::Skin' has a wrong offset!");

// Function BlueprintContext.HeroContext.FilterAvailableHeroes
// 0x0028 (0x0028 - 0x0000)
struct HeroContext_FilterAvailableHeroes final
{
public:
	class FText                                   SearchText;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class UOrionHeroData*>                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_FilterAvailableHeroes) == 0x000008, "Wrong alignment on HeroContext_FilterAvailableHeroes");
static_assert(sizeof(HeroContext_FilterAvailableHeroes) == 0x000028, "Wrong size on HeroContext_FilterAvailableHeroes");
static_assert(offsetof(HeroContext_FilterAvailableHeroes, SearchText) == 0x000000, "Member 'HeroContext_FilterAvailableHeroes::SearchText' has a wrong offset!");
static_assert(offsetof(HeroContext_FilterAvailableHeroes, ReturnValue) == 0x000018, "Member 'HeroContext_FilterAvailableHeroes::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetAbility
// 0x0018 (0x0018 - 0x0000)
struct HeroContext_GetAbility final
{
public:
	class UOrionHeroData*                         Hero;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionAbilityBinding                          Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOrionAbility*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetAbility) == 0x000008, "Wrong alignment on HeroContext_GetAbility");
static_assert(sizeof(HeroContext_GetAbility) == 0x000018, "Wrong size on HeroContext_GetAbility");
static_assert(offsetof(HeroContext_GetAbility, Hero) == 0x000000, "Member 'HeroContext_GetAbility::Hero' has a wrong offset!");
static_assert(offsetof(HeroContext_GetAbility, Slot) == 0x000008, "Member 'HeroContext_GetAbility::Slot' has a wrong offset!");
static_assert(offsetof(HeroContext_GetAbility, ReturnValue) == 0x000010, "Member 'HeroContext_GetAbility::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetAllAvailableHeroes
// 0x0010 (0x0010 - 0x0000)
struct HeroContext_GetAllAvailableHeroes final
{
public:
	TArray<class UOrionHeroData*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetAllAvailableHeroes) == 0x000008, "Wrong alignment on HeroContext_GetAllAvailableHeroes");
static_assert(sizeof(HeroContext_GetAllAvailableHeroes) == 0x000010, "Wrong size on HeroContext_GetAllAvailableHeroes");
static_assert(offsetof(HeroContext_GetAllAvailableHeroes, ReturnValue) == 0x000000, "Member 'HeroContext_GetAllAvailableHeroes::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetHeroByString
// 0x0018 (0x0018 - 0x0000)
struct HeroContext_GetHeroByString final
{
public:
	class FString                                 HeroName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionHeroData*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetHeroByString) == 0x000008, "Wrong alignment on HeroContext_GetHeroByString");
static_assert(sizeof(HeroContext_GetHeroByString) == 0x000018, "Wrong size on HeroContext_GetHeroByString");
static_assert(offsetof(HeroContext_GetHeroByString, HeroName) == 0x000000, "Member 'HeroContext_GetHeroByString::HeroName' has a wrong offset!");
static_assert(offsetof(HeroContext_GetHeroByString, ReturnValue) == 0x000010, "Member 'HeroContext_GetHeroByString::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetQueueTimeFor
// 0x0028 (0x0028 - 0x0000)
struct HeroContext_GetQueueTimeFor final
{
public:
	class UOrionHeroData*                         InHero;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaylistId;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNumSamples;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetQueueTimeFor) == 0x000008, "Wrong alignment on HeroContext_GetQueueTimeFor");
static_assert(sizeof(HeroContext_GetQueueTimeFor) == 0x000028, "Wrong size on HeroContext_GetQueueTimeFor");
static_assert(offsetof(HeroContext_GetQueueTimeFor, InHero) == 0x000000, "Member 'HeroContext_GetQueueTimeFor::InHero' has a wrong offset!");
static_assert(offsetof(HeroContext_GetQueueTimeFor, PlaylistId) == 0x000008, "Member 'HeroContext_GetQueueTimeFor::PlaylistId' has a wrong offset!");
static_assert(offsetof(HeroContext_GetQueueTimeFor, OutNumSamples) == 0x00000C, "Member 'HeroContext_GetQueueTimeFor::OutNumSamples' has a wrong offset!");
static_assert(offsetof(HeroContext_GetQueueTimeFor, ReturnValue) == 0x000010, "Member 'HeroContext_GetQueueTimeFor::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetSelectedCosmeticOptions
// 0x00E0 (0x00E0 - 0x0000)
struct HeroContext_GetSelectedCosmeticOptions final
{
public:
	struct FOrionCosmeticPlayerChoices            ReturnValue;                                       // 0x0000(0x00E0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetSelectedCosmeticOptions) == 0x000008, "Wrong alignment on HeroContext_GetSelectedCosmeticOptions");
static_assert(sizeof(HeroContext_GetSelectedCosmeticOptions) == 0x0000E0, "Wrong size on HeroContext_GetSelectedCosmeticOptions");
static_assert(offsetof(HeroContext_GetSelectedCosmeticOptions, ReturnValue) == 0x000000, "Member 'HeroContext_GetSelectedCosmeticOptions::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetSelectedHero
// 0x0008 (0x0008 - 0x0000)
struct HeroContext_GetSelectedHero final
{
public:
	class UOrionHeroData*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetSelectedHero) == 0x000008, "Wrong alignment on HeroContext_GetSelectedHero");
static_assert(sizeof(HeroContext_GetSelectedHero) == 0x000008, "Wrong size on HeroContext_GetSelectedHero");
static_assert(offsetof(HeroContext_GetSelectedHero, ReturnValue) == 0x000000, "Member 'HeroContext_GetSelectedHero::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetSelectedHeroDataSpec
// 0x00A8 (0x00A8 - 0x0000)
struct HeroContext_GetSelectedHeroDataSpec final
{
public:
	struct FOrionHeroDataSpec                     ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetSelectedHeroDataSpec) == 0x000008, "Wrong alignment on HeroContext_GetSelectedHeroDataSpec");
static_assert(sizeof(HeroContext_GetSelectedHeroDataSpec) == 0x0000A8, "Wrong size on HeroContext_GetSelectedHeroDataSpec");
static_assert(offsetof(HeroContext_GetSelectedHeroDataSpec, ReturnValue) == 0x000000, "Member 'HeroContext_GetSelectedHeroDataSpec::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HeroContext.GetSelectedSkinForHero
// 0x0010 (0x0010 - 0x0000)
struct HeroContext_GetSelectedSkinForHero final
{
public:
	const class UOrionHeroData*                   HeroData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionSkinItemDefinition*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeroContext_GetSelectedSkinForHero) == 0x000008, "Wrong alignment on HeroContext_GetSelectedSkinForHero");
static_assert(sizeof(HeroContext_GetSelectedSkinForHero) == 0x000010, "Wrong size on HeroContext_GetSelectedSkinForHero");
static_assert(offsetof(HeroContext_GetSelectedSkinForHero, HeroData) == 0x000000, "Member 'HeroContext_GetSelectedSkinForHero::HeroData' has a wrong offset!");
static_assert(offsetof(HeroContext_GetSelectedSkinForHero, ReturnValue) == 0x000008, "Member 'HeroContext_GetSelectedSkinForHero::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetSafeZonePadding
// 0x000C (0x000C - 0x0000)
struct HUDContext_GetSafeZonePadding final
{
public:
	ESafeZonePadding                              PaddingType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetSafeZonePadding) == 0x000004, "Wrong alignment on HUDContext_GetSafeZonePadding");
static_assert(sizeof(HUDContext_GetSafeZonePadding) == 0x00000C, "Wrong size on HUDContext_GetSafeZonePadding");
static_assert(offsetof(HUDContext_GetSafeZonePadding, PaddingType) == 0x000000, "Member 'HUDContext_GetSafeZonePadding::PaddingType' has a wrong offset!");
static_assert(offsetof(HUDContext_GetSafeZonePadding, ReturnValue) == 0x000004, "Member 'HUDContext_GetSafeZonePadding::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.AddDamageEvent
// 0x0030 (0x0030 - 0x0000)
struct HUDContext_AddDamageEvent final
{
public:
	struct FOrionUIDamageEventInfo                DamageEventInfo;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_AddDamageEvent) == 0x000008, "Wrong alignment on HUDContext_AddDamageEvent");
static_assert(sizeof(HUDContext_AddDamageEvent) == 0x000030, "Wrong size on HUDContext_AddDamageEvent");
static_assert(offsetof(HUDContext_AddDamageEvent, DamageEventInfo) == 0x000000, "Member 'HUDContext_AddDamageEvent::DamageEventInfo' has a wrong offset!");

// Function BlueprintContext.HUDContext.AddStatusEffectEvent
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_AddStatusEffectEvent final
{
public:
	bool                                          bForceCardShopToClose;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_AddStatusEffectEvent) == 0x000001, "Wrong alignment on HUDContext_AddStatusEffectEvent");
static_assert(sizeof(HUDContext_AddStatusEffectEvent) == 0x000001, "Wrong size on HUDContext_AddStatusEffectEvent");
static_assert(offsetof(HUDContext_AddStatusEffectEvent, bForceCardShopToClose) == 0x000000, "Member 'HUDContext_AddStatusEffectEvent::bForceCardShopToClose' has a wrong offset!");

// Function BlueprintContext.HUDContext.FadeHUDIn
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_FadeHUDIn final
{
public:
	bool                                          bFadeFast;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_FadeHUDIn) == 0x000001, "Wrong alignment on HUDContext_FadeHUDIn");
static_assert(sizeof(HUDContext_FadeHUDIn) == 0x000001, "Wrong size on HUDContext_FadeHUDIn");
static_assert(offsetof(HUDContext_FadeHUDIn, bFadeFast) == 0x000000, "Member 'HUDContext_FadeHUDIn::bFadeFast' has a wrong offset!");

// Function BlueprintContext.HUDContext.FadeHUDOut
// 0x0008 (0x0008 - 0x0000)
struct HUDContext_FadeHUDOut final
{
public:
	float                                         FadeInWorldTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFadeFast;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDContext_FadeHUDOut) == 0x000004, "Wrong alignment on HUDContext_FadeHUDOut");
static_assert(sizeof(HUDContext_FadeHUDOut) == 0x000008, "Wrong size on HUDContext_FadeHUDOut");
static_assert(offsetof(HUDContext_FadeHUDOut, FadeInWorldTime) == 0x000000, "Member 'HUDContext_FadeHUDOut::FadeInWorldTime' has a wrong offset!");
static_assert(offsetof(HUDContext_FadeHUDOut, bFadeFast) == 0x000004, "Member 'HUDContext_FadeHUDOut::bFadeFast' has a wrong offset!");

// Function BlueprintContext.HUDContext.FlushPressedActionBindingKeys
// 0x0008 (0x0008 - 0x0000)
struct HUDContext_FlushPressedActionBindingKeys final
{
public:
	class FName                                   ActionBindingName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_FlushPressedActionBindingKeys) == 0x000004, "Wrong alignment on HUDContext_FlushPressedActionBindingKeys");
static_assert(sizeof(HUDContext_FlushPressedActionBindingKeys) == 0x000008, "Wrong size on HUDContext_FlushPressedActionBindingKeys");
static_assert(offsetof(HUDContext_FlushPressedActionBindingKeys, ActionBindingName) == 0x000000, "Member 'HUDContext_FlushPressedActionBindingKeys::ActionBindingName' has a wrong offset!");

// Function BlueprintContext.HUDContext.HandleInput_Blueprint
// 0x0008 (0x0008 - 0x0000)
struct HUDContext_HandleInput_Blueprint final
{
public:
	class FName                                   ActionBindingName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_HandleInput_Blueprint) == 0x000004, "Wrong alignment on HUDContext_HandleInput_Blueprint");
static_assert(sizeof(HUDContext_HandleInput_Blueprint) == 0x000008, "Wrong size on HUDContext_HandleInput_Blueprint");
static_assert(offsetof(HUDContext_HandleInput_Blueprint, ActionBindingName) == 0x000000, "Member 'HUDContext_HandleInput_Blueprint::ActionBindingName' has a wrong offset!");

// Function BlueprintContext.HUDContext.HUDAnimationEnding
// 0x0008 (0x0008 - 0x0000)
struct HUDContext_HUDAnimationEnding final
{
public:
	class FName                                   RequestingName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_HUDAnimationEnding) == 0x000004, "Wrong alignment on HUDContext_HUDAnimationEnding");
static_assert(sizeof(HUDContext_HUDAnimationEnding) == 0x000008, "Wrong size on HUDContext_HUDAnimationEnding");
static_assert(offsetof(HUDContext_HUDAnimationEnding, RequestingName) == 0x000000, "Member 'HUDContext_HUDAnimationEnding::RequestingName' has a wrong offset!");

// Function BlueprintContext.HUDContext.HUDAnimationStarting
// 0x0008 (0x0008 - 0x0000)
struct HUDContext_HUDAnimationStarting final
{
public:
	class FName                                   RequestingName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_HUDAnimationStarting) == 0x000004, "Wrong alignment on HUDContext_HUDAnimationStarting");
static_assert(sizeof(HUDContext_HUDAnimationStarting) == 0x000008, "Wrong size on HUDContext_HUDAnimationStarting");
static_assert(offsetof(HUDContext_HUDAnimationStarting, RequestingName) == 0x000000, "Member 'HUDContext_HUDAnimationStarting::RequestingName' has a wrong offset!");

// Function BlueprintContext.HUDContext.IsLocalHeroDead
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_IsLocalHeroDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_IsLocalHeroDead) == 0x000001, "Wrong alignment on HUDContext_IsLocalHeroDead");
static_assert(sizeof(HUDContext_IsLocalHeroDead) == 0x000001, "Wrong size on HUDContext_IsLocalHeroDead");
static_assert(offsetof(HUDContext_IsLocalHeroDead, ReturnValue) == 0x000000, "Member 'HUDContext_IsLocalHeroDead::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.SetAutoConfirmEndTime
// 0x0004 (0x0004 - 0x0000)
struct HUDContext_SetAutoConfirmEndTime final
{
public:
	float                                         EndTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_SetAutoConfirmEndTime) == 0x000004, "Wrong alignment on HUDContext_SetAutoConfirmEndTime");
static_assert(sizeof(HUDContext_SetAutoConfirmEndTime) == 0x000004, "Wrong size on HUDContext_SetAutoConfirmEndTime");
static_assert(offsetof(HUDContext_SetAutoConfirmEndTime, EndTime) == 0x000000, "Member 'HUDContext_SetAutoConfirmEndTime::EndTime' has a wrong offset!");

// Function BlueprintContext.HUDContext.SetIsHUDHitTestable
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_SetIsHUDHitTestable final
{
public:
	bool                                          bNewIsHitTestable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_SetIsHUDHitTestable) == 0x000001, "Wrong alignment on HUDContext_SetIsHUDHitTestable");
static_assert(sizeof(HUDContext_SetIsHUDHitTestable) == 0x000001, "Wrong size on HUDContext_SetIsHUDHitTestable");
static_assert(offsetof(HUDContext_SetIsHUDHitTestable, bNewIsHitTestable) == 0x000000, "Member 'HUDContext_SetIsHUDHitTestable::bNewIsHitTestable' has a wrong offset!");

// Function BlueprintContext.HUDContext.SetScoreDisplayEnemyText
// 0x0018 (0x0018 - 0x0000)
struct HUDContext_SetScoreDisplayEnemyText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_SetScoreDisplayEnemyText) == 0x000008, "Wrong alignment on HUDContext_SetScoreDisplayEnemyText");
static_assert(sizeof(HUDContext_SetScoreDisplayEnemyText) == 0x000018, "Wrong size on HUDContext_SetScoreDisplayEnemyText");
static_assert(offsetof(HUDContext_SetScoreDisplayEnemyText, NewText) == 0x000000, "Member 'HUDContext_SetScoreDisplayEnemyText::NewText' has a wrong offset!");

// Function BlueprintContext.HUDContext.SetScoreDisplayFriendlyText
// 0x0018 (0x0018 - 0x0000)
struct HUDContext_SetScoreDisplayFriendlyText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_SetScoreDisplayFriendlyText) == 0x000008, "Wrong alignment on HUDContext_SetScoreDisplayFriendlyText");
static_assert(sizeof(HUDContext_SetScoreDisplayFriendlyText) == 0x000018, "Wrong size on HUDContext_SetScoreDisplayFriendlyText");
static_assert(offsetof(HUDContext_SetScoreDisplayFriendlyText, NewText) == 0x000000, "Member 'HUDContext_SetScoreDisplayFriendlyText::NewText' has a wrong offset!");

// Function BlueprintContext.HUDContext.SetSprintCastingEndTime
// 0x0004 (0x0004 - 0x0000)
struct HUDContext_SetSprintCastingEndTime final
{
public:
	float                                         EndTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_SetSprintCastingEndTime) == 0x000004, "Wrong alignment on HUDContext_SetSprintCastingEndTime");
static_assert(sizeof(HUDContext_SetSprintCastingEndTime) == 0x000004, "Wrong size on HUDContext_SetSprintCastingEndTime");
static_assert(offsetof(HUDContext_SetSprintCastingEndTime, EndTime) == 0x000000, "Member 'HUDContext_SetSprintCastingEndTime::EndTime' has a wrong offset!");

// Function BlueprintContext.HUDContext.BP_GetLocalPlayerInfo
// 0x00D8 (0x00D8 - 0x0000)
struct HUDContext_BP_GetLocalPlayerInfo final
{
public:
	struct FOrionLocalPlayerUIInfo                ReturnValue;                                       // 0x0000(0x00D8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_BP_GetLocalPlayerInfo) == 0x000008, "Wrong alignment on HUDContext_BP_GetLocalPlayerInfo");
static_assert(sizeof(HUDContext_BP_GetLocalPlayerInfo) == 0x0000D8, "Wrong size on HUDContext_BP_GetLocalPlayerInfo");
static_assert(offsetof(HUDContext_BP_GetLocalPlayerInfo, ReturnValue) == 0x000000, "Member 'HUDContext_BP_GetLocalPlayerInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetAllowCardMenu
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_GetAllowCardMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetAllowCardMenu) == 0x000001, "Wrong alignment on HUDContext_GetAllowCardMenu");
static_assert(sizeof(HUDContext_GetAllowCardMenu) == 0x000001, "Wrong size on HUDContext_GetAllowCardMenu");
static_assert(offsetof(HUDContext_GetAllowCardMenu, ReturnValue) == 0x000000, "Member 'HUDContext_GetAllowCardMenu::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetDamageIndicatorRotation
// 0x001C (0x001C - 0x0000)
struct HUDContext_GetDamageIndicatorRotation final
{
public:
	struct FVector                                PlayerLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InstigatorLocation;                                // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetDamageIndicatorRotation) == 0x000004, "Wrong alignment on HUDContext_GetDamageIndicatorRotation");
static_assert(sizeof(HUDContext_GetDamageIndicatorRotation) == 0x00001C, "Wrong size on HUDContext_GetDamageIndicatorRotation");
static_assert(offsetof(HUDContext_GetDamageIndicatorRotation, PlayerLocation) == 0x000000, "Member 'HUDContext_GetDamageIndicatorRotation::PlayerLocation' has a wrong offset!");
static_assert(offsetof(HUDContext_GetDamageIndicatorRotation, InstigatorLocation) == 0x00000C, "Member 'HUDContext_GetDamageIndicatorRotation::InstigatorLocation' has a wrong offset!");
static_assert(offsetof(HUDContext_GetDamageIndicatorRotation, ReturnValue) == 0x000018, "Member 'HUDContext_GetDamageIndicatorRotation::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetEnemyTeam
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_GetEnemyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetEnemyTeam) == 0x000001, "Wrong alignment on HUDContext_GetEnemyTeam");
static_assert(sizeof(HUDContext_GetEnemyTeam) == 0x000001, "Wrong size on HUDContext_GetEnemyTeam");
static_assert(offsetof(HUDContext_GetEnemyTeam, ReturnValue) == 0x000000, "Member 'HUDContext_GetEnemyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetHUDInputActionNames
// 0x0138 (0x0138 - 0x0000)
struct HUDContext_GetHUDInputActionNames final
{
public:
	struct FOrionHUDInputActionNames              ReturnValue;                                       // 0x0000(0x0138)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetHUDInputActionNames) == 0x000008, "Wrong alignment on HUDContext_GetHUDInputActionNames");
static_assert(sizeof(HUDContext_GetHUDInputActionNames) == 0x000138, "Wrong size on HUDContext_GetHUDInputActionNames");
static_assert(offsetof(HUDContext_GetHUDInputActionNames, ReturnValue) == 0x000000, "Member 'HUDContext_GetHUDInputActionNames::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetMyTeam
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_GetMyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetMyTeam) == 0x000001, "Wrong alignment on HUDContext_GetMyTeam");
static_assert(sizeof(HUDContext_GetMyTeam) == 0x000001, "Wrong size on HUDContext_GetMyTeam");
static_assert(offsetof(HUDContext_GetMyTeam, ReturnValue) == 0x000000, "Member 'HUDContext_GetMyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetTeamUIInfo
// 0x0070 (0x0070 - 0x0000)
struct HUDContext_GetTeamUIInfo final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionTeam                                    TeamNum;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrionHUDTeamStatusInfo                ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetTeamUIInfo) == 0x000008, "Wrong alignment on HUDContext_GetTeamUIInfo");
static_assert(sizeof(HUDContext_GetTeamUIInfo) == 0x000070, "Wrong size on HUDContext_GetTeamUIInfo");
static_assert(offsetof(HUDContext_GetTeamUIInfo, Index_0) == 0x000000, "Member 'HUDContext_GetTeamUIInfo::Index_0' has a wrong offset!");
static_assert(offsetof(HUDContext_GetTeamUIInfo, TeamNum) == 0x000004, "Member 'HUDContext_GetTeamUIInfo::TeamNum' has a wrong offset!");
static_assert(offsetof(HUDContext_GetTeamUIInfo, ReturnValue) == 0x000008, "Member 'HUDContext_GetTeamUIInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.GetTowerTargetingInfo
// 0x0050 (0x0050 - 0x0000)
struct HUDContext_GetTowerTargetingInfo final
{
public:
	struct FOrionTowerTargetingInfo               ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_GetTowerTargetingInfo) == 0x000008, "Wrong alignment on HUDContext_GetTowerTargetingInfo");
static_assert(sizeof(HUDContext_GetTowerTargetingInfo) == 0x000050, "Wrong size on HUDContext_GetTowerTargetingInfo");
static_assert(offsetof(HUDContext_GetTowerTargetingInfo, ReturnValue) == 0x000000, "Member 'HUDContext_GetTowerTargetingInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.IsSurrenderEnabled
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_IsSurrenderEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_IsSurrenderEnabled) == 0x000001, "Wrong alignment on HUDContext_IsSurrenderEnabled");
static_assert(sizeof(HUDContext_IsSurrenderEnabled) == 0x000001, "Wrong size on HUDContext_IsSurrenderEnabled");
static_assert(offsetof(HUDContext_IsSurrenderEnabled, ReturnValue) == 0x000000, "Member 'HUDContext_IsSurrenderEnabled::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.IsTutorial
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_IsTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_IsTutorial) == 0x000001, "Wrong alignment on HUDContext_IsTutorial");
static_assert(sizeof(HUDContext_IsTutorial) == 0x000001, "Wrong size on HUDContext_IsTutorial");
static_assert(offsetof(HUDContext_IsTutorial, ReturnValue) == 0x000000, "Member 'HUDContext_IsTutorial::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.ShouldShowMatchTimer
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_ShouldShowMatchTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_ShouldShowMatchTimer) == 0x000001, "Wrong alignment on HUDContext_ShouldShowMatchTimer");
static_assert(sizeof(HUDContext_ShouldShowMatchTimer) == 0x000001, "Wrong size on HUDContext_ShouldShowMatchTimer");
static_assert(offsetof(HUDContext_ShouldShowMatchTimer, ReturnValue) == 0x000000, "Member 'HUDContext_ShouldShowMatchTimer::ReturnValue' has a wrong offset!");

// Function BlueprintContext.HUDContext.ShouldShowTeamScores
// 0x0001 (0x0001 - 0x0000)
struct HUDContext_ShouldShowTeamScores final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDContext_ShouldShowTeamScores) == 0x000001, "Wrong alignment on HUDContext_ShouldShowTeamScores");
static_assert(sizeof(HUDContext_ShouldShowTeamScores) == 0x000001, "Wrong size on HUDContext_ShouldShowTeamScores");
static_assert(offsetof(HUDContext_ShouldShowTeamScores, ReturnValue) == 0x000000, "Member 'HUDContext_ShouldShowTeamScores::ReturnValue' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetActiveBanner
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetActiveBanner final
{
public:
	struct FActiveBannerStruct                    ActiveBanner;                                      // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetActiveBanner) == 0x000008, "Wrong alignment on InventoryContext_GetActiveBanner");
static_assert(sizeof(InventoryContext_GetActiveBanner) == 0x000010, "Wrong size on InventoryContext_GetActiveBanner");
static_assert(offsetof(InventoryContext_GetActiveBanner, ActiveBanner) == 0x000000, "Member 'InventoryContext_GetActiveBanner::ActiveBanner' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetBannerAlterations
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetBannerAlterations final
{
public:
	TArray<class UOrionMcpBannerAlterationItem*>  BannerAlterations;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetBannerAlterations) == 0x000008, "Wrong alignment on InventoryContext_GetBannerAlterations");
static_assert(sizeof(InventoryContext_GetBannerAlterations) == 0x000010, "Wrong size on InventoryContext_GetBannerAlterations");
static_assert(offsetof(InventoryContext_GetBannerAlterations, BannerAlterations) == 0x000000, "Member 'InventoryContext_GetBannerAlterations::BannerAlterations' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetBanners
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetBanners final
{
public:
	TArray<class UOrionMcpBannerItem*>            Banners;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetBanners) == 0x000008, "Wrong alignment on InventoryContext_GetBanners");
static_assert(sizeof(InventoryContext_GetBanners) == 0x000010, "Wrong size on InventoryContext_GetBanners");
static_assert(offsetof(InventoryContext_GetBanners, Banners) == 0x000000, "Member 'InventoryContext_GetBanners::Banners' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetHeroes
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetHeroes final
{
public:
	TArray<class UOrionMcpHeroItem*>              Heroes;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetHeroes) == 0x000008, "Wrong alignment on InventoryContext_GetHeroes");
static_assert(sizeof(InventoryContext_GetHeroes) == 0x000010, "Wrong size on InventoryContext_GetHeroes");
static_assert(offsetof(InventoryContext_GetHeroes, Heroes) == 0x000000, "Member 'InventoryContext_GetHeroes::Heroes' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetItemFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetItemFromDefinition final
{
public:
	class UOrionMcpItemDefinition*                Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionMcpItem*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetItemFromDefinition) == 0x000008, "Wrong alignment on InventoryContext_GetItemFromDefinition");
static_assert(sizeof(InventoryContext_GetItemFromDefinition) == 0x000010, "Wrong size on InventoryContext_GetItemFromDefinition");
static_assert(offsetof(InventoryContext_GetItemFromDefinition, Definition) == 0x000000, "Member 'InventoryContext_GetItemFromDefinition::Definition' has a wrong offset!");
static_assert(offsetof(InventoryContext_GetItemFromDefinition, ReturnValue) == 0x000008, "Member 'InventoryContext_GetItemFromDefinition::ReturnValue' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetItemQuantityFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetItemQuantityFromDefinition final
{
public:
	class UOrionMcpItemDefinition*                Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryContext_GetItemQuantityFromDefinition) == 0x000008, "Wrong alignment on InventoryContext_GetItemQuantityFromDefinition");
static_assert(sizeof(InventoryContext_GetItemQuantityFromDefinition) == 0x000010, "Wrong size on InventoryContext_GetItemQuantityFromDefinition");
static_assert(offsetof(InventoryContext_GetItemQuantityFromDefinition, Definition) == 0x000000, "Member 'InventoryContext_GetItemQuantityFromDefinition::Definition' has a wrong offset!");
static_assert(offsetof(InventoryContext_GetItemQuantityFromDefinition, ReturnValue) == 0x000008, "Member 'InventoryContext_GetItemQuantityFromDefinition::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.InventoryContext.OnGiftBoxOpened__DelegateSignature
// 0x0050 (0x0050 - 0x0000)
struct InventoryContext_OnGiftBoxOpened__DelegateSignature final
{
public:
	struct FOrionLootNotification                 LootNotification;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShowFanfare;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryContext_OnGiftBoxOpened__DelegateSignature) == 0x000008, "Wrong alignment on InventoryContext_OnGiftBoxOpened__DelegateSignature");
static_assert(sizeof(InventoryContext_OnGiftBoxOpened__DelegateSignature) == 0x000050, "Wrong size on InventoryContext_OnGiftBoxOpened__DelegateSignature");
static_assert(offsetof(InventoryContext_OnGiftBoxOpened__DelegateSignature, LootNotification) == 0x000000, "Member 'InventoryContext_OnGiftBoxOpened__DelegateSignature::LootNotification' has a wrong offset!");
static_assert(offsetof(InventoryContext_OnGiftBoxOpened__DelegateSignature, bShowFanfare) == 0x000048, "Member 'InventoryContext_OnGiftBoxOpened__DelegateSignature::bShowFanfare' has a wrong offset!");

// Function BlueprintContext.InventoryContext.OpenGiftBox
// 0x0018 (0x0018 - 0x0000)
struct InventoryContext_OpenGiftBox final
{
public:
	class FString                                 GiftBoxID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFanfare;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryContext_OpenGiftBox) == 0x000008, "Wrong alignment on InventoryContext_OpenGiftBox");
static_assert(sizeof(InventoryContext_OpenGiftBox) == 0x000018, "Wrong size on InventoryContext_OpenGiftBox");
static_assert(offsetof(InventoryContext_OpenGiftBox, GiftBoxID) == 0x000000, "Member 'InventoryContext_OpenGiftBox::GiftBoxID' has a wrong offset!");
static_assert(offsetof(InventoryContext_OpenGiftBox, bShowFanfare) == 0x000010, "Member 'InventoryContext_OpenGiftBox::bShowFanfare' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetActiveBannerID
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetActiveBannerID final
{
public:
	class FString                                 ActiveID;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetActiveBannerID) == 0x000008, "Wrong alignment on InventoryContext_GetActiveBannerID");
static_assert(sizeof(InventoryContext_GetActiveBannerID) == 0x000010, "Wrong size on InventoryContext_GetActiveBannerID");
static_assert(offsetof(InventoryContext_GetActiveBannerID, ActiveID) == 0x000000, "Member 'InventoryContext_GetActiveBannerID::ActiveID' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetActiveSkinForHero
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetActiveSkinForHero final
{
public:
	const class UOrionHeroData*                   HeroData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionSkinItemDefinition*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetActiveSkinForHero) == 0x000008, "Wrong alignment on InventoryContext_GetActiveSkinForHero");
static_assert(sizeof(InventoryContext_GetActiveSkinForHero) == 0x000010, "Wrong size on InventoryContext_GetActiveSkinForHero");
static_assert(offsetof(InventoryContext_GetActiveSkinForHero, HeroData) == 0x000000, "Member 'InventoryContext_GetActiveSkinForHero::HeroData' has a wrong offset!");
static_assert(offsetof(InventoryContext_GetActiveSkinForHero, ReturnValue) == 0x000008, "Member 'InventoryContext_GetActiveSkinForHero::ReturnValue' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetHeroFromData
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetHeroFromData final
{
public:
	class UOrionHeroData*                         HeroData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionMcpHeroItem*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetHeroFromData) == 0x000008, "Wrong alignment on InventoryContext_GetHeroFromData");
static_assert(sizeof(InventoryContext_GetHeroFromData) == 0x000010, "Wrong size on InventoryContext_GetHeroFromData");
static_assert(offsetof(InventoryContext_GetHeroFromData, HeroData) == 0x000000, "Member 'InventoryContext_GetHeroFromData::HeroData' has a wrong offset!");
static_assert(offsetof(InventoryContext_GetHeroFromData, ReturnValue) == 0x000008, "Member 'InventoryContext_GetHeroFromData::ReturnValue' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetNextCardPack
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_GetNextCardPack final
{
public:
	EOrionCardPackType                            CardPackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOrionMcpCardPackItem*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetNextCardPack) == 0x000008, "Wrong alignment on InventoryContext_GetNextCardPack");
static_assert(sizeof(InventoryContext_GetNextCardPack) == 0x000010, "Wrong size on InventoryContext_GetNextCardPack");
static_assert(offsetof(InventoryContext_GetNextCardPack, CardPackType) == 0x000000, "Member 'InventoryContext_GetNextCardPack::CardPackType' has a wrong offset!");
static_assert(offsetof(InventoryContext_GetNextCardPack, ReturnValue) == 0x000008, "Member 'InventoryContext_GetNextCardPack::ReturnValue' has a wrong offset!");

// Function BlueprintContext.InventoryContext.GetNumCardPacks
// 0x0008 (0x0008 - 0x0000)
struct InventoryContext_GetNumCardPacks final
{
public:
	EOrionCardPackType                            CardPackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryContext_GetNumCardPacks) == 0x000004, "Wrong alignment on InventoryContext_GetNumCardPacks");
static_assert(sizeof(InventoryContext_GetNumCardPacks) == 0x000008, "Wrong size on InventoryContext_GetNumCardPacks");
static_assert(offsetof(InventoryContext_GetNumCardPacks, CardPackType) == 0x000000, "Member 'InventoryContext_GetNumCardPacks::CardPackType' has a wrong offset!");
static_assert(offsetof(InventoryContext_GetNumCardPacks, ReturnValue) == 0x000004, "Member 'InventoryContext_GetNumCardPacks::ReturnValue' has a wrong offset!");

// Function BlueprintContext.InventoryContext.IsHeroLocked
// 0x0010 (0x0010 - 0x0000)
struct InventoryContext_IsHeroLocked final
{
public:
	const class UOrionMcpHeroItem*                HeroItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryContext_IsHeroLocked) == 0x000008, "Wrong alignment on InventoryContext_IsHeroLocked");
static_assert(sizeof(InventoryContext_IsHeroLocked) == 0x000010, "Wrong size on InventoryContext_IsHeroLocked");
static_assert(offsetof(InventoryContext_IsHeroLocked, HeroItem) == 0x000000, "Member 'InventoryContext_IsHeroLocked::HeroItem' has a wrong offset!");
static_assert(offsetof(InventoryContext_IsHeroLocked, ReturnValue) == 0x000008, "Member 'InventoryContext_IsHeroLocked::ReturnValue' has a wrong offset!");

// Function BlueprintContext.OrionAsyncAction_OpenCardPack.OpenCardPack
// 0x0020 (0x0020 - 0x0000)
struct OrionAsyncAction_OpenCardPack_OpenCardPack final
{
public:
	class UInventoryContext*                      LibraryContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionMcpCardPackItem*                  CardPackToOpen;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionMcpTokenItem*                     KeyItem_0;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionAsyncAction_OpenCardPack*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAsyncAction_OpenCardPack_OpenCardPack) == 0x000008, "Wrong alignment on OrionAsyncAction_OpenCardPack_OpenCardPack");
static_assert(sizeof(OrionAsyncAction_OpenCardPack_OpenCardPack) == 0x000020, "Wrong size on OrionAsyncAction_OpenCardPack_OpenCardPack");
static_assert(offsetof(OrionAsyncAction_OpenCardPack_OpenCardPack, LibraryContext) == 0x000000, "Member 'OrionAsyncAction_OpenCardPack_OpenCardPack::LibraryContext' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_OpenCardPack_OpenCardPack, CardPackToOpen) == 0x000008, "Member 'OrionAsyncAction_OpenCardPack_OpenCardPack::CardPackToOpen' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_OpenCardPack_OpenCardPack, KeyItem_0) == 0x000010, "Member 'OrionAsyncAction_OpenCardPack_OpenCardPack::KeyItem_0' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_OpenCardPack_OpenCardPack, ReturnValue) == 0x000018, "Member 'OrionAsyncAction_OpenCardPack_OpenCardPack::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.GetAvailableRegions
// 0x0018 (0x0018 - 0x0000)
struct MatchmakingContext_GetAvailableRegions final
{
public:
	TArray<class UMatchmakingRegion*>             OutRegionOptions;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutSelectedRegion;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakingContext_GetAvailableRegions) == 0x000008, "Wrong alignment on MatchmakingContext_GetAvailableRegions");
static_assert(sizeof(MatchmakingContext_GetAvailableRegions) == 0x000018, "Wrong size on MatchmakingContext_GetAvailableRegions");
static_assert(offsetof(MatchmakingContext_GetAvailableRegions, OutRegionOptions) == 0x000000, "Member 'MatchmakingContext_GetAvailableRegions::OutRegionOptions' has a wrong offset!");
static_assert(offsetof(MatchmakingContext_GetAvailableRegions, OutSelectedRegion) == 0x000010, "Member 'MatchmakingContext_GetAvailableRegions::OutSelectedRegion' has a wrong offset!");

// DelegateFunction BlueprintContext.MatchmakingContext.OnRejoinAttemptComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct MatchmakingContext_OnRejoinAttemptComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingContext_OnRejoinAttemptComplete__DelegateSignature) == 0x000001, "Wrong alignment on MatchmakingContext_OnRejoinAttemptComplete__DelegateSignature");
static_assert(sizeof(MatchmakingContext_OnRejoinAttemptComplete__DelegateSignature) == 0x000001, "Wrong size on MatchmakingContext_OnRejoinAttemptComplete__DelegateSignature");
static_assert(offsetof(MatchmakingContext_OnRejoinAttemptComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'MatchmakingContext_OnRejoinAttemptComplete__DelegateSignature::bSuccess' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.RefreshRegionPings
// 0x0010 (0x0010 - 0x0000)
struct MatchmakingContext_RefreshRegionPings final
{
public:
	TDelegate<void()>                             InCompletionDelgate;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingContext_RefreshRegionPings) == 0x000004, "Wrong alignment on MatchmakingContext_RefreshRegionPings");
static_assert(sizeof(MatchmakingContext_RefreshRegionPings) == 0x000010, "Wrong size on MatchmakingContext_RefreshRegionPings");
static_assert(offsetof(MatchmakingContext_RefreshRegionPings, InCompletionDelgate) == 0x000000, "Member 'MatchmakingContext_RefreshRegionPings::InCompletionDelgate' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.SelectRegion
// 0x0018 (0x0018 - 0x0000)
struct MatchmakingContext_SelectRegion final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveRegion;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakingContext_SelectRegion) == 0x000008, "Wrong alignment on MatchmakingContext_SelectRegion");
static_assert(sizeof(MatchmakingContext_SelectRegion) == 0x000018, "Wrong size on MatchmakingContext_SelectRegion");
static_assert(offsetof(MatchmakingContext_SelectRegion, RegionId) == 0x000000, "Member 'MatchmakingContext_SelectRegion::RegionId' has a wrong offset!");
static_assert(offsetof(MatchmakingContext_SelectRegion, bSaveRegion) == 0x000010, "Member 'MatchmakingContext_SelectRegion::bSaveRegion' has a wrong offset!");
static_assert(offsetof(MatchmakingContext_SelectRegion, ReturnValue) == 0x000011, "Member 'MatchmakingContext_SelectRegion::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.StartRejoin
// 0x0010 (0x0010 - 0x0000)
struct MatchmakingContext_StartRejoin final
{
public:
	TDelegate<void(bool bSuccess)>                InCompletionDelegate;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingContext_StartRejoin) == 0x000004, "Wrong alignment on MatchmakingContext_StartRejoin");
static_assert(sizeof(MatchmakingContext_StartRejoin) == 0x000010, "Wrong size on MatchmakingContext_StartRejoin");
static_assert(offsetof(MatchmakingContext_StartRejoin, InCompletionDelegate) == 0x000000, "Member 'MatchmakingContext_StartRejoin::InCompletionDelegate' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.GetCurrentBanInfo
// 0x0010 (0x0010 - 0x0000)
struct MatchmakingContext_GetCurrentBanInfo final
{
public:
	struct FTimespan                              TimeLeft;                                          // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionBanReason                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakingContext_GetCurrentBanInfo) == 0x000008, "Wrong alignment on MatchmakingContext_GetCurrentBanInfo");
static_assert(sizeof(MatchmakingContext_GetCurrentBanInfo) == 0x000010, "Wrong size on MatchmakingContext_GetCurrentBanInfo");
static_assert(offsetof(MatchmakingContext_GetCurrentBanInfo, TimeLeft) == 0x000000, "Member 'MatchmakingContext_GetCurrentBanInfo::TimeLeft' has a wrong offset!");
static_assert(offsetof(MatchmakingContext_GetCurrentBanInfo, ReturnValue) == 0x000008, "Member 'MatchmakingContext_GetCurrentBanInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.GetCurrentPlaylistId
// 0x0004 (0x0004 - 0x0000)
struct MatchmakingContext_GetCurrentPlaylistId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingContext_GetCurrentPlaylistId) == 0x000004, "Wrong alignment on MatchmakingContext_GetCurrentPlaylistId");
static_assert(sizeof(MatchmakingContext_GetCurrentPlaylistId) == 0x000004, "Wrong size on MatchmakingContext_GetCurrentPlaylistId");
static_assert(offsetof(MatchmakingContext_GetCurrentPlaylistId, ReturnValue) == 0x000000, "Member 'MatchmakingContext_GetCurrentPlaylistId::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.GetNativePlaylistIDs
// 0x0020 (0x0020 - 0x0000)
struct MatchmakingContext_GetNativePlaylistIDs final
{
public:
	struct FNativePlaylistIDs                     ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingContext_GetNativePlaylistIDs) == 0x000004, "Wrong alignment on MatchmakingContext_GetNativePlaylistIDs");
static_assert(sizeof(MatchmakingContext_GetNativePlaylistIDs) == 0x000020, "Wrong size on MatchmakingContext_GetNativePlaylistIDs");
static_assert(offsetof(MatchmakingContext_GetNativePlaylistIDs, ReturnValue) == 0x000000, "Member 'MatchmakingContext_GetNativePlaylistIDs::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.GetPingQuality
// 0x0010 (0x0010 - 0x0000)
struct MatchmakingContext_GetPingQuality final
{
public:
	class UMatchmakingRegion*                     Region;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPingQuality                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakingContext_GetPingQuality) == 0x000008, "Wrong alignment on MatchmakingContext_GetPingQuality");
static_assert(sizeof(MatchmakingContext_GetPingQuality) == 0x000010, "Wrong size on MatchmakingContext_GetPingQuality");
static_assert(offsetof(MatchmakingContext_GetPingQuality, Region) == 0x000000, "Member 'MatchmakingContext_GetPingQuality::Region' has a wrong offset!");
static_assert(offsetof(MatchmakingContext_GetPingQuality, ReturnValue) == 0x000008, "Member 'MatchmakingContext_GetPingQuality::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.GetSelectedRegionId
// 0x0010 (0x0010 - 0x0000)
struct MatchmakingContext_GetSelectedRegionId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingContext_GetSelectedRegionId) == 0x000008, "Wrong alignment on MatchmakingContext_GetSelectedRegionId");
static_assert(sizeof(MatchmakingContext_GetSelectedRegionId) == 0x000010, "Wrong size on MatchmakingContext_GetSelectedRegionId");
static_assert(offsetof(MatchmakingContext_GetSelectedRegionId, ReturnValue) == 0x000000, "Member 'MatchmakingContext_GetSelectedRegionId::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchmakingContext.HasValidOnlinePresence
// 0x0020 (0x0020 - 0x0000)
struct MatchmakingContext_HasValidOnlinePresence final
{
public:
	class FText                                   ErrorString;                                       // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakingContext_HasValidOnlinePresence) == 0x000008, "Wrong alignment on MatchmakingContext_HasValidOnlinePresence");
static_assert(sizeof(MatchmakingContext_HasValidOnlinePresence) == 0x000020, "Wrong size on MatchmakingContext_HasValidOnlinePresence");
static_assert(offsetof(MatchmakingContext_HasValidOnlinePresence, ErrorString) == 0x000000, "Member 'MatchmakingContext_HasValidOnlinePresence::ErrorString' has a wrong offset!");
static_assert(offsetof(MatchmakingContext_HasValidOnlinePresence, ReturnValue) == 0x000018, "Member 'MatchmakingContext_HasValidOnlinePresence::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchTutorialContext.EndTutorial
// 0x0008 (0x0008 - 0x0000)
struct MatchTutorialContext_EndTutorial final
{
public:
	TSubclassOf<class UOrionTutorial>             TutorialClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTutorialContext_EndTutorial) == 0x000008, "Wrong alignment on MatchTutorialContext_EndTutorial");
static_assert(sizeof(MatchTutorialContext_EndTutorial) == 0x000008, "Wrong size on MatchTutorialContext_EndTutorial");
static_assert(offsetof(MatchTutorialContext_EndTutorial, TutorialClass) == 0x000000, "Member 'MatchTutorialContext_EndTutorial::TutorialClass' has a wrong offset!");

// Function BlueprintContext.MatchTutorialContext.RequestFade
// 0x0010 (0x0010 - 0x0000)
struct MatchTutorialContext_RequestFade final
{
public:
	class FName                                   TutorialID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionHUDFadeRequest                          FadeType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchTutorialContext_RequestFade) == 0x000004, "Wrong alignment on MatchTutorialContext_RequestFade");
static_assert(sizeof(MatchTutorialContext_RequestFade) == 0x000010, "Wrong size on MatchTutorialContext_RequestFade");
static_assert(offsetof(MatchTutorialContext_RequestFade, TutorialID) == 0x000000, "Member 'MatchTutorialContext_RequestFade::TutorialID' has a wrong offset!");
static_assert(offsetof(MatchTutorialContext_RequestFade, FadeType) == 0x000008, "Member 'MatchTutorialContext_RequestFade::FadeType' has a wrong offset!");

// Function BlueprintContext.MatchTutorialContext.RequestPathToActor
// 0x0008 (0x0008 - 0x0000)
struct MatchTutorialContext_RequestPathToActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTutorialContext_RequestPathToActor) == 0x000008, "Wrong alignment on MatchTutorialContext_RequestPathToActor");
static_assert(sizeof(MatchTutorialContext_RequestPathToActor) == 0x000008, "Wrong size on MatchTutorialContext_RequestPathToActor");
static_assert(offsetof(MatchTutorialContext_RequestPathToActor, TargetActor) == 0x000000, "Member 'MatchTutorialContext_RequestPathToActor::TargetActor' has a wrong offset!");

// Function BlueprintContext.MatchTutorialContext.StartTutorial
// 0x0008 (0x0008 - 0x0000)
struct MatchTutorialContext_StartTutorial final
{
public:
	TSubclassOf<class UOrionTutorial>             TutorialClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTutorialContext_StartTutorial) == 0x000008, "Wrong alignment on MatchTutorialContext_StartTutorial");
static_assert(sizeof(MatchTutorialContext_StartTutorial) == 0x000008, "Wrong size on MatchTutorialContext_StartTutorial");
static_assert(offsetof(MatchTutorialContext_StartTutorial, TutorialClass) == 0x000000, "Member 'MatchTutorialContext_StartTutorial::TutorialClass' has a wrong offset!");

// Function BlueprintContext.MatchTutorialContext.CurrentlyPlayingTutorial
// 0x0001 (0x0001 - 0x0000)
struct MatchTutorialContext_CurrentlyPlayingTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTutorialContext_CurrentlyPlayingTutorial) == 0x000001, "Wrong alignment on MatchTutorialContext_CurrentlyPlayingTutorial");
static_assert(sizeof(MatchTutorialContext_CurrentlyPlayingTutorial) == 0x000001, "Wrong size on MatchTutorialContext_CurrentlyPlayingTutorial");
static_assert(offsetof(MatchTutorialContext_CurrentlyPlayingTutorial, ReturnValue) == 0x000000, "Member 'MatchTutorialContext_CurrentlyPlayingTutorial::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchTutorialContext.GetHUDTutorialWidgetNames
// 0x0100 (0x0100 - 0x0000)
struct MatchTutorialContext_GetHUDTutorialWidgetNames final
{
public:
	struct FOrionHUDTutorialWidgetNames           ReturnValue;                                       // 0x0000(0x0100)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTutorialContext_GetHUDTutorialWidgetNames) == 0x000008, "Wrong alignment on MatchTutorialContext_GetHUDTutorialWidgetNames");
static_assert(sizeof(MatchTutorialContext_GetHUDTutorialWidgetNames) == 0x000100, "Wrong size on MatchTutorialContext_GetHUDTutorialWidgetNames");
static_assert(offsetof(MatchTutorialContext_GetHUDTutorialWidgetNames, ReturnValue) == 0x000000, "Member 'MatchTutorialContext_GetHUDTutorialWidgetNames::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MatchTutorialContext.InTutorialMode
// 0x0001 (0x0001 - 0x0000)
struct MatchTutorialContext_InTutorialMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTutorialContext_InTutorialMode) == 0x000001, "Wrong alignment on MatchTutorialContext_InTutorialMode");
static_assert(sizeof(MatchTutorialContext_InTutorialMode) == 0x000001, "Wrong size on MatchTutorialContext_InTutorialMode");
static_assert(offsetof(MatchTutorialContext_InTutorialMode, ReturnValue) == 0x000000, "Member 'MatchTutorialContext_InTutorialMode::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.AutoLogin
// 0x0010 (0x0010 - 0x0000)
struct McpContext_AutoLogin final
{
public:
	TDelegate<void(ELoginResult Result, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_AutoLogin) == 0x000004, "Wrong alignment on McpContext_AutoLogin");
static_assert(sizeof(McpContext_AutoLogin) == 0x000010, "Wrong size on McpContext_AutoLogin");
static_assert(offsetof(McpContext_AutoLogin, OnCompleteDelegate) == 0x000000, "Member 'McpContext_AutoLogin::OnCompleteDelegate' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnLoginRequestComplete__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct McpContext_OnLoginRequestComplete__DelegateSignature final
{
public:
	ELoginResult                                  Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnLoginRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnLoginRequestComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnLoginRequestComplete__DelegateSignature) == 0x000020, "Wrong size on McpContext_OnLoginRequestComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnLoginRequestComplete__DelegateSignature, Result) == 0x000000, "Member 'McpContext_OnLoginRequestComplete__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(McpContext_OnLoginRequestComplete__DelegateSignature, MESSAGE) == 0x000008, "Member 'McpContext_OnLoginRequestComplete__DelegateSignature::MESSAGE' has a wrong offset!");

// Function BlueprintContext.McpContext.CheckHasRedeemForAccess
// 0x0010 (0x0010 - 0x0000)
struct McpContext_CheckHasRedeemForAccess final
{
public:
	TDelegate<void(bool bHasInvite, bool bHasPurchase)> OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_CheckHasRedeemForAccess) == 0x000004, "Wrong alignment on McpContext_CheckHasRedeemForAccess");
static_assert(sizeof(McpContext_CheckHasRedeemForAccess) == 0x000010, "Wrong size on McpContext_CheckHasRedeemForAccess");
static_assert(offsetof(McpContext_CheckHasRedeemForAccess, OnCompleteDelegate) == 0x000000, "Member 'McpContext_CheckHasRedeemForAccess::OnCompleteDelegate' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnCheckHasRedeemForAccess__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct McpContext_OnCheckHasRedeemForAccess__DelegateSignature final
{
public:
	bool                                          bHasInvite;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPurchase;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnCheckHasRedeemForAccess__DelegateSignature) == 0x000001, "Wrong alignment on McpContext_OnCheckHasRedeemForAccess__DelegateSignature");
static_assert(sizeof(McpContext_OnCheckHasRedeemForAccess__DelegateSignature) == 0x000002, "Wrong size on McpContext_OnCheckHasRedeemForAccess__DelegateSignature");
static_assert(offsetof(McpContext_OnCheckHasRedeemForAccess__DelegateSignature, bHasInvite) == 0x000000, "Member 'McpContext_OnCheckHasRedeemForAccess__DelegateSignature::bHasInvite' has a wrong offset!");
static_assert(offsetof(McpContext_OnCheckHasRedeemForAccess__DelegateSignature, bHasPurchase) == 0x000001, "Member 'McpContext_OnCheckHasRedeemForAccess__DelegateSignature::bHasPurchase' has a wrong offset!");

// Function BlueprintContext.McpContext.CheckPurchaseRequiredForAccess
// 0x0010 (0x0010 - 0x0000)
struct McpContext_CheckPurchaseRequiredForAccess final
{
public:
	TDelegate<void(bool bPurchaseRequired)>       OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_CheckPurchaseRequiredForAccess) == 0x000004, "Wrong alignment on McpContext_CheckPurchaseRequiredForAccess");
static_assert(sizeof(McpContext_CheckPurchaseRequiredForAccess) == 0x000010, "Wrong size on McpContext_CheckPurchaseRequiredForAccess");
static_assert(offsetof(McpContext_CheckPurchaseRequiredForAccess, OnCompleteDelegate) == 0x000000, "Member 'McpContext_CheckPurchaseRequiredForAccess::OnCompleteDelegate' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnCheckPurchaseRequiredForAccess__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct McpContext_OnCheckPurchaseRequiredForAccess__DelegateSignature final
{
public:
	bool                                          bPurchaseRequired;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnCheckPurchaseRequiredForAccess__DelegateSignature) == 0x000001, "Wrong alignment on McpContext_OnCheckPurchaseRequiredForAccess__DelegateSignature");
static_assert(sizeof(McpContext_OnCheckPurchaseRequiredForAccess__DelegateSignature) == 0x000001, "Wrong size on McpContext_OnCheckPurchaseRequiredForAccess__DelegateSignature");
static_assert(offsetof(McpContext_OnCheckPurchaseRequiredForAccess__DelegateSignature, bPurchaseRequired) == 0x000000, "Member 'McpContext_OnCheckPurchaseRequiredForAccess__DelegateSignature::bPurchaseRequired' has a wrong offset!");

// Function BlueprintContext.McpContext.CreateHeadlessAccount
// 0x0028 (0x0028 - 0x0000)
struct McpContext_CreateHeadlessAccount final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(ECreateAccountResult Result, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_CreateHeadlessAccount) == 0x000008, "Wrong alignment on McpContext_CreateHeadlessAccount");
static_assert(sizeof(McpContext_CreateHeadlessAccount) == 0x000028, "Wrong size on McpContext_CreateHeadlessAccount");
static_assert(offsetof(McpContext_CreateHeadlessAccount, DisplayName) == 0x000000, "Member 'McpContext_CreateHeadlessAccount::DisplayName' has a wrong offset!");
static_assert(offsetof(McpContext_CreateHeadlessAccount, OnCompleteDelegate) == 0x000018, "Member 'McpContext_CreateHeadlessAccount::OnCompleteDelegate' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnCreateAccountRequestComplete__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct McpContext_OnCreateAccountRequestComplete__DelegateSignature final
{
public:
	ECreateAccountResult                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnCreateAccountRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnCreateAccountRequestComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnCreateAccountRequestComplete__DelegateSignature) == 0x000020, "Wrong size on McpContext_OnCreateAccountRequestComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnCreateAccountRequestComplete__DelegateSignature, Result) == 0x000000, "Member 'McpContext_OnCreateAccountRequestComplete__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(McpContext_OnCreateAccountRequestComplete__DelegateSignature, MESSAGE) == 0x000008, "Member 'McpContext_OnCreateAccountRequestComplete__DelegateSignature::MESSAGE' has a wrong offset!");

// Function BlueprintContext.McpContext.GetEULAText
// 0x0018 (0x0018 - 0x0000)
struct McpContext_GetEULAText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetEULAText) == 0x000008, "Wrong alignment on McpContext_GetEULAText");
static_assert(sizeof(McpContext_GetEULAText) == 0x000018, "Wrong size on McpContext_GetEULAText");
static_assert(offsetof(McpContext_GetEULAText, ReturnValue) == 0x000000, "Member 'McpContext_GetEULAText::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.GetFriendCodeDescription
// 0x0038 (0x0038 - 0x0000)
struct McpContext_GetFriendCodeDescription final
{
public:
	struct FFriendCode                            FriendCode;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetFriendCodeDescription) == 0x000008, "Wrong alignment on McpContext_GetFriendCodeDescription");
static_assert(sizeof(McpContext_GetFriendCodeDescription) == 0x000038, "Wrong size on McpContext_GetFriendCodeDescription");
static_assert(offsetof(McpContext_GetFriendCodeDescription, FriendCode) == 0x000000, "Member 'McpContext_GetFriendCodeDescription::FriendCode' has a wrong offset!");
static_assert(offsetof(McpContext_GetFriendCodeDescription, ReturnValue) == 0x000020, "Member 'McpContext_GetFriendCodeDescription::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.GetFriendCodeDisplayName
// 0x0038 (0x0038 - 0x0000)
struct McpContext_GetFriendCodeDisplayName final
{
public:
	struct FFriendCode                            FriendCode;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetFriendCodeDisplayName) == 0x000008, "Wrong alignment on McpContext_GetFriendCodeDisplayName");
static_assert(sizeof(McpContext_GetFriendCodeDisplayName) == 0x000038, "Wrong size on McpContext_GetFriendCodeDisplayName");
static_assert(offsetof(McpContext_GetFriendCodeDisplayName, FriendCode) == 0x000000, "Member 'McpContext_GetFriendCodeDisplayName::FriendCode' has a wrong offset!");
static_assert(offsetof(McpContext_GetFriendCodeDisplayName, ReturnValue) == 0x000020, "Member 'McpContext_GetFriendCodeDisplayName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.HACK_SetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct McpContext_HACK_SetDisplayName final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_HACK_SetDisplayName) == 0x000008, "Wrong alignment on McpContext_HACK_SetDisplayName");
static_assert(sizeof(McpContext_HACK_SetDisplayName) == 0x000010, "Wrong size on McpContext_HACK_SetDisplayName");
static_assert(offsetof(McpContext_HACK_SetDisplayName, DisplayName) == 0x000000, "Member 'McpContext_HACK_SetDisplayName::DisplayName' has a wrong offset!");

// Function BlueprintContext.McpContext.IssueFriendCode
// 0x0010 (0x0010 - 0x0000)
struct McpContext_IssueFriendCode final
{
public:
	TDelegate<void(bool bSuccess, struct FFriendCode& FriendCode)> OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IssueFriendCode) == 0x000004, "Wrong alignment on McpContext_IssueFriendCode");
static_assert(sizeof(McpContext_IssueFriendCode) == 0x000010, "Wrong size on McpContext_IssueFriendCode");
static_assert(offsetof(McpContext_IssueFriendCode, OnCompleteDelegate) == 0x000000, "Member 'McpContext_IssueFriendCode::OnCompleteDelegate' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnIssueFriendCodeComplete__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct McpContext_OnIssueFriendCodeComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriendCode                            FriendCode;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnIssueFriendCodeComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnIssueFriendCodeComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnIssueFriendCodeComplete__DelegateSignature) == 0x000028, "Wrong size on McpContext_OnIssueFriendCodeComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnIssueFriendCodeComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'McpContext_OnIssueFriendCodeComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(McpContext_OnIssueFriendCodeComplete__DelegateSignature, FriendCode) == 0x000008, "Member 'McpContext_OnIssueFriendCodeComplete__DelegateSignature::FriendCode' has a wrong offset!");

// Function BlueprintContext.McpContext.Login
// 0x0048 (0x0048 - 0x0000)
struct McpContext_Login final
{
public:
	class FText                                   Username;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Password;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRememberMe;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ELoginResult Result, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_Login) == 0x000008, "Wrong alignment on McpContext_Login");
static_assert(sizeof(McpContext_Login) == 0x000048, "Wrong size on McpContext_Login");
static_assert(offsetof(McpContext_Login, Username) == 0x000000, "Member 'McpContext_Login::Username' has a wrong offset!");
static_assert(offsetof(McpContext_Login, Password) == 0x000018, "Member 'McpContext_Login::Password' has a wrong offset!");
static_assert(offsetof(McpContext_Login, bRememberMe) == 0x000030, "Member 'McpContext_Login::bRememberMe' has a wrong offset!");
static_assert(offsetof(McpContext_Login, OnCompleteDelegate) == 0x000038, "Member 'McpContext_Login::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.LoginAuthCode
// 0x0020 (0x0020 - 0x0000)
struct McpContext_LoginAuthCode final
{
public:
	class FString                                 AuthCode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(ELoginResult Result, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_LoginAuthCode) == 0x000008, "Wrong alignment on McpContext_LoginAuthCode");
static_assert(sizeof(McpContext_LoginAuthCode) == 0x000020, "Wrong size on McpContext_LoginAuthCode");
static_assert(offsetof(McpContext_LoginAuthCode, AuthCode) == 0x000000, "Member 'McpContext_LoginAuthCode::AuthCode' has a wrong offset!");
static_assert(offsetof(McpContext_LoginAuthCode, OnCompleteDelegate) == 0x000010, "Member 'McpContext_LoginAuthCode::OnCompleteDelegate' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnDisplayNameUpdated__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct McpContext_OnDisplayNameUpdated__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnDisplayNameUpdated__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnDisplayNameUpdated__DelegateSignature");
static_assert(sizeof(McpContext_OnDisplayNameUpdated__DelegateSignature) == 0x000020, "Wrong size on McpContext_OnDisplayNameUpdated__DelegateSignature");
static_assert(offsetof(McpContext_OnDisplayNameUpdated__DelegateSignature, bSuccess) == 0x000000, "Member 'McpContext_OnDisplayNameUpdated__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(McpContext_OnDisplayNameUpdated__DelegateSignature, MESSAGE) == 0x000008, "Member 'McpContext_OnDisplayNameUpdated__DelegateSignature::MESSAGE' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnEulaAvailable__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct McpContext_OnEulaAvailable__DelegateSignature final
{
public:
	class FText                                   EulaText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnEulaAvailable__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnEulaAvailable__DelegateSignature");
static_assert(sizeof(McpContext_OnEulaAvailable__DelegateSignature) == 0x000018, "Wrong size on McpContext_OnEulaAvailable__DelegateSignature");
static_assert(offsetof(McpContext_OnEulaAvailable__DelegateSignature, EulaText) == 0x000000, "Member 'McpContext_OnEulaAvailable__DelegateSignature::EulaText' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnLinkedConsoleAccount__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct McpContext_OnLinkedConsoleAccount__DelegateSignature final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ConsoleDisplayName;                                // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnLinkedConsoleAccount__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnLinkedConsoleAccount__DelegateSignature");
static_assert(sizeof(McpContext_OnLinkedConsoleAccount__DelegateSignature) == 0x000030, "Wrong size on McpContext_OnLinkedConsoleAccount__DelegateSignature");
static_assert(offsetof(McpContext_OnLinkedConsoleAccount__DelegateSignature, DisplayName) == 0x000000, "Member 'McpContext_OnLinkedConsoleAccount__DelegateSignature::DisplayName' has a wrong offset!");
static_assert(offsetof(McpContext_OnLinkedConsoleAccount__DelegateSignature, ConsoleDisplayName) == 0x000018, "Member 'McpContext_OnLinkedConsoleAccount__DelegateSignature::ConsoleDisplayName' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnQueryUnredeemedFriendCodesComplete__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFriendCode>                    FriendCodes;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature) == 0x000018, "Wrong size on McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature, FriendCodes) == 0x000008, "Member 'McpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature::FriendCodes' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnSendFriendCodePlatformMessageComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct McpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature final
{
public:
	bool                                          bMessageSent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature) == 0x000001, "Wrong alignment on McpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature) == 0x000001, "Wrong size on McpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature, bMessageSent) == 0x000000, "Member 'McpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature::bMessageSent' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnUnlinkAccountRequestComplete__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct McpContext_OnUnlinkAccountRequestComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnUnlinkAccountRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnUnlinkAccountRequestComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnUnlinkAccountRequestComplete__DelegateSignature) == 0x000020, "Wrong size on McpContext_OnUnlinkAccountRequestComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnUnlinkAccountRequestComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'McpContext_OnUnlinkAccountRequestComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(McpContext_OnUnlinkAccountRequestComplete__DelegateSignature, MESSAGE) == 0x000008, "Member 'McpContext_OnUnlinkAccountRequestComplete__DelegateSignature::MESSAGE' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnWebCreateEpicAccountRequestComplete__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 AuthCode;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature) == 0x000030, "Wrong size on McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature, MESSAGE) == 0x000008, "Member 'McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature::MESSAGE' has a wrong offset!");
static_assert(offsetof(McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature, AuthCode) == 0x000020, "Member 'McpContext_OnWebCreateEpicAccountRequestComplete__DelegateSignature::AuthCode' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnWebForgotPasswordRequestComplete__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature) == 0x000020, "Wrong size on McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature, MESSAGE) == 0x000008, "Member 'McpContext_OnWebForgotPasswordRequestComplete__DelegateSignature::MESSAGE' has a wrong offset!");

// DelegateFunction BlueprintContext.McpContext.OnWebUpgradeEpicAccountRequestComplete__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature) == 0x000008, "Wrong alignment on McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature");
static_assert(sizeof(McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature) == 0x000020, "Wrong size on McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature");
static_assert(offsetof(McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature, MESSAGE) == 0x000008, "Member 'McpContext_OnWebUpgradeEpicAccountRequestComplete__DelegateSignature::MESSAGE' has a wrong offset!");

// Function BlueprintContext.McpContext.QueryUnredeemedFriendCodes
// 0x0010 (0x0010 - 0x0000)
struct McpContext_QueryUnredeemedFriendCodes final
{
public:
	TDelegate<void(bool bSuccess, TArray<struct FFriendCode>& FriendCodes)> OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_QueryUnredeemedFriendCodes) == 0x000004, "Wrong alignment on McpContext_QueryUnredeemedFriendCodes");
static_assert(sizeof(McpContext_QueryUnredeemedFriendCodes) == 0x000010, "Wrong size on McpContext_QueryUnredeemedFriendCodes");
static_assert(offsetof(McpContext_QueryUnredeemedFriendCodes, OnCompleteDelegate) == 0x000000, "Member 'McpContext_QueryUnredeemedFriendCodes::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.SendFriendCodePlatformMessage
// 0x0030 (0x0030 - 0x0000)
struct McpContext_SendFriendCodePlatformMessage final
{
public:
	struct FFriendCode                            FriendCode;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bMessageSent)>            OnCompleteDelegate;                                // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_SendFriendCodePlatformMessage) == 0x000008, "Wrong alignment on McpContext_SendFriendCodePlatformMessage");
static_assert(sizeof(McpContext_SendFriendCodePlatformMessage) == 0x000030, "Wrong size on McpContext_SendFriendCodePlatformMessage");
static_assert(offsetof(McpContext_SendFriendCodePlatformMessage, FriendCode) == 0x000000, "Member 'McpContext_SendFriendCodePlatformMessage::FriendCode' has a wrong offset!");
static_assert(offsetof(McpContext_SendFriendCodePlatformMessage, OnCompleteDelegate) == 0x000020, "Member 'McpContext_SendFriendCodePlatformMessage::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.UnLinkConsoleAccount
// 0x0010 (0x0010 - 0x0000)
struct McpContext_UnLinkConsoleAccount final
{
public:
	TDelegate<void(bool bSuccess, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_UnLinkConsoleAccount) == 0x000004, "Wrong alignment on McpContext_UnLinkConsoleAccount");
static_assert(sizeof(McpContext_UnLinkConsoleAccount) == 0x000010, "Wrong size on McpContext_UnLinkConsoleAccount");
static_assert(offsetof(McpContext_UnLinkConsoleAccount, OnCompleteDelegate) == 0x000000, "Member 'McpContext_UnLinkConsoleAccount::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.UpdateDisplayName
// 0x0020 (0x0020 - 0x0000)
struct McpContext_UpdateDisplayName final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_UpdateDisplayName) == 0x000008, "Wrong alignment on McpContext_UpdateDisplayName");
static_assert(sizeof(McpContext_UpdateDisplayName) == 0x000020, "Wrong size on McpContext_UpdateDisplayName");
static_assert(offsetof(McpContext_UpdateDisplayName, DisplayName) == 0x000000, "Member 'McpContext_UpdateDisplayName::DisplayName' has a wrong offset!");
static_assert(offsetof(McpContext_UpdateDisplayName, OnCompleteDelegate) == 0x000010, "Member 'McpContext_UpdateDisplayName::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.WebCreateEpicAccount
// 0x0028 (0x0028 - 0x0000)
struct McpContext_WebCreateEpicAccount final
{
public:
	class FText                                   Email;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, class FText& MESSAGE, const class FString& AuthCode)> OnCompleteDelegate;                                // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_WebCreateEpicAccount) == 0x000008, "Wrong alignment on McpContext_WebCreateEpicAccount");
static_assert(sizeof(McpContext_WebCreateEpicAccount) == 0x000028, "Wrong size on McpContext_WebCreateEpicAccount");
static_assert(offsetof(McpContext_WebCreateEpicAccount, Email) == 0x000000, "Member 'McpContext_WebCreateEpicAccount::Email' has a wrong offset!");
static_assert(offsetof(McpContext_WebCreateEpicAccount, OnCompleteDelegate) == 0x000018, "Member 'McpContext_WebCreateEpicAccount::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.WebForgotPasswordEpicAccount
// 0x0028 (0x0028 - 0x0000)
struct McpContext_WebForgotPasswordEpicAccount final
{
public:
	class FText                                   Email;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_WebForgotPasswordEpicAccount) == 0x000008, "Wrong alignment on McpContext_WebForgotPasswordEpicAccount");
static_assert(sizeof(McpContext_WebForgotPasswordEpicAccount) == 0x000028, "Wrong size on McpContext_WebForgotPasswordEpicAccount");
static_assert(offsetof(McpContext_WebForgotPasswordEpicAccount, Email) == 0x000000, "Member 'McpContext_WebForgotPasswordEpicAccount::Email' has a wrong offset!");
static_assert(offsetof(McpContext_WebForgotPasswordEpicAccount, OnCompleteDelegate) == 0x000018, "Member 'McpContext_WebForgotPasswordEpicAccount::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.WebUpgradeEpicAccount
// 0x0028 (0x0028 - 0x0000)
struct McpContext_WebUpgradeEpicAccount final
{
public:
	class FText                                   Email;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, class FText& MESSAGE)> OnCompleteDelegate;                                // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_WebUpgradeEpicAccount) == 0x000008, "Wrong alignment on McpContext_WebUpgradeEpicAccount");
static_assert(sizeof(McpContext_WebUpgradeEpicAccount) == 0x000028, "Wrong size on McpContext_WebUpgradeEpicAccount");
static_assert(offsetof(McpContext_WebUpgradeEpicAccount, Email) == 0x000000, "Member 'McpContext_WebUpgradeEpicAccount::Email' has a wrong offset!");
static_assert(offsetof(McpContext_WebUpgradeEpicAccount, OnCompleteDelegate) == 0x000018, "Member 'McpContext_WebUpgradeEpicAccount::OnCompleteDelegate' has a wrong offset!");

// Function BlueprintContext.McpContext.DisplayNameUpdateAllowed
// 0x0001 (0x0001 - 0x0000)
struct McpContext_DisplayNameUpdateAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_DisplayNameUpdateAllowed) == 0x000001, "Wrong alignment on McpContext_DisplayNameUpdateAllowed");
static_assert(sizeof(McpContext_DisplayNameUpdateAllowed) == 0x000001, "Wrong size on McpContext_DisplayNameUpdateAllowed");
static_assert(offsetof(McpContext_DisplayNameUpdateAllowed, ReturnValue) == 0x000000, "Member 'McpContext_DisplayNameUpdateAllowed::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.GetAppName
// 0x0010 (0x0010 - 0x0000)
struct McpContext_GetAppName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetAppName) == 0x000008, "Wrong alignment on McpContext_GetAppName");
static_assert(sizeof(McpContext_GetAppName) == 0x000010, "Wrong size on McpContext_GetAppName");
static_assert(offsetof(McpContext_GetAppName, ReturnValue) == 0x000000, "Member 'McpContext_GetAppName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.GetGameSessionWatermarkText
// 0x0018 (0x0018 - 0x0000)
struct McpContext_GetGameSessionWatermarkText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetGameSessionWatermarkText) == 0x000008, "Wrong alignment on McpContext_GetGameSessionWatermarkText");
static_assert(sizeof(McpContext_GetGameSessionWatermarkText) == 0x000018, "Wrong size on McpContext_GetGameSessionWatermarkText");
static_assert(offsetof(McpContext_GetGameSessionWatermarkText, ReturnValue) == 0x000000, "Member 'McpContext_GetGameSessionWatermarkText::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.GetLoginStatus
// 0x0018 (0x0018 - 0x0000)
struct McpContext_GetLoginStatus final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetLoginStatus) == 0x000008, "Wrong alignment on McpContext_GetLoginStatus");
static_assert(sizeof(McpContext_GetLoginStatus) == 0x000018, "Wrong size on McpContext_GetLoginStatus");
static_assert(offsetof(McpContext_GetLoginStatus, ReturnValue) == 0x000000, "Member 'McpContext_GetLoginStatus::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.GetNumFriendCodesToIssue
// 0x0004 (0x0004 - 0x0000)
struct McpContext_GetNumFriendCodesToIssue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetNumFriendCodesToIssue) == 0x000004, "Wrong alignment on McpContext_GetNumFriendCodesToIssue");
static_assert(sizeof(McpContext_GetNumFriendCodesToIssue) == 0x000004, "Wrong size on McpContext_GetNumFriendCodesToIssue");
static_assert(offsetof(McpContext_GetNumFriendCodesToIssue, ReturnValue) == 0x000000, "Member 'McpContext_GetNumFriendCodesToIssue::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.GetUsername
// 0x0018 (0x0018 - 0x0000)
struct McpContext_GetUsername final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_GetUsername) == 0x000008, "Wrong alignment on McpContext_GetUsername");
static_assert(sizeof(McpContext_GetUsername) == 0x000018, "Wrong size on McpContext_GetUsername");
static_assert(offsetof(McpContext_GetUsername, ReturnValue) == 0x000000, "Member 'McpContext_GetUsername::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.HasPlaystationPlus
// 0x0001 (0x0001 - 0x0000)
struct McpContext_HasPlaystationPlus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_HasPlaystationPlus) == 0x000001, "Wrong alignment on McpContext_HasPlaystationPlus");
static_assert(sizeof(McpContext_HasPlaystationPlus) == 0x000001, "Wrong size on McpContext_HasPlaystationPlus");
static_assert(offsetof(McpContext_HasPlaystationPlus, ReturnValue) == 0x000000, "Member 'McpContext_HasPlaystationPlus::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsBusy
// 0x0001 (0x0001 - 0x0000)
struct McpContext_IsBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IsBusy) == 0x000001, "Wrong alignment on McpContext_IsBusy");
static_assert(sizeof(McpContext_IsBusy) == 0x000001, "Wrong size on McpContext_IsBusy");
static_assert(offsetof(McpContext_IsBusy, ReturnValue) == 0x000000, "Member 'McpContext_IsBusy::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsHeadlessAccount
// 0x0001 (0x0001 - 0x0000)
struct McpContext_IsHeadlessAccount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IsHeadlessAccount) == 0x000001, "Wrong alignment on McpContext_IsHeadlessAccount");
static_assert(sizeof(McpContext_IsHeadlessAccount) == 0x000001, "Wrong size on McpContext_IsHeadlessAccount");
static_assert(offsetof(McpContext_IsHeadlessAccount, ReturnValue) == 0x000000, "Member 'McpContext_IsHeadlessAccount::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsHeadlessAccountAllowed
// 0x0001 (0x0001 - 0x0000)
struct McpContext_IsHeadlessAccountAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IsHeadlessAccountAllowed) == 0x000001, "Wrong alignment on McpContext_IsHeadlessAccountAllowed");
static_assert(sizeof(McpContext_IsHeadlessAccountAllowed) == 0x000001, "Wrong size on McpContext_IsHeadlessAccountAllowed");
static_assert(offsetof(McpContext_IsHeadlessAccountAllowed, ReturnValue) == 0x000000, "Member 'McpContext_IsHeadlessAccountAllowed::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct McpContext_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IsLoggedIn) == 0x000001, "Wrong alignment on McpContext_IsLoggedIn");
static_assert(sizeof(McpContext_IsLoggedIn) == 0x000001, "Wrong size on McpContext_IsLoggedIn");
static_assert(offsetof(McpContext_IsLoggedIn, ReturnValue) == 0x000000, "Member 'McpContext_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsRememberMeAllowed
// 0x0001 (0x0001 - 0x0000)
struct McpContext_IsRememberMeAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IsRememberMeAllowed) == 0x000001, "Wrong alignment on McpContext_IsRememberMeAllowed");
static_assert(sizeof(McpContext_IsRememberMeAllowed) == 0x000001, "Wrong size on McpContext_IsRememberMeAllowed");
static_assert(offsetof(McpContext_IsRememberMeAllowed, ReturnValue) == 0x000000, "Member 'McpContext_IsRememberMeAllowed::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsRememberMeChecked
// 0x0001 (0x0001 - 0x0000)
struct McpContext_IsRememberMeChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IsRememberMeChecked) == 0x000001, "Wrong alignment on McpContext_IsRememberMeChecked");
static_assert(sizeof(McpContext_IsRememberMeChecked) == 0x000001, "Wrong size on McpContext_IsRememberMeChecked");
static_assert(offsetof(McpContext_IsRememberMeChecked, ReturnValue) == 0x000000, "Member 'McpContext_IsRememberMeChecked::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsUnlinkConsoleAccountAllowed
// 0x0001 (0x0001 - 0x0000)
struct McpContext_IsUnlinkConsoleAccountAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_IsUnlinkConsoleAccountAllowed) == 0x000001, "Wrong alignment on McpContext_IsUnlinkConsoleAccountAllowed");
static_assert(sizeof(McpContext_IsUnlinkConsoleAccountAllowed) == 0x000001, "Wrong size on McpContext_IsUnlinkConsoleAccountAllowed");
static_assert(offsetof(McpContext_IsUnlinkConsoleAccountAllowed, ReturnValue) == 0x000000, "Member 'McpContext_IsUnlinkConsoleAccountAllowed::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.IsValidEmail
// 0x0020 (0x0020 - 0x0000)
struct McpContext_IsValidEmail final
{
public:
	class FText                                   InEmail;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(McpContext_IsValidEmail) == 0x000008, "Wrong alignment on McpContext_IsValidEmail");
static_assert(sizeof(McpContext_IsValidEmail) == 0x000020, "Wrong size on McpContext_IsValidEmail");
static_assert(offsetof(McpContext_IsValidEmail, InEmail) == 0x000000, "Member 'McpContext_IsValidEmail::InEmail' has a wrong offset!");
static_assert(offsetof(McpContext_IsValidEmail, ReturnValue) == 0x000018, "Member 'McpContext_IsValidEmail::ReturnValue' has a wrong offset!");

// Function BlueprintContext.McpContext.ShouldShowWatermark
// 0x0001 (0x0001 - 0x0000)
struct McpContext_ShouldShowWatermark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(McpContext_ShouldShowWatermark) == 0x000001, "Wrong alignment on McpContext_ShouldShowWatermark");
static_assert(sizeof(McpContext_ShouldShowWatermark) == 0x000001, "Wrong size on McpContext_ShouldShowWatermark");
static_assert(offsetof(McpContext_ShouldShowWatermark, ReturnValue) == 0x000000, "Member 'McpContext_ShouldShowWatermark::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MenuContext.BroadcastFrontEndTabActivated
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_BroadcastFrontEndTabActivated final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_BroadcastFrontEndTabActivated) == 0x000004, "Wrong alignment on MenuContext_BroadcastFrontEndTabActivated");
static_assert(sizeof(MenuContext_BroadcastFrontEndTabActivated) == 0x000008, "Wrong size on MenuContext_BroadcastFrontEndTabActivated");
static_assert(offsetof(MenuContext_BroadcastFrontEndTabActivated, TabId) == 0x000000, "Member 'MenuContext_BroadcastFrontEndTabActivated::TabId' has a wrong offset!");

// Function BlueprintContext.MenuContext.BroadcastSceneChange
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_BroadcastSceneChange final
{
public:
	class FName                                   SceneName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_BroadcastSceneChange) == 0x000004, "Wrong alignment on MenuContext_BroadcastSceneChange");
static_assert(sizeof(MenuContext_BroadcastSceneChange) == 0x000008, "Wrong size on MenuContext_BroadcastSceneChange");
static_assert(offsetof(MenuContext_BroadcastSceneChange, SceneName) == 0x000000, "Member 'MenuContext_BroadcastSceneChange::SceneName' has a wrong offset!");

// Function BlueprintContext.MenuContext.DisplayReturnToTitleScreenReason
// 0x0018 (0x0018 - 0x0000)
struct MenuContext_DisplayReturnToTitleScreenReason final
{
public:
	TDelegate<void()>                             OnDialogClosed;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuContext_DisplayReturnToTitleScreenReason) == 0x000004, "Wrong alignment on MenuContext_DisplayReturnToTitleScreenReason");
static_assert(sizeof(MenuContext_DisplayReturnToTitleScreenReason) == 0x000018, "Wrong size on MenuContext_DisplayReturnToTitleScreenReason");
static_assert(offsetof(MenuContext_DisplayReturnToTitleScreenReason, OnDialogClosed) == 0x000000, "Member 'MenuContext_DisplayReturnToTitleScreenReason::OnDialogClosed' has a wrong offset!");
static_assert(offsetof(MenuContext_DisplayReturnToTitleScreenReason, ReturnValue) == 0x000010, "Member 'MenuContext_DisplayReturnToTitleScreenReason::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MenuContext.IsFrontEndContentFlowComplete
// 0x0001 (0x0001 - 0x0000)
struct MenuContext_IsFrontEndContentFlowComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_IsFrontEndContentFlowComplete) == 0x000001, "Wrong alignment on MenuContext_IsFrontEndContentFlowComplete");
static_assert(sizeof(MenuContext_IsFrontEndContentFlowComplete) == 0x000001, "Wrong size on MenuContext_IsFrontEndContentFlowComplete");
static_assert(offsetof(MenuContext_IsFrontEndContentFlowComplete, ReturnValue) == 0x000000, "Member 'MenuContext_IsFrontEndContentFlowComplete::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MenuContext.NavigateToStoreOffer
// 0x0010 (0x0010 - 0x0000)
struct MenuContext_NavigateToStoreOffer final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_NavigateToStoreOffer) == 0x000008, "Wrong alignment on MenuContext_NavigateToStoreOffer");
static_assert(sizeof(MenuContext_NavigateToStoreOffer) == 0x000010, "Wrong size on MenuContext_NavigateToStoreOffer");
static_assert(offsetof(MenuContext_NavigateToStoreOffer, OfferId) == 0x000000, "Member 'MenuContext_NavigateToStoreOffer::OfferId' has a wrong offset!");

// Function BlueprintContext.MenuContext.NavigationRequest
// 0x0010 (0x0010 - 0x0000)
struct MenuContext_NavigationRequest final
{
public:
	class FString                                 NavigationPath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_NavigationRequest) == 0x000008, "Wrong alignment on MenuContext_NavigationRequest");
static_assert(sizeof(MenuContext_NavigationRequest) == 0x000010, "Wrong size on MenuContext_NavigationRequest");
static_assert(offsetof(MenuContext_NavigationRequest, NavigationPath) == 0x000000, "Member 'MenuContext_NavigationRequest::NavigationPath' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnFrontEndTabActivated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_OnFrontEndTabActivated__DelegateSignature final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnFrontEndTabActivated__DelegateSignature) == 0x000004, "Wrong alignment on MenuContext_OnFrontEndTabActivated__DelegateSignature");
static_assert(sizeof(MenuContext_OnFrontEndTabActivated__DelegateSignature) == 0x000008, "Wrong size on MenuContext_OnFrontEndTabActivated__DelegateSignature");
static_assert(offsetof(MenuContext_OnFrontEndTabActivated__DelegateSignature, TabId) == 0x000000, "Member 'MenuContext_OnFrontEndTabActivated__DelegateSignature::TabId' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnMenuCategoryPushed__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MenuContext_OnMenuCategoryPushed__DelegateSignature final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuCategory;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnMenuCategoryPushed__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnMenuCategoryPushed__DelegateSignature");
static_assert(sizeof(MenuContext_OnMenuCategoryPushed__DelegateSignature) == 0x000010, "Wrong size on MenuContext_OnMenuCategoryPushed__DelegateSignature");
static_assert(offsetof(MenuContext_OnMenuCategoryPushed__DelegateSignature, Widget) == 0x000000, "Member 'MenuContext_OnMenuCategoryPushed__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(MenuContext_OnMenuCategoryPushed__DelegateSignature, MenuCategory) == 0x000008, "Member 'MenuContext_OnMenuCategoryPushed__DelegateSignature::MenuCategory' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnMenuSceneChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_OnMenuSceneChanged__DelegateSignature final
{
public:
	class FName                                   NewScene;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnMenuSceneChanged__DelegateSignature) == 0x000004, "Wrong alignment on MenuContext_OnMenuSceneChanged__DelegateSignature");
static_assert(sizeof(MenuContext_OnMenuSceneChanged__DelegateSignature) == 0x000008, "Wrong size on MenuContext_OnMenuSceneChanged__DelegateSignature");
static_assert(offsetof(MenuContext_OnMenuSceneChanged__DelegateSignature, NewScene) == 0x000000, "Member 'MenuContext_OnMenuSceneChanged__DelegateSignature::NewScene' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnNavigateToStoreItem__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MenuContext_OnNavigateToStoreItem__DelegateSignature final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnNavigateToStoreItem__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnNavigateToStoreItem__DelegateSignature");
static_assert(sizeof(MenuContext_OnNavigateToStoreItem__DelegateSignature) == 0x000010, "Wrong size on MenuContext_OnNavigateToStoreItem__DelegateSignature");
static_assert(offsetof(MenuContext_OnNavigateToStoreItem__DelegateSignature, OfferId) == 0x000000, "Member 'MenuContext_OnNavigateToStoreItem__DelegateSignature::OfferId' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnShowArcadeLadderScreen__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_OnShowArcadeLadderScreen__DelegateSignature final
{
public:
	class UOrionArcadeLadderSetupData*            ArcadeLadder;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnShowArcadeLadderScreen__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnShowArcadeLadderScreen__DelegateSignature");
static_assert(sizeof(MenuContext_OnShowArcadeLadderScreen__DelegateSignature) == 0x000008, "Wrong size on MenuContext_OnShowArcadeLadderScreen__DelegateSignature");
static_assert(offsetof(MenuContext_OnShowArcadeLadderScreen__DelegateSignature, ArcadeLadder) == 0x000000, "Member 'MenuContext_OnShowArcadeLadderScreen__DelegateSignature::ArcadeLadder' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnShowBundlePurchaseScreen__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct MenuContext_OnShowBundlePurchaseScreen__DelegateSignature final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPurchaseContext;                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnShowBundlePurchaseScreen__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnShowBundlePurchaseScreen__DelegateSignature");
static_assert(sizeof(MenuContext_OnShowBundlePurchaseScreen__DelegateSignature) == 0x000018, "Wrong size on MenuContext_OnShowBundlePurchaseScreen__DelegateSignature");
static_assert(offsetof(MenuContext_OnShowBundlePurchaseScreen__DelegateSignature, OfferId) == 0x000000, "Member 'MenuContext_OnShowBundlePurchaseScreen__DelegateSignature::OfferId' has a wrong offset!");
static_assert(offsetof(MenuContext_OnShowBundlePurchaseScreen__DelegateSignature, InPurchaseContext) == 0x000010, "Member 'MenuContext_OnShowBundlePurchaseScreen__DelegateSignature::InPurchaseContext' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnShowDeckBuilder__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_OnShowDeckBuilder__DelegateSignature final
{
public:
	class UOrionMcpDeckItem*                      Deck;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnShowDeckBuilder__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnShowDeckBuilder__DelegateSignature");
static_assert(sizeof(MenuContext_OnShowDeckBuilder__DelegateSignature) == 0x000008, "Wrong size on MenuContext_OnShowDeckBuilder__DelegateSignature");
static_assert(offsetof(MenuContext_OnShowDeckBuilder__DelegateSignature, Deck) == 0x000000, "Member 'MenuContext_OnShowDeckBuilder__DelegateSignature::Deck' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnShowHeroDetails__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MenuContext_OnShowHeroDetails__DelegateSignature final
{
public:
	class UOrionHeroData*                         HeroData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionSkinItemDefinition*               SkinToShow;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnShowHeroDetails__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnShowHeroDetails__DelegateSignature");
static_assert(sizeof(MenuContext_OnShowHeroDetails__DelegateSignature) == 0x000010, "Wrong size on MenuContext_OnShowHeroDetails__DelegateSignature");
static_assert(offsetof(MenuContext_OnShowHeroDetails__DelegateSignature, HeroData) == 0x000000, "Member 'MenuContext_OnShowHeroDetails__DelegateSignature::HeroData' has a wrong offset!");
static_assert(offsetof(MenuContext_OnShowHeroDetails__DelegateSignature, SkinToShow) == 0x000008, "Member 'MenuContext_OnShowHeroDetails__DelegateSignature::SkinToShow' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnShowPackOpenScreen__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_OnShowPackOpenScreen__DelegateSignature final
{
public:
	class UOrionMcpCardPackItem*                  CardPack;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnShowPackOpenScreen__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnShowPackOpenScreen__DelegateSignature");
static_assert(sizeof(MenuContext_OnShowPackOpenScreen__DelegateSignature) == 0x000008, "Wrong size on MenuContext_OnShowPackOpenScreen__DelegateSignature");
static_assert(offsetof(MenuContext_OnShowPackOpenScreen__DelegateSignature, CardPack) == 0x000000, "Member 'MenuContext_OnShowPackOpenScreen__DelegateSignature::CardPack' has a wrong offset!");

// DelegateFunction BlueprintContext.MenuContext.OnShowRefineGemScreen__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MenuContext_OnShowRefineGemScreen__DelegateSignature final
{
public:
	const class UOrionMcpGemItem*                 GemItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionCardInspectScreen*                CardInspectScreen;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_OnShowRefineGemScreen__DelegateSignature) == 0x000008, "Wrong alignment on MenuContext_OnShowRefineGemScreen__DelegateSignature");
static_assert(sizeof(MenuContext_OnShowRefineGemScreen__DelegateSignature) == 0x000010, "Wrong size on MenuContext_OnShowRefineGemScreen__DelegateSignature");
static_assert(offsetof(MenuContext_OnShowRefineGemScreen__DelegateSignature, GemItem) == 0x000000, "Member 'MenuContext_OnShowRefineGemScreen__DelegateSignature::GemItem' has a wrong offset!");
static_assert(offsetof(MenuContext_OnShowRefineGemScreen__DelegateSignature, CardInspectScreen) == 0x000008, "Member 'MenuContext_OnShowRefineGemScreen__DelegateSignature::CardInspectScreen' has a wrong offset!");

// Function BlueprintContext.MenuContext.RegisterMTXConfirmation
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_RegisterMTXConfirmation final
{
public:
	class UOrionPurchaseConfirmationWidget*       MTXConfirmationWidget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_RegisterMTXConfirmation) == 0x000008, "Wrong alignment on MenuContext_RegisterMTXConfirmation");
static_assert(sizeof(MenuContext_RegisterMTXConfirmation) == 0x000008, "Wrong size on MenuContext_RegisterMTXConfirmation");
static_assert(offsetof(MenuContext_RegisterMTXConfirmation, MTXConfirmationWidget) == 0x000000, "Member 'MenuContext_RegisterMTXConfirmation::MTXConfirmationWidget' has a wrong offset!");

// Function BlueprintContext.MenuContext.RegisterPurchaseConfirmation
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_RegisterPurchaseConfirmation final
{
public:
	class UOrionPurchaseConfirmationWidget*       PurchaseConfirmationWidget;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_RegisterPurchaseConfirmation) == 0x000008, "Wrong alignment on MenuContext_RegisterPurchaseConfirmation");
static_assert(sizeof(MenuContext_RegisterPurchaseConfirmation) == 0x000008, "Wrong size on MenuContext_RegisterPurchaseConfirmation");
static_assert(offsetof(MenuContext_RegisterPurchaseConfirmation, PurchaseConfirmationWidget) == 0x000000, "Member 'MenuContext_RegisterPurchaseConfirmation::PurchaseConfirmationWidget' has a wrong offset!");

// Function BlueprintContext.MenuContext.RegisterTabListWidget
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_RegisterTabListWidget final
{
public:
	class UOrionTabListWidget*                    TabListWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_RegisterTabListWidget) == 0x000008, "Wrong alignment on MenuContext_RegisterTabListWidget");
static_assert(sizeof(MenuContext_RegisterTabListWidget) == 0x000008, "Wrong size on MenuContext_RegisterTabListWidget");
static_assert(offsetof(MenuContext_RegisterTabListWidget, TabListWidget) == 0x000000, "Member 'MenuContext_RegisterTabListWidget::TabListWidget' has a wrong offset!");

// Function BlueprintContext.MenuContext.ReturnToTitleDueToRequiredUpdate
// 0x0020 (0x0020 - 0x0000)
struct MenuContext_ReturnToTitleDueToRequiredUpdate final
{
public:
	EReturnToMainMenuReason                       Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnDialogClosed;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuContext_ReturnToTitleDueToRequiredUpdate) == 0x000004, "Wrong alignment on MenuContext_ReturnToTitleDueToRequiredUpdate");
static_assert(sizeof(MenuContext_ReturnToTitleDueToRequiredUpdate) == 0x000020, "Wrong size on MenuContext_ReturnToTitleDueToRequiredUpdate");
static_assert(offsetof(MenuContext_ReturnToTitleDueToRequiredUpdate, Reason) == 0x000000, "Member 'MenuContext_ReturnToTitleDueToRequiredUpdate::Reason' has a wrong offset!");
static_assert(offsetof(MenuContext_ReturnToTitleDueToRequiredUpdate, OnDialogClosed) == 0x000008, "Member 'MenuContext_ReturnToTitleDueToRequiredUpdate::OnDialogClosed' has a wrong offset!");
static_assert(offsetof(MenuContext_ReturnToTitleDueToRequiredUpdate, ReturnValue) == 0x000018, "Member 'MenuContext_ReturnToTitleDueToRequiredUpdate::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MenuContext.ShowVoiceChatUI
// 0x0001 (0x0001 - 0x0000)
struct MenuContext_ShowVoiceChatUI final
{
public:
	bool                                          bShowUI;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_ShowVoiceChatUI) == 0x000001, "Wrong alignment on MenuContext_ShowVoiceChatUI");
static_assert(sizeof(MenuContext_ShowVoiceChatUI) == 0x000001, "Wrong size on MenuContext_ShowVoiceChatUI");
static_assert(offsetof(MenuContext_ShowVoiceChatUI, bShowUI) == 0x000000, "Member 'MenuContext_ShowVoiceChatUI::bShowUI' has a wrong offset!");

// Function BlueprintContext.MenuContext.UnregisterTabListWidget
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_UnregisterTabListWidget final
{
public:
	class UOrionTabListWidget*                    TabListWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_UnregisterTabListWidget) == 0x000008, "Wrong alignment on MenuContext_UnregisterTabListWidget");
static_assert(sizeof(MenuContext_UnregisterTabListWidget) == 0x000008, "Wrong size on MenuContext_UnregisterTabListWidget");
static_assert(offsetof(MenuContext_UnregisterTabListWidget, TabListWidget) == 0x000000, "Member 'MenuContext_UnregisterTabListWidget::TabListWidget' has a wrong offset!");

// Function BlueprintContext.MenuContext.GetCurrentSceneName
// 0x0008 (0x0008 - 0x0000)
struct MenuContext_GetCurrentSceneName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_GetCurrentSceneName) == 0x000004, "Wrong alignment on MenuContext_GetCurrentSceneName");
static_assert(sizeof(MenuContext_GetCurrentSceneName) == 0x000008, "Wrong size on MenuContext_GetCurrentSceneName");
static_assert(offsetof(MenuContext_GetCurrentSceneName, ReturnValue) == 0x000000, "Member 'MenuContext_GetCurrentSceneName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.MenuContext.ShouldDisplayWUIUI
// 0x0001 (0x0001 - 0x0000)
struct MenuContext_ShouldDisplayWUIUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuContext_ShouldDisplayWUIUI) == 0x000001, "Wrong alignment on MenuContext_ShouldDisplayWUIUI");
static_assert(sizeof(MenuContext_ShouldDisplayWUIUI) == 0x000001, "Wrong size on MenuContext_ShouldDisplayWUIUI");
static_assert(offsetof(MenuContext_ShouldDisplayWUIUI, ReturnValue) == 0x000000, "Member 'MenuContext_ShouldDisplayWUIUI::ReturnValue' has a wrong offset!");

// Function BlueprintContext.OrionGameContext.GetHeroData
// 0x0008 (0x0008 - 0x0000)
struct OrionGameContext_GetHeroData final
{
public:
	class UOrionHeroData*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameContext_GetHeroData) == 0x000008, "Wrong alignment on OrionGameContext_GetHeroData");
static_assert(sizeof(OrionGameContext_GetHeroData) == 0x000008, "Wrong size on OrionGameContext_GetHeroData");
static_assert(offsetof(OrionGameContext_GetHeroData, ReturnValue) == 0x000000, "Member 'OrionGameContext_GetHeroData::ReturnValue' has a wrong offset!");

// Function BlueprintContext.OrionGameContext.GetIsUsingGamePad
// 0x0001 (0x0001 - 0x0000)
struct OrionGameContext_GetIsUsingGamePad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameContext_GetIsUsingGamePad) == 0x000001, "Wrong alignment on OrionGameContext_GetIsUsingGamePad");
static_assert(sizeof(OrionGameContext_GetIsUsingGamePad) == 0x000001, "Wrong size on OrionGameContext_GetIsUsingGamePad");
static_assert(offsetof(OrionGameContext_GetIsUsingGamePad, ReturnValue) == 0x000000, "Member 'OrionGameContext_GetIsUsingGamePad::ReturnValue' has a wrong offset!");

// Function BlueprintContext.OrionGameContext.GetLeftAnalogStickValues
// 0x0008 (0x0008 - 0x0000)
struct OrionGameContext_GetLeftAnalogStickValues final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameContext_GetLeftAnalogStickValues) == 0x000004, "Wrong alignment on OrionGameContext_GetLeftAnalogStickValues");
static_assert(sizeof(OrionGameContext_GetLeftAnalogStickValues) == 0x000008, "Wrong size on OrionGameContext_GetLeftAnalogStickValues");
static_assert(offsetof(OrionGameContext_GetLeftAnalogStickValues, ReturnValue) == 0x000000, "Member 'OrionGameContext_GetLeftAnalogStickValues::ReturnValue' has a wrong offset!");

// Function BlueprintContext.OrionGameContext.GetRightAnalogStickValues
// 0x0008 (0x0008 - 0x0000)
struct OrionGameContext_GetRightAnalogStickValues final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameContext_GetRightAnalogStickValues) == 0x000004, "Wrong alignment on OrionGameContext_GetRightAnalogStickValues");
static_assert(sizeof(OrionGameContext_GetRightAnalogStickValues) == 0x000008, "Wrong size on OrionGameContext_GetRightAnalogStickValues");
static_assert(offsetof(OrionGameContext_GetRightAnalogStickValues, ReturnValue) == 0x000000, "Member 'OrionGameContext_GetRightAnalogStickValues::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.GetUniqueNetID
// 0x0020 (0x0020 - 0x0000)
struct PartyContext_GetUniqueNetID final
{
public:
	class UOrionPartyMemberState*                 PartyMember;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0008(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_GetUniqueNetID) == 0x000008, "Wrong alignment on PartyContext_GetUniqueNetID");
static_assert(sizeof(PartyContext_GetUniqueNetID) == 0x000020, "Wrong size on PartyContext_GetUniqueNetID");
static_assert(offsetof(PartyContext_GetUniqueNetID, PartyMember) == 0x000000, "Member 'PartyContext_GetUniqueNetID::PartyMember' has a wrong offset!");
static_assert(offsetof(PartyContext_GetUniqueNetID, UniqueNetId) == 0x000008, "Member 'PartyContext_GetUniqueNetID::UniqueNetId' has a wrong offset!");

// Function BlueprintContext.PartyContext.GetPartyPrivacySetting
// 0x0004 (0x0004 - 0x0000)
struct PartyContext_GetPartyPrivacySetting final
{
public:
	EPartyType                                    OutPartyType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutLeaderFriendsOnly;                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutLeaderInvitesOnly;                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_GetPartyPrivacySetting) == 0x000001, "Wrong alignment on PartyContext_GetPartyPrivacySetting");
static_assert(sizeof(PartyContext_GetPartyPrivacySetting) == 0x000004, "Wrong size on PartyContext_GetPartyPrivacySetting");
static_assert(offsetof(PartyContext_GetPartyPrivacySetting, OutPartyType) == 0x000000, "Member 'PartyContext_GetPartyPrivacySetting::OutPartyType' has a wrong offset!");
static_assert(offsetof(PartyContext_GetPartyPrivacySetting, OutLeaderFriendsOnly) == 0x000001, "Member 'PartyContext_GetPartyPrivacySetting::OutLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(PartyContext_GetPartyPrivacySetting, OutLeaderInvitesOnly) == 0x000002, "Member 'PartyContext_GetPartyPrivacySetting::OutLeaderInvitesOnly' has a wrong offset!");
static_assert(offsetof(PartyContext_GetPartyPrivacySetting, ReturnValue) == 0x000003, "Member 'PartyContext_GetPartyPrivacySetting::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.KickFromParty
// 0x0008 (0x0008 - 0x0000)
struct PartyContext_KickFromParty final
{
public:
	class UOrionPartyMemberState*                 PartyMember;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_KickFromParty) == 0x000008, "Wrong alignment on PartyContext_KickFromParty");
static_assert(sizeof(PartyContext_KickFromParty) == 0x000008, "Wrong size on PartyContext_KickFromParty");
static_assert(offsetof(PartyContext_KickFromParty, PartyMember) == 0x000000, "Member 'PartyContext_KickFromParty::PartyMember' has a wrong offset!");

// DelegateFunction BlueprintContext.PartyContext.OnLeaderFriendsOnlyChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature final
{
public:
	bool                                          bLeaderFriendsOnly;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature) == 0x000001, "Wrong alignment on PartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature");
static_assert(sizeof(PartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature) == 0x000001, "Wrong size on PartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature");
static_assert(offsetof(PartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature, bLeaderFriendsOnly) == 0x000000, "Member 'PartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature::bLeaderFriendsOnly' has a wrong offset!");

// DelegateFunction BlueprintContext.PartyContext.OnLeaderInvitesOnlyChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature final
{
public:
	bool                                          bLeaderInviteOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature) == 0x000001, "Wrong alignment on PartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature");
static_assert(sizeof(PartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature) == 0x000001, "Wrong size on PartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature");
static_assert(offsetof(PartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature, bLeaderInviteOnly) == 0x000000, "Member 'PartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature::bLeaderInviteOnly' has a wrong offset!");

// DelegateFunction BlueprintContext.PartyContext.OnMatchmakingCustomKeyChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PartyContext_OnMatchmakingCustomKeyChanged__DelegateSignature final
{
public:
	class FString                                 CustomKey;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_OnMatchmakingCustomKeyChanged__DelegateSignature) == 0x000008, "Wrong alignment on PartyContext_OnMatchmakingCustomKeyChanged__DelegateSignature");
static_assert(sizeof(PartyContext_OnMatchmakingCustomKeyChanged__DelegateSignature) == 0x000010, "Wrong size on PartyContext_OnMatchmakingCustomKeyChanged__DelegateSignature");
static_assert(offsetof(PartyContext_OnMatchmakingCustomKeyChanged__DelegateSignature, CustomKey) == 0x000000, "Member 'PartyContext_OnMatchmakingCustomKeyChanged__DelegateSignature::CustomKey' has a wrong offset!");

// DelegateFunction BlueprintContext.PartyContext.OnMMRUpdated__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PartyContext_OnMMRUpdated__DelegateSignature final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_OnMMRUpdated__DelegateSignature) == 0x000001, "Wrong alignment on PartyContext_OnMMRUpdated__DelegateSignature");
static_assert(sizeof(PartyContext_OnMMRUpdated__DelegateSignature) == 0x000001, "Wrong size on PartyContext_OnMMRUpdated__DelegateSignature");
static_assert(offsetof(PartyContext_OnMMRUpdated__DelegateSignature, bIsValid) == 0x000000, "Member 'PartyContext_OnMMRUpdated__DelegateSignature::bIsValid' has a wrong offset!");

// DelegateFunction BlueprintContext.PartyContext.OnPartyDataChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PartyContext_OnPartyDataChanged__DelegateSignature final
{
public:
	struct FPartyState                            PartyData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_OnPartyDataChanged__DelegateSignature) == 0x000008, "Wrong alignment on PartyContext_OnPartyDataChanged__DelegateSignature");
static_assert(sizeof(PartyContext_OnPartyDataChanged__DelegateSignature) == 0x000010, "Wrong size on PartyContext_OnPartyDataChanged__DelegateSignature");
static_assert(offsetof(PartyContext_OnPartyDataChanged__DelegateSignature, PartyData) == 0x000000, "Member 'PartyContext_OnPartyDataChanged__DelegateSignature::PartyData' has a wrong offset!");

// DelegateFunction BlueprintContext.PartyContext.OnPartyTypeChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PartyContext_OnPartyTypeChanged__DelegateSignature final
{
public:
	EPartyType                                    PartyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_OnPartyTypeChanged__DelegateSignature) == 0x000001, "Wrong alignment on PartyContext_OnPartyTypeChanged__DelegateSignature");
static_assert(sizeof(PartyContext_OnPartyTypeChanged__DelegateSignature) == 0x000001, "Wrong size on PartyContext_OnPartyTypeChanged__DelegateSignature");
static_assert(offsetof(PartyContext_OnPartyTypeChanged__DelegateSignature, PartyType) == 0x000000, "Member 'PartyContext_OnPartyTypeChanged__DelegateSignature::PartyType' has a wrong offset!");

// DelegateFunction BlueprintContext.PartyContext.OnPlaylistIDChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct PartyContext_OnPlaylistIDChanged__DelegateSignature final
{
public:
	int32                                         PlaylistId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_OnPlaylistIDChanged__DelegateSignature) == 0x000004, "Wrong alignment on PartyContext_OnPlaylistIDChanged__DelegateSignature");
static_assert(sizeof(PartyContext_OnPlaylistIDChanged__DelegateSignature) == 0x000004, "Wrong size on PartyContext_OnPlaylistIDChanged__DelegateSignature");
static_assert(offsetof(PartyContext_OnPlaylistIDChanged__DelegateSignature, PlaylistId) == 0x000000, "Member 'PartyContext_OnPlaylistIDChanged__DelegateSignature::PlaylistId' has a wrong offset!");

// Function BlueprintContext.PartyContext.PromoteToPartyLeader
// 0x0008 (0x0008 - 0x0000)
struct PartyContext_PromoteToPartyLeader final
{
public:
	class UOrionPartyMemberState*                 PartyMember;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_PromoteToPartyLeader) == 0x000008, "Wrong alignment on PartyContext_PromoteToPartyLeader");
static_assert(sizeof(PartyContext_PromoteToPartyLeader) == 0x000008, "Wrong size on PartyContext_PromoteToPartyLeader");
static_assert(offsetof(PartyContext_PromoteToPartyLeader, PartyMember) == 0x000000, "Member 'PartyContext_PromoteToPartyLeader::PartyMember' has a wrong offset!");

// Function BlueprintContext.PartyContext.SendPartyInvite
// 0x0008 (0x0008 - 0x0000)
struct PartyContext_SendPartyInvite final
{
public:
	class UOrionFriendItem*                       FriendItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_SendPartyInvite) == 0x000008, "Wrong alignment on PartyContext_SendPartyInvite");
static_assert(sizeof(PartyContext_SendPartyInvite) == 0x000008, "Wrong size on PartyContext_SendPartyInvite");
static_assert(offsetof(PartyContext_SendPartyInvite, FriendItem) == 0x000000, "Member 'PartyContext_SendPartyInvite::FriendItem' has a wrong offset!");

// Function BlueprintContext.PartyContext.SetMatchmakingCustomKey
// 0x0010 (0x0010 - 0x0000)
struct PartyContext_SetMatchmakingCustomKey final
{
public:
	class FString                                 CustomKey;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_SetMatchmakingCustomKey) == 0x000008, "Wrong alignment on PartyContext_SetMatchmakingCustomKey");
static_assert(sizeof(PartyContext_SetMatchmakingCustomKey) == 0x000010, "Wrong size on PartyContext_SetMatchmakingCustomKey");
static_assert(offsetof(PartyContext_SetMatchmakingCustomKey, CustomKey) == 0x000000, "Member 'PartyContext_SetMatchmakingCustomKey::CustomKey' has a wrong offset!");

// Function BlueprintContext.PartyContext.SetPartyPrivacySetting
// 0x0003 (0x0003 - 0x0000)
struct PartyContext_SetPartyPrivacySetting final
{
public:
	EPartyType                                    PartyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderFriendsOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderInvitesOnly;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_SetPartyPrivacySetting) == 0x000001, "Wrong alignment on PartyContext_SetPartyPrivacySetting");
static_assert(sizeof(PartyContext_SetPartyPrivacySetting) == 0x000003, "Wrong size on PartyContext_SetPartyPrivacySetting");
static_assert(offsetof(PartyContext_SetPartyPrivacySetting, PartyType) == 0x000000, "Member 'PartyContext_SetPartyPrivacySetting::PartyType' has a wrong offset!");
static_assert(offsetof(PartyContext_SetPartyPrivacySetting, bLeaderFriendsOnly) == 0x000001, "Member 'PartyContext_SetPartyPrivacySetting::bLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(PartyContext_SetPartyPrivacySetting, bLeaderInvitesOnly) == 0x000002, "Member 'PartyContext_SetPartyPrivacySetting::bLeaderInvitesOnly' has a wrong offset!");

// Function BlueprintContext.PartyContext.SetPlaylistID
// 0x0004 (0x0004 - 0x0000)
struct PartyContext_SetPlaylistID final
{
public:
	int32                                         NewPlaylistID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_SetPlaylistID) == 0x000004, "Wrong alignment on PartyContext_SetPlaylistID");
static_assert(sizeof(PartyContext_SetPlaylistID) == 0x000004, "Wrong size on PartyContext_SetPlaylistID");
static_assert(offsetof(PartyContext_SetPlaylistID, NewPlaylistID) == 0x000000, "Member 'PartyContext_SetPlaylistID::NewPlaylistID' has a wrong offset!");

// Function BlueprintContext.PartyContext.AmIPartyLeader
// 0x0001 (0x0001 - 0x0000)
struct PartyContext_AmIPartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_AmIPartyLeader) == 0x000001, "Wrong alignment on PartyContext_AmIPartyLeader");
static_assert(sizeof(PartyContext_AmIPartyLeader) == 0x000001, "Wrong size on PartyContext_AmIPartyLeader");
static_assert(offsetof(PartyContext_AmIPartyLeader, ReturnValue) == 0x000000, "Member 'PartyContext_AmIPartyLeader::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.GetMatchmakingCustomKey
// 0x0010 (0x0010 - 0x0000)
struct PartyContext_GetMatchmakingCustomKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_GetMatchmakingCustomKey) == 0x000008, "Wrong alignment on PartyContext_GetMatchmakingCustomKey");
static_assert(sizeof(PartyContext_GetMatchmakingCustomKey) == 0x000010, "Wrong size on PartyContext_GetMatchmakingCustomKey");
static_assert(offsetof(PartyContext_GetMatchmakingCustomKey, ReturnValue) == 0x000000, "Member 'PartyContext_GetMatchmakingCustomKey::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.GetMyPersistentPartyEntry
// 0x0008 (0x0008 - 0x0000)
struct PartyContext_GetMyPersistentPartyEntry final
{
public:
	class UOrionPersistentPartyMember*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_GetMyPersistentPartyEntry) == 0x000008, "Wrong alignment on PartyContext_GetMyPersistentPartyEntry");
static_assert(sizeof(PartyContext_GetMyPersistentPartyEntry) == 0x000008, "Wrong size on PartyContext_GetMyPersistentPartyEntry");
static_assert(offsetof(PartyContext_GetMyPersistentPartyEntry, ReturnValue) == 0x000000, "Member 'PartyContext_GetMyPersistentPartyEntry::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.GetPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct PartyContext_GetPartyMembers final
{
public:
	TArray<class UOrionPersistentPartyMember*>    PartyMembers;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_GetPartyMembers) == 0x000008, "Wrong alignment on PartyContext_GetPartyMembers");
static_assert(sizeof(PartyContext_GetPartyMembers) == 0x000010, "Wrong size on PartyContext_GetPartyMembers");
static_assert(offsetof(PartyContext_GetPartyMembers, PartyMembers) == 0x000000, "Member 'PartyContext_GetPartyMembers::PartyMembers' has a wrong offset!");

// Function BlueprintContext.PartyContext.GetPlaylistID
// 0x0004 (0x0004 - 0x0000)
struct PartyContext_GetPlaylistID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_GetPlaylistID) == 0x000004, "Wrong alignment on PartyContext_GetPlaylistID");
static_assert(sizeof(PartyContext_GetPlaylistID) == 0x000004, "Wrong size on PartyContext_GetPlaylistID");
static_assert(offsetof(PartyContext_GetPlaylistID, ReturnValue) == 0x000000, "Member 'PartyContext_GetPlaylistID::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.IsHeroPickedByOtherPlayer
// 0x0010 (0x0010 - 0x0000)
struct PartyContext_IsHeroPickedByOtherPlayer final
{
public:
	const class UOrionHeroData*                   InHero;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PartyContext_IsHeroPickedByOtherPlayer) == 0x000008, "Wrong alignment on PartyContext_IsHeroPickedByOtherPlayer");
static_assert(sizeof(PartyContext_IsHeroPickedByOtherPlayer) == 0x000010, "Wrong size on PartyContext_IsHeroPickedByOtherPlayer");
static_assert(offsetof(PartyContext_IsHeroPickedByOtherPlayer, InHero) == 0x000000, "Member 'PartyContext_IsHeroPickedByOtherPlayer::InHero' has a wrong offset!");
static_assert(offsetof(PartyContext_IsHeroPickedByOtherPlayer, ReturnValue) == 0x000008, "Member 'PartyContext_IsHeroPickedByOtherPlayer::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.IsMatchmakingCustomKeyActive
// 0x0001 (0x0001 - 0x0000)
struct PartyContext_IsMatchmakingCustomKeyActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_IsMatchmakingCustomKeyActive) == 0x000001, "Wrong alignment on PartyContext_IsMatchmakingCustomKeyActive");
static_assert(sizeof(PartyContext_IsMatchmakingCustomKeyActive) == 0x000001, "Wrong size on PartyContext_IsMatchmakingCustomKeyActive");
static_assert(offsetof(PartyContext_IsMatchmakingCustomKeyActive, ReturnValue) == 0x000000, "Member 'PartyContext_IsMatchmakingCustomKeyActive::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.IsPartyLeader
// 0x0010 (0x0010 - 0x0000)
struct PartyContext_IsPartyLeader final
{
public:
	class UOrionPartyMemberState*                 PartyMember;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PartyContext_IsPartyLeader) == 0x000008, "Wrong alignment on PartyContext_IsPartyLeader");
static_assert(sizeof(PartyContext_IsPartyLeader) == 0x000010, "Wrong size on PartyContext_IsPartyLeader");
static_assert(offsetof(PartyContext_IsPartyLeader, PartyMember) == 0x000000, "Member 'PartyContext_IsPartyLeader::PartyMember' has a wrong offset!");
static_assert(offsetof(PartyContext_IsPartyLeader, ReturnValue) == 0x000008, "Member 'PartyContext_IsPartyLeader::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.MaxPartyMembers
// 0x0004 (0x0004 - 0x0000)
struct PartyContext_MaxPartyMembers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_MaxPartyMembers) == 0x000004, "Wrong alignment on PartyContext_MaxPartyMembers");
static_assert(sizeof(PartyContext_MaxPartyMembers) == 0x000004, "Wrong size on PartyContext_MaxPartyMembers");
static_assert(offsetof(PartyContext_MaxPartyMembers, ReturnValue) == 0x000000, "Member 'PartyContext_MaxPartyMembers::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PartyContext.NumPartyMembers
// 0x0004 (0x0004 - 0x0000)
struct PartyContext_NumPartyMembers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyContext_NumPartyMembers) == 0x000004, "Wrong alignment on PartyContext_NumPartyMembers");
static_assert(sizeof(PartyContext_NumPartyMembers) == 0x000004, "Wrong size on PartyContext_NumPartyMembers");
static_assert(offsetof(PartyContext_NumPartyMembers, ReturnValue) == 0x000000, "Member 'PartyContext_NumPartyMembers::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.ChangeLanguage
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_ChangeLanguage final
{
public:
	class FString                                 LanguageCode;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerContext_ChangeLanguage) == 0x000008, "Wrong alignment on PlayerContext_ChangeLanguage");
static_assert(sizeof(PlayerContext_ChangeLanguage) == 0x000018, "Wrong size on PlayerContext_ChangeLanguage");
static_assert(offsetof(PlayerContext_ChangeLanguage, LanguageCode) == 0x000000, "Member 'PlayerContext_ChangeLanguage::LanguageCode' has a wrong offset!");
static_assert(offsetof(PlayerContext_ChangeLanguage, bSave) == 0x000010, "Member 'PlayerContext_ChangeLanguage::bSave' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetBoundKeysByNameAndType
// 0x0050 (0x0050 - 0x0000)
struct PlayerContext_GetBoundKeysByNameAndType final
{
public:
	class FName                                   BindingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyBindingType                               BindingType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoundKeys                             ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetBoundKeysByNameAndType) == 0x000008, "Wrong alignment on PlayerContext_GetBoundKeysByNameAndType");
static_assert(sizeof(PlayerContext_GetBoundKeysByNameAndType) == 0x000050, "Wrong size on PlayerContext_GetBoundKeysByNameAndType");
static_assert(offsetof(PlayerContext_GetBoundKeysByNameAndType, BindingName) == 0x000000, "Member 'PlayerContext_GetBoundKeysByNameAndType::BindingName' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetBoundKeysByNameAndType, BindingType) == 0x000008, "Member 'PlayerContext_GetBoundKeysByNameAndType::BindingType' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetBoundKeysByNameAndType, ReturnValue) == 0x000010, "Member 'PlayerContext_GetBoundKeysByNameAndType::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.PlayerContext.OnMcpResult__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct PlayerContext_OnMcpResult__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorMessage;                                      // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_OnMcpResult__DelegateSignature) == 0x000008, "Wrong alignment on PlayerContext_OnMcpResult__DelegateSignature");
static_assert(sizeof(PlayerContext_OnMcpResult__DelegateSignature) == 0x000020, "Wrong size on PlayerContext_OnMcpResult__DelegateSignature");
static_assert(offsetof(PlayerContext_OnMcpResult__DelegateSignature, bSuccess) == 0x000000, "Member 'PlayerContext_OnMcpResult__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerContext_OnMcpResult__DelegateSignature, ErrorMessage) == 0x000008, "Member 'PlayerContext_OnMcpResult__DelegateSignature::ErrorMessage' has a wrong offset!");

// Function BlueprintContext.PlayerContext.OverrideBoundKeyByNameAndType
// 0x0050 (0x0050 - 0x0000)
struct PlayerContext_OverrideBoundKeyByNameAndType final
{
public:
	class FName                                   BindingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyBindingType                               BindingType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputChord                            PreviousKey;                                       // 0x0010(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            NewKey;                                            // 0x0030(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_OverrideBoundKeyByNameAndType) == 0x000008, "Wrong alignment on PlayerContext_OverrideBoundKeyByNameAndType");
static_assert(sizeof(PlayerContext_OverrideBoundKeyByNameAndType) == 0x000050, "Wrong size on PlayerContext_OverrideBoundKeyByNameAndType");
static_assert(offsetof(PlayerContext_OverrideBoundKeyByNameAndType, BindingName) == 0x000000, "Member 'PlayerContext_OverrideBoundKeyByNameAndType::BindingName' has a wrong offset!");
static_assert(offsetof(PlayerContext_OverrideBoundKeyByNameAndType, BindingType) == 0x000008, "Member 'PlayerContext_OverrideBoundKeyByNameAndType::BindingType' has a wrong offset!");
static_assert(offsetof(PlayerContext_OverrideBoundKeyByNameAndType, PreviousKey) == 0x000010, "Member 'PlayerContext_OverrideBoundKeyByNameAndType::PreviousKey' has a wrong offset!");
static_assert(offsetof(PlayerContext_OverrideBoundKeyByNameAndType, NewKey) == 0x000030, "Member 'PlayerContext_OverrideBoundKeyByNameAndType::NewKey' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetAutoPlayInstantReplay
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetAutoPlayInstantReplay final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetAutoPlayInstantReplay) == 0x000001, "Wrong alignment on PlayerContext_SetAutoPlayInstantReplay");
static_assert(sizeof(PlayerContext_SetAutoPlayInstantReplay) == 0x000001, "Wrong size on PlayerContext_SetAutoPlayInstantReplay");
static_assert(offsetof(PlayerContext_SetAutoPlayInstantReplay, NewValue) == 0x000000, "Member 'PlayerContext_SetAutoPlayInstantReplay::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetContinuousMusic
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetContinuousMusic final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetContinuousMusic) == 0x000001, "Wrong alignment on PlayerContext_SetContinuousMusic");
static_assert(sizeof(PlayerContext_SetContinuousMusic) == 0x000001, "Wrong size on PlayerContext_SetContinuousMusic");
static_assert(offsetof(PlayerContext_SetContinuousMusic, NewValue) == 0x000000, "Member 'PlayerContext_SetContinuousMusic::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetDisplayCardOverLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetDisplayCardOverLocalPlayer final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetDisplayCardOverLocalPlayer) == 0x000001, "Wrong alignment on PlayerContext_SetDisplayCardOverLocalPlayer");
static_assert(sizeof(PlayerContext_SetDisplayCardOverLocalPlayer) == 0x000001, "Wrong size on PlayerContext_SetDisplayCardOverLocalPlayer");
static_assert(offsetof(PlayerContext_SetDisplayCardOverLocalPlayer, bOn) == 0x000000, "Member 'PlayerContext_SetDisplayCardOverLocalPlayer::bOn' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetEnableDeathcam
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetEnableDeathcam final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetEnableDeathcam) == 0x000004, "Wrong alignment on PlayerContext_SetEnableDeathcam");
static_assert(sizeof(PlayerContext_SetEnableDeathcam) == 0x000004, "Wrong size on PlayerContext_SetEnableDeathcam");
static_assert(offsetof(PlayerContext_SetEnableDeathcam, NewValue) == 0x000000, "Member 'PlayerContext_SetEnableDeathcam::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetEngineGammaValue
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetEngineGammaValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetEngineGammaValue) == 0x000004, "Wrong alignment on PlayerContext_SetEngineGammaValue");
static_assert(sizeof(PlayerContext_SetEngineGammaValue) == 0x000004, "Wrong size on PlayerContext_SetEngineGammaValue");
static_assert(offsetof(PlayerContext_SetEngineGammaValue, NewValue) == 0x000000, "Member 'PlayerContext_SetEngineGammaValue::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadAbilityConfirmOnRelease
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadAbilityConfirmOnRelease final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadAbilityConfirmOnRelease) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadAbilityConfirmOnRelease");
static_assert(sizeof(PlayerContext_SetGamepadAbilityConfirmOnRelease) == 0x000004, "Wrong size on PlayerContext_SetGamepadAbilityConfirmOnRelease");
static_assert(offsetof(PlayerContext_SetGamepadAbilityConfirmOnRelease, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadAbilityConfirmOnRelease::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadConfigIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadConfigIndex final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadConfigIndex) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadConfigIndex");
static_assert(sizeof(PlayerContext_SetGamepadConfigIndex) == 0x000004, "Wrong size on PlayerContext_SetGamepadConfigIndex");
static_assert(offsetof(PlayerContext_SetGamepadConfigIndex, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadConfigIndex::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadHandednessConfigIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadHandednessConfigIndex final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadHandednessConfigIndex) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadHandednessConfigIndex");
static_assert(sizeof(PlayerContext_SetGamepadHandednessConfigIndex) == 0x000004, "Wrong size on PlayerContext_SetGamepadHandednessConfigIndex");
static_assert(offsetof(PlayerContext_SetGamepadHandednessConfigIndex, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadHandednessConfigIndex::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadInvertPitch
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadInvertPitch final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadInvertPitch) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadInvertPitch");
static_assert(sizeof(PlayerContext_SetGamepadInvertPitch) == 0x000004, "Wrong size on PlayerContext_SetGamepadInvertPitch");
static_assert(offsetof(PlayerContext_SetGamepadInvertPitch, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadInvertPitch::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadInvertYaw
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadInvertYaw final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadInvertYaw) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadInvertYaw");
static_assert(sizeof(PlayerContext_SetGamepadInvertYaw) == 0x000004, "Wrong size on PlayerContext_SetGamepadInvertYaw");
static_assert(offsetof(PlayerContext_SetGamepadInvertYaw, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadInvertYaw::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadPitchSensitivity
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadPitchSensitivity final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadPitchSensitivity) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadPitchSensitivity");
static_assert(sizeof(PlayerContext_SetGamepadPitchSensitivity) == 0x000004, "Wrong size on PlayerContext_SetGamepadPitchSensitivity");
static_assert(offsetof(PlayerContext_SetGamepadPitchSensitivity, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadPitchSensitivity::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadRadialSelectEnabled
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadRadialSelectEnabled final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadRadialSelectEnabled) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadRadialSelectEnabled");
static_assert(sizeof(PlayerContext_SetGamepadRadialSelectEnabled) == 0x000004, "Wrong size on PlayerContext_SetGamepadRadialSelectEnabled");
static_assert(offsetof(PlayerContext_SetGamepadRadialSelectEnabled, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadRadialSelectEnabled::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetGamepadYawSensitivity
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetGamepadYawSensitivity final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetGamepadYawSensitivity) == 0x000004, "Wrong alignment on PlayerContext_SetGamepadYawSensitivity");
static_assert(sizeof(PlayerContext_SetGamepadYawSensitivity) == 0x000004, "Wrong size on PlayerContext_SetGamepadYawSensitivity");
static_assert(offsetof(PlayerContext_SetGamepadYawSensitivity, NewValue) == 0x000000, "Member 'PlayerContext_SetGamepadYawSensitivity::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetHealthBarOverhead
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetHealthBarOverhead final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetHealthBarOverhead) == 0x000001, "Wrong alignment on PlayerContext_SetHealthBarOverhead");
static_assert(sizeof(PlayerContext_SetHealthBarOverhead) == 0x000001, "Wrong size on PlayerContext_SetHealthBarOverhead");
static_assert(offsetof(PlayerContext_SetHealthBarOverhead, bOn) == 0x000000, "Member 'PlayerContext_SetHealthBarOverhead::bOn' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetInvertedMouse
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetInvertedMouse final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetInvertedMouse) == 0x000001, "Wrong alignment on PlayerContext_SetInvertedMouse");
static_assert(sizeof(PlayerContext_SetInvertedMouse) == 0x000001, "Wrong size on PlayerContext_SetInvertedMouse");
static_assert(offsetof(PlayerContext_SetInvertedMouse, bOn) == 0x000000, "Member 'PlayerContext_SetInvertedMouse::bOn' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetMasterGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetMasterGameVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetMasterGameVolume) == 0x000004, "Wrong alignment on PlayerContext_SetMasterGameVolume");
static_assert(sizeof(PlayerContext_SetMasterGameVolume) == 0x000004, "Wrong size on PlayerContext_SetMasterGameVolume");
static_assert(offsetof(PlayerContext_SetMasterGameVolume, NewValue) == 0x000000, "Member 'PlayerContext_SetMasterGameVolume::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetMouseLookSensitivity
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetMouseLookSensitivity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetMouseLookSensitivity) == 0x000004, "Wrong alignment on PlayerContext_SetMouseLookSensitivity");
static_assert(sizeof(PlayerContext_SetMouseLookSensitivity) == 0x000004, "Wrong size on PlayerContext_SetMouseLookSensitivity");
static_assert(offsetof(PlayerContext_SetMouseLookSensitivity, NewValue) == 0x000000, "Member 'PlayerContext_SetMouseLookSensitivity::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetMusicGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetMusicGameVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetMusicGameVolume) == 0x000004, "Wrong alignment on PlayerContext_SetMusicGameVolume");
static_assert(sizeof(PlayerContext_SetMusicGameVolume) == 0x000004, "Wrong size on PlayerContext_SetMusicGameVolume");
static_assert(offsetof(PlayerContext_SetMusicGameVolume, NewValue) == 0x000000, "Member 'PlayerContext_SetMusicGameVolume::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetOtherGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetOtherGameVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetOtherGameVolume) == 0x000004, "Wrong alignment on PlayerContext_SetOtherGameVolume");
static_assert(sizeof(PlayerContext_SetOtherGameVolume) == 0x000004, "Wrong size on PlayerContext_SetOtherGameVolume");
static_assert(offsetof(PlayerContext_SetOtherGameVolume, NewValue) == 0x000000, "Member 'PlayerContext_SetOtherGameVolume::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetShowAbilityConfirmWidget
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetShowAbilityConfirmWidget final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetShowAbilityConfirmWidget) == 0x000004, "Wrong alignment on PlayerContext_SetShowAbilityConfirmWidget");
static_assert(sizeof(PlayerContext_SetShowAbilityConfirmWidget) == 0x000004, "Wrong size on PlayerContext_SetShowAbilityConfirmWidget");
static_assert(offsetof(PlayerContext_SetShowAbilityConfirmWidget, NewValue) == 0x000000, "Member 'PlayerContext_SetShowAbilityConfirmWidget::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetShowAddedItemsInChat
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetShowAddedItemsInChat final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetShowAddedItemsInChat) == 0x000001, "Wrong alignment on PlayerContext_SetShowAddedItemsInChat");
static_assert(sizeof(PlayerContext_SetShowAddedItemsInChat) == 0x000001, "Wrong size on PlayerContext_SetShowAddedItemsInChat");
static_assert(offsetof(PlayerContext_SetShowAddedItemsInChat, bOn) == 0x000000, "Member 'PlayerContext_SetShowAddedItemsInChat::bOn' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetShowBasicAttackRangeIndicator
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetShowBasicAttackRangeIndicator final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetShowBasicAttackRangeIndicator) == 0x000004, "Wrong alignment on PlayerContext_SetShowBasicAttackRangeIndicator");
static_assert(sizeof(PlayerContext_SetShowBasicAttackRangeIndicator) == 0x000004, "Wrong size on PlayerContext_SetShowBasicAttackRangeIndicator");
static_assert(offsetof(PlayerContext_SetShowBasicAttackRangeIndicator, NewValue) == 0x000000, "Member 'PlayerContext_SetShowBasicAttackRangeIndicator::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetShowCompletedItemsInChat
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetShowCompletedItemsInChat final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetShowCompletedItemsInChat) == 0x000001, "Wrong alignment on PlayerContext_SetShowCompletedItemsInChat");
static_assert(sizeof(PlayerContext_SetShowCompletedItemsInChat) == 0x000001, "Wrong size on PlayerContext_SetShowCompletedItemsInChat");
static_assert(offsetof(PlayerContext_SetShowCompletedItemsInChat, bOn) == 0x000000, "Member 'PlayerContext_SetShowCompletedItemsInChat::bOn' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetShowDiscardedItemsInChat
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_SetShowDiscardedItemsInChat final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetShowDiscardedItemsInChat) == 0x000001, "Wrong alignment on PlayerContext_SetShowDiscardedItemsInChat");
static_assert(sizeof(PlayerContext_SetShowDiscardedItemsInChat) == 0x000001, "Wrong size on PlayerContext_SetShowDiscardedItemsInChat");
static_assert(offsetof(PlayerContext_SetShowDiscardedItemsInChat, bOn) == 0x000000, "Member 'PlayerContext_SetShowDiscardedItemsInChat::bOn' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetShowPingAndFPSOnHUD
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetShowPingAndFPSOnHUD final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetShowPingAndFPSOnHUD) == 0x000004, "Wrong alignment on PlayerContext_SetShowPingAndFPSOnHUD");
static_assert(sizeof(PlayerContext_SetShowPingAndFPSOnHUD) == 0x000004, "Wrong size on PlayerContext_SetShowPingAndFPSOnHUD");
static_assert(offsetof(PlayerContext_SetShowPingAndFPSOnHUD, NewValue) == 0x000000, "Member 'PlayerContext_SetShowPingAndFPSOnHUD::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetShowXPPerMinOnHUD
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetShowXPPerMinOnHUD final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetShowXPPerMinOnHUD) == 0x000004, "Wrong alignment on PlayerContext_SetShowXPPerMinOnHUD");
static_assert(sizeof(PlayerContext_SetShowXPPerMinOnHUD) == 0x000004, "Wrong size on PlayerContext_SetShowXPPerMinOnHUD");
static_assert(offsetof(PlayerContext_SetShowXPPerMinOnHUD, NewValue) == 0x000000, "Member 'PlayerContext_SetShowXPPerMinOnHUD::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetThemeMusic
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_SetThemeMusic final
{
public:
	class FString                                 NewTheme;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetThemeMusic) == 0x000008, "Wrong alignment on PlayerContext_SetThemeMusic");
static_assert(sizeof(PlayerContext_SetThemeMusic) == 0x000010, "Wrong size on PlayerContext_SetThemeMusic");
static_assert(offsetof(PlayerContext_SetThemeMusic, NewTheme) == 0x000000, "Member 'PlayerContext_SetThemeMusic::NewTheme' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetVeterancy
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_SetVeterancy final
{
public:
	EOrionVeterancy                               Veterancy;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bSuccess, class FText ErrorMessage)> Callback;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetVeterancy) == 0x000004, "Wrong alignment on PlayerContext_SetVeterancy");
static_assert(sizeof(PlayerContext_SetVeterancy) == 0x000018, "Wrong size on PlayerContext_SetVeterancy");
static_assert(offsetof(PlayerContext_SetVeterancy, Veterancy) == 0x000000, "Member 'PlayerContext_SetVeterancy::Veterancy' has a wrong offset!");
static_assert(offsetof(PlayerContext_SetVeterancy, Callback) == 0x000008, "Member 'PlayerContext_SetVeterancy::Callback' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SetVoiceGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_SetVoiceGameVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetVoiceGameVolume) == 0x000004, "Wrong alignment on PlayerContext_SetVoiceGameVolume");
static_assert(sizeof(PlayerContext_SetVoiceGameVolume) == 0x000004, "Wrong size on PlayerContext_SetVoiceGameVolume");
static_assert(offsetof(PlayerContext_SetVoiceGameVolume, NewValue) == 0x000000, "Member 'PlayerContext_SetVoiceGameVolume::NewValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GammaToSlider
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GammaToSlider final
{
public:
	float                                         Gamma;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GammaToSlider) == 0x000004, "Wrong alignment on PlayerContext_GammaToSlider");
static_assert(sizeof(PlayerContext_GammaToSlider) == 0x000008, "Wrong size on PlayerContext_GammaToSlider");
static_assert(offsetof(PlayerContext_GammaToSlider, Gamma) == 0x000000, "Member 'PlayerContext_GammaToSlider::Gamma' has a wrong offset!");
static_assert(offsetof(PlayerContext_GammaToSlider, ReturnValue) == 0x000004, "Member 'PlayerContext_GammaToSlider::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetAccountCountryCode
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetAccountCountryCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetAccountCountryCode) == 0x000008, "Wrong alignment on PlayerContext_GetAccountCountryCode");
static_assert(sizeof(PlayerContext_GetAccountCountryCode) == 0x000010, "Wrong size on PlayerContext_GetAccountCountryCode");
static_assert(offsetof(PlayerContext_GetAccountCountryCode, ReturnValue) == 0x000000, "Member 'PlayerContext_GetAccountCountryCode::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetAccountLevel
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetAccountLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetAccountLevel) == 0x000004, "Wrong alignment on PlayerContext_GetAccountLevel");
static_assert(sizeof(PlayerContext_GetAccountLevel) == 0x000004, "Wrong size on PlayerContext_GetAccountLevel");
static_assert(offsetof(PlayerContext_GetAccountLevel, ReturnValue) == 0x000000, "Member 'PlayerContext_GetAccountLevel::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetAccountLevelInfo
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetAccountLevelInfo final
{
public:
	struct FOrionLevelInfo                        AccountLevelInfo;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetAccountLevelInfo) == 0x000004, "Wrong alignment on PlayerContext_GetAccountLevelInfo");
static_assert(sizeof(PlayerContext_GetAccountLevelInfo) == 0x000010, "Wrong size on PlayerContext_GetAccountLevelInfo");
static_assert(offsetof(PlayerContext_GetAccountLevelInfo, AccountLevelInfo) == 0x000000, "Member 'PlayerContext_GetAccountLevelInfo::AccountLevelInfo' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetAutoOpenCardShop
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetAutoOpenCardShop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetAutoOpenCardShop) == 0x000001, "Wrong alignment on PlayerContext_GetAutoOpenCardShop");
static_assert(sizeof(PlayerContext_GetAutoOpenCardShop) == 0x000001, "Wrong size on PlayerContext_GetAutoOpenCardShop");
static_assert(offsetof(PlayerContext_GetAutoOpenCardShop, ReturnValue) == 0x000000, "Member 'PlayerContext_GetAutoOpenCardShop::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetAutoPlayInstantReplay
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetAutoPlayInstantReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetAutoPlayInstantReplay) == 0x000001, "Wrong alignment on PlayerContext_GetAutoPlayInstantReplay");
static_assert(sizeof(PlayerContext_GetAutoPlayInstantReplay) == 0x000001, "Wrong size on PlayerContext_GetAutoPlayInstantReplay");
static_assert(offsetof(PlayerContext_GetAutoPlayInstantReplay, ReturnValue) == 0x000000, "Member 'PlayerContext_GetAutoPlayInstantReplay::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetContinuousMusic
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetContinuousMusic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetContinuousMusic) == 0x000001, "Wrong alignment on PlayerContext_GetContinuousMusic");
static_assert(sizeof(PlayerContext_GetContinuousMusic) == 0x000001, "Wrong size on PlayerContext_GetContinuousMusic");
static_assert(offsetof(PlayerContext_GetContinuousMusic, ReturnValue) == 0x000000, "Member 'PlayerContext_GetContinuousMusic::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetDisplayCardOverLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetDisplayCardOverLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetDisplayCardOverLocalPlayer) == 0x000001, "Wrong alignment on PlayerContext_GetDisplayCardOverLocalPlayer");
static_assert(sizeof(PlayerContext_GetDisplayCardOverLocalPlayer) == 0x000001, "Wrong size on PlayerContext_GetDisplayCardOverLocalPlayer");
static_assert(offsetof(PlayerContext_GetDisplayCardOverLocalPlayer, ReturnValue) == 0x000000, "Member 'PlayerContext_GetDisplayCardOverLocalPlayer::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetEnableDeathcam
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetEnableDeathcam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetEnableDeathcam) == 0x000004, "Wrong alignment on PlayerContext_GetEnableDeathcam");
static_assert(sizeof(PlayerContext_GetEnableDeathcam) == 0x000004, "Wrong size on PlayerContext_GetEnableDeathcam");
static_assert(offsetof(PlayerContext_GetEnableDeathcam, ReturnValue) == 0x000000, "Member 'PlayerContext_GetEnableDeathcam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetEngineGammaValue
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetEngineGammaValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetEngineGammaValue) == 0x000004, "Wrong alignment on PlayerContext_GetEngineGammaValue");
static_assert(sizeof(PlayerContext_GetEngineGammaValue) == 0x000004, "Wrong size on PlayerContext_GetEngineGammaValue");
static_assert(offsetof(PlayerContext_GetEngineGammaValue, ReturnValue) == 0x000000, "Member 'PlayerContext_GetEngineGammaValue::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadAbilityConfirmOnRelease
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadAbilityConfirmOnRelease final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadAbilityConfirmOnRelease) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadAbilityConfirmOnRelease");
static_assert(sizeof(PlayerContext_GetGamepadAbilityConfirmOnRelease) == 0x000004, "Wrong size on PlayerContext_GetGamepadAbilityConfirmOnRelease");
static_assert(offsetof(PlayerContext_GetGamepadAbilityConfirmOnRelease, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadAbilityConfirmOnRelease::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadConfigIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadConfigIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadConfigIndex) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadConfigIndex");
static_assert(sizeof(PlayerContext_GetGamepadConfigIndex) == 0x000004, "Wrong size on PlayerContext_GetGamepadConfigIndex");
static_assert(offsetof(PlayerContext_GetGamepadConfigIndex, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadConfigIndex::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadHandednessConfigIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadHandednessConfigIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadHandednessConfigIndex) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadHandednessConfigIndex");
static_assert(sizeof(PlayerContext_GetGamepadHandednessConfigIndex) == 0x000004, "Wrong size on PlayerContext_GetGamepadHandednessConfigIndex");
static_assert(offsetof(PlayerContext_GetGamepadHandednessConfigIndex, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadHandednessConfigIndex::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadInvertPitch
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadInvertPitch final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadInvertPitch) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadInvertPitch");
static_assert(sizeof(PlayerContext_GetGamepadInvertPitch) == 0x000004, "Wrong size on PlayerContext_GetGamepadInvertPitch");
static_assert(offsetof(PlayerContext_GetGamepadInvertPitch, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadInvertPitch::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadInvertYaw
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadInvertYaw final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadInvertYaw) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadInvertYaw");
static_assert(sizeof(PlayerContext_GetGamepadInvertYaw) == 0x000004, "Wrong size on PlayerContext_GetGamepadInvertYaw");
static_assert(offsetof(PlayerContext_GetGamepadInvertYaw, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadInvertYaw::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadPitchSensitivity
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadPitchSensitivity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadPitchSensitivity) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadPitchSensitivity");
static_assert(sizeof(PlayerContext_GetGamepadPitchSensitivity) == 0x000004, "Wrong size on PlayerContext_GetGamepadPitchSensitivity");
static_assert(offsetof(PlayerContext_GetGamepadPitchSensitivity, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadPitchSensitivity::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadRadialSelectEnabled
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadRadialSelectEnabled final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadRadialSelectEnabled) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadRadialSelectEnabled");
static_assert(sizeof(PlayerContext_GetGamepadRadialSelectEnabled) == 0x000004, "Wrong size on PlayerContext_GetGamepadRadialSelectEnabled");
static_assert(offsetof(PlayerContext_GetGamepadRadialSelectEnabled, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadRadialSelectEnabled::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetGamepadYawSensitivity
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetGamepadYawSensitivity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGamepadYawSensitivity) == 0x000004, "Wrong alignment on PlayerContext_GetGamepadYawSensitivity");
static_assert(sizeof(PlayerContext_GetGamepadYawSensitivity) == 0x000004, "Wrong size on PlayerContext_GetGamepadYawSensitivity");
static_assert(offsetof(PlayerContext_GetGamepadYawSensitivity, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGamepadYawSensitivity::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetHealthBarOverhead
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetHealthBarOverhead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetHealthBarOverhead) == 0x000001, "Wrong alignment on PlayerContext_GetHealthBarOverhead");
static_assert(sizeof(PlayerContext_GetHealthBarOverhead) == 0x000001, "Wrong size on PlayerContext_GetHealthBarOverhead");
static_assert(offsetof(PlayerContext_GetHealthBarOverhead, ReturnValue) == 0x000000, "Member 'PlayerContext_GetHealthBarOverhead::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetInvertedMouse
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetInvertedMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetInvertedMouse) == 0x000001, "Wrong alignment on PlayerContext_GetInvertedMouse");
static_assert(sizeof(PlayerContext_GetInvertedMouse) == 0x000001, "Wrong size on PlayerContext_GetInvertedMouse");
static_assert(offsetof(PlayerContext_GetInvertedMouse, ReturnValue) == 0x000000, "Member 'PlayerContext_GetInvertedMouse::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetMasterGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetMasterGameVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetMasterGameVolume) == 0x000004, "Wrong alignment on PlayerContext_GetMasterGameVolume");
static_assert(sizeof(PlayerContext_GetMasterGameVolume) == 0x000004, "Wrong size on PlayerContext_GetMasterGameVolume");
static_assert(offsetof(PlayerContext_GetMasterGameVolume, ReturnValue) == 0x000000, "Member 'PlayerContext_GetMasterGameVolume::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetMinorCanPlayAtTime
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GetMinorCanPlayAtTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetMinorCanPlayAtTime) == 0x000008, "Wrong alignment on PlayerContext_GetMinorCanPlayAtTime");
static_assert(sizeof(PlayerContext_GetMinorCanPlayAtTime) == 0x000008, "Wrong size on PlayerContext_GetMinorCanPlayAtTime");
static_assert(offsetof(PlayerContext_GetMinorCanPlayAtTime, ReturnValue) == 0x000000, "Member 'PlayerContext_GetMinorCanPlayAtTime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetMinorShutDownAtTime
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GetMinorShutDownAtTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetMinorShutDownAtTime) == 0x000008, "Wrong alignment on PlayerContext_GetMinorShutDownAtTime");
static_assert(sizeof(PlayerContext_GetMinorShutDownAtTime) == 0x000008, "Wrong size on PlayerContext_GetMinorShutDownAtTime");
static_assert(offsetof(PlayerContext_GetMinorShutDownAtTime, ReturnValue) == 0x000000, "Member 'PlayerContext_GetMinorShutDownAtTime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetMouseLookSensitivity
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetMouseLookSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetMouseLookSensitivity) == 0x000004, "Wrong alignment on PlayerContext_GetMouseLookSensitivity");
static_assert(sizeof(PlayerContext_GetMouseLookSensitivity) == 0x000004, "Wrong size on PlayerContext_GetMouseLookSensitivity");
static_assert(offsetof(PlayerContext_GetMouseLookSensitivity, ReturnValue) == 0x000000, "Member 'PlayerContext_GetMouseLookSensitivity::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetMusicGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetMusicGameVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetMusicGameVolume) == 0x000004, "Wrong alignment on PlayerContext_GetMusicGameVolume");
static_assert(sizeof(PlayerContext_GetMusicGameVolume) == 0x000004, "Wrong size on PlayerContext_GetMusicGameVolume");
static_assert(offsetof(PlayerContext_GetMusicGameVolume, ReturnValue) == 0x000000, "Member 'PlayerContext_GetMusicGameVolume::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetName
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetName) == 0x000008, "Wrong alignment on PlayerContext_GetName");
static_assert(sizeof(PlayerContext_GetName) == 0x000018, "Wrong size on PlayerContext_GetName");
static_assert(offsetof(PlayerContext_GetName, ReturnValue) == 0x000000, "Member 'PlayerContext_GetName::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetNewDawnGamesPlayed
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetNewDawnGamesPlayed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetNewDawnGamesPlayed) == 0x000004, "Wrong alignment on PlayerContext_GetNewDawnGamesPlayed");
static_assert(sizeof(PlayerContext_GetNewDawnGamesPlayed) == 0x000004, "Wrong size on PlayerContext_GetNewDawnGamesPlayed");
static_assert(offsetof(PlayerContext_GetNewDawnGamesPlayed, ReturnValue) == 0x000000, "Member 'PlayerContext_GetNewDawnGamesPlayed::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetOtherGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetOtherGameVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetOtherGameVolume) == 0x000004, "Wrong alignment on PlayerContext_GetOtherGameVolume");
static_assert(sizeof(PlayerContext_GetOtherGameVolume) == 0x000004, "Wrong size on PlayerContext_GetOtherGameVolume");
static_assert(offsetof(PlayerContext_GetOtherGameVolume, ReturnValue) == 0x000000, "Member 'PlayerContext_GetOtherGameVolume::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetPlayerLoginTime
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GetPlayerLoginTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetPlayerLoginTime) == 0x000008, "Wrong alignment on PlayerContext_GetPlayerLoginTime");
static_assert(sizeof(PlayerContext_GetPlayerLoginTime) == 0x000008, "Wrong size on PlayerContext_GetPlayerLoginTime");
static_assert(offsetof(PlayerContext_GetPlayerLoginTime, ReturnValue) == 0x000000, "Member 'PlayerContext_GetPlayerLoginTime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetShowAbilityConfirmWidget
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetShowAbilityConfirmWidget final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetShowAbilityConfirmWidget) == 0x000004, "Wrong alignment on PlayerContext_GetShowAbilityConfirmWidget");
static_assert(sizeof(PlayerContext_GetShowAbilityConfirmWidget) == 0x000004, "Wrong size on PlayerContext_GetShowAbilityConfirmWidget");
static_assert(offsetof(PlayerContext_GetShowAbilityConfirmWidget, ReturnValue) == 0x000000, "Member 'PlayerContext_GetShowAbilityConfirmWidget::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetShowAddedItemsInChat
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetShowAddedItemsInChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetShowAddedItemsInChat) == 0x000001, "Wrong alignment on PlayerContext_GetShowAddedItemsInChat");
static_assert(sizeof(PlayerContext_GetShowAddedItemsInChat) == 0x000001, "Wrong size on PlayerContext_GetShowAddedItemsInChat");
static_assert(offsetof(PlayerContext_GetShowAddedItemsInChat, ReturnValue) == 0x000000, "Member 'PlayerContext_GetShowAddedItemsInChat::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetShowBasicAttackRangeIndicator
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetShowBasicAttackRangeIndicator final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetShowBasicAttackRangeIndicator) == 0x000004, "Wrong alignment on PlayerContext_GetShowBasicAttackRangeIndicator");
static_assert(sizeof(PlayerContext_GetShowBasicAttackRangeIndicator) == 0x000004, "Wrong size on PlayerContext_GetShowBasicAttackRangeIndicator");
static_assert(offsetof(PlayerContext_GetShowBasicAttackRangeIndicator, ReturnValue) == 0x000000, "Member 'PlayerContext_GetShowBasicAttackRangeIndicator::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetShowCompletedItemsInChat
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetShowCompletedItemsInChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetShowCompletedItemsInChat) == 0x000001, "Wrong alignment on PlayerContext_GetShowCompletedItemsInChat");
static_assert(sizeof(PlayerContext_GetShowCompletedItemsInChat) == 0x000001, "Wrong size on PlayerContext_GetShowCompletedItemsInChat");
static_assert(offsetof(PlayerContext_GetShowCompletedItemsInChat, ReturnValue) == 0x000000, "Member 'PlayerContext_GetShowCompletedItemsInChat::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetShowDiscardedItemsInChat
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetShowDiscardedItemsInChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetShowDiscardedItemsInChat) == 0x000001, "Wrong alignment on PlayerContext_GetShowDiscardedItemsInChat");
static_assert(sizeof(PlayerContext_GetShowDiscardedItemsInChat) == 0x000001, "Wrong size on PlayerContext_GetShowDiscardedItemsInChat");
static_assert(offsetof(PlayerContext_GetShowDiscardedItemsInChat, ReturnValue) == 0x000000, "Member 'PlayerContext_GetShowDiscardedItemsInChat::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetShowPingAndFPSOnHUD
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetShowPingAndFPSOnHUD final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetShowPingAndFPSOnHUD) == 0x000004, "Wrong alignment on PlayerContext_GetShowPingAndFPSOnHUD");
static_assert(sizeof(PlayerContext_GetShowPingAndFPSOnHUD) == 0x000004, "Wrong size on PlayerContext_GetShowPingAndFPSOnHUD");
static_assert(offsetof(PlayerContext_GetShowPingAndFPSOnHUD, ReturnValue) == 0x000000, "Member 'PlayerContext_GetShowPingAndFPSOnHUD::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetShowXPPerMinOnHUD
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetShowXPPerMinOnHUD final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetShowXPPerMinOnHUD) == 0x000004, "Wrong alignment on PlayerContext_GetShowXPPerMinOnHUD");
static_assert(sizeof(PlayerContext_GetShowXPPerMinOnHUD) == 0x000004, "Wrong size on PlayerContext_GetShowXPPerMinOnHUD");
static_assert(offsetof(PlayerContext_GetShowXPPerMinOnHUD, ReturnValue) == 0x000000, "Member 'PlayerContext_GetShowXPPerMinOnHUD::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetThemeMusic
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetThemeMusic final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetThemeMusic) == 0x000008, "Wrong alignment on PlayerContext_GetThemeMusic");
static_assert(sizeof(PlayerContext_GetThemeMusic) == 0x000010, "Wrong size on PlayerContext_GetThemeMusic");
static_assert(offsetof(PlayerContext_GetThemeMusic, ReturnValue) == 0x000000, "Member 'PlayerContext_GetThemeMusic::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.GetVoiceGameVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetVoiceGameVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetVoiceGameVolume) == 0x000004, "Wrong alignment on PlayerContext_GetVoiceGameVolume");
static_assert(sizeof(PlayerContext_GetVoiceGameVolume) == 0x000004, "Wrong size on PlayerContext_GetVoiceGameVolume");
static_assert(offsetof(PlayerContext_GetVoiceGameVolume, ReturnValue) == 0x000000, "Member 'PlayerContext_GetVoiceGameVolume::ReturnValue' has a wrong offset!");

// Function BlueprintContext.PlayerContext.SliderToGamma
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_SliderToGamma final
{
public:
	float                                         SliderPosition;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SliderToGamma) == 0x000004, "Wrong alignment on PlayerContext_SliderToGamma");
static_assert(sizeof(PlayerContext_SliderToGamma) == 0x000008, "Wrong size on PlayerContext_SliderToGamma");
static_assert(offsetof(PlayerContext_SliderToGamma, SliderPosition) == 0x000000, "Member 'PlayerContext_SliderToGamma::SliderPosition' has a wrong offset!");
static_assert(offsetof(PlayerContext_SliderToGamma, ReturnValue) == 0x000004, "Member 'PlayerContext_SliderToGamma::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ReticleContext.AddReticle
// 0x0018 (0x0018 - 0x0000)
struct ReticleContext_AddReticle final
{
public:
	class UOrionAbilitySystemComponent*           AbilityComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UOrionAbility*                    Ability;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UOrionUserWidget_Reticle>   OptionalReticleClass;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_AddReticle) == 0x000008, "Wrong alignment on ReticleContext_AddReticle");
static_assert(sizeof(ReticleContext_AddReticle) == 0x000018, "Wrong size on ReticleContext_AddReticle");
static_assert(offsetof(ReticleContext_AddReticle, AbilityComp) == 0x000000, "Member 'ReticleContext_AddReticle::AbilityComp' has a wrong offset!");
static_assert(offsetof(ReticleContext_AddReticle, Ability) == 0x000008, "Member 'ReticleContext_AddReticle::Ability' has a wrong offset!");
static_assert(offsetof(ReticleContext_AddReticle, OptionalReticleClass) == 0x000010, "Member 'ReticleContext_AddReticle::OptionalReticleClass' has a wrong offset!");

// Function BlueprintContext.ReticleContext.HideReticle
// 0x0008 (0x0008 - 0x0000)
struct ReticleContext_HideReticle final
{
public:
	const class UOrionAbility*                    Ability;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_HideReticle) == 0x000008, "Wrong alignment on ReticleContext_HideReticle");
static_assert(sizeof(ReticleContext_HideReticle) == 0x000008, "Wrong size on ReticleContext_HideReticle");
static_assert(offsetof(ReticleContext_HideReticle, Ability) == 0x000000, "Member 'ReticleContext_HideReticle::Ability' has a wrong offset!");

// DelegateFunction BlueprintContext.ReticleContext.OnActivelyTargeting__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ReticleContext_OnActivelyTargeting__DelegateSignature final
{
public:
	bool                                          CurrentlyTargeting;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_OnActivelyTargeting__DelegateSignature) == 0x000001, "Wrong alignment on ReticleContext_OnActivelyTargeting__DelegateSignature");
static_assert(sizeof(ReticleContext_OnActivelyTargeting__DelegateSignature) == 0x000001, "Wrong size on ReticleContext_OnActivelyTargeting__DelegateSignature");
static_assert(offsetof(ReticleContext_OnActivelyTargeting__DelegateSignature, CurrentlyTargeting) == 0x000000, "Member 'ReticleContext_OnActivelyTargeting__DelegateSignature::CurrentlyTargeting' has a wrong offset!");

// Function BlueprintContext.ReticleContext.OnSuccessfulHit
// 0x0010 (0x0010 - 0x0000)
struct ReticleContext_OnSuccessfulHit final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Instigator;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_OnSuccessfulHit) == 0x000008, "Wrong alignment on ReticleContext_OnSuccessfulHit");
static_assert(sizeof(ReticleContext_OnSuccessfulHit) == 0x000010, "Wrong size on ReticleContext_OnSuccessfulHit");
static_assert(offsetof(ReticleContext_OnSuccessfulHit, TargetActor) == 0x000000, "Member 'ReticleContext_OnSuccessfulHit::TargetActor' has a wrong offset!");
static_assert(offsetof(ReticleContext_OnSuccessfulHit, Instigator) == 0x000008, "Member 'ReticleContext_OnSuccessfulHit::Instigator' has a wrong offset!");

// Function BlueprintContext.ReticleContext.SetDefaultReticle
// 0x0008 (0x0008 - 0x0000)
struct ReticleContext_SetDefaultReticle final
{
public:
	class UOrionUserWidget_Reticle*               NewDefaultReticle;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_SetDefaultReticle) == 0x000008, "Wrong alignment on ReticleContext_SetDefaultReticle");
static_assert(sizeof(ReticleContext_SetDefaultReticle) == 0x000008, "Wrong size on ReticleContext_SetDefaultReticle");
static_assert(offsetof(ReticleContext_SetDefaultReticle, NewDefaultReticle) == 0x000000, "Member 'ReticleContext_SetDefaultReticle::NewDefaultReticle' has a wrong offset!");

// Function BlueprintContext.ReticleContext.ShowReticle
// 0x0008 (0x0008 - 0x0000)
struct ReticleContext_ShowReticle final
{
public:
	const class UOrionAbility*                    Ability;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_ShowReticle) == 0x000008, "Wrong alignment on ReticleContext_ShowReticle");
static_assert(sizeof(ReticleContext_ShowReticle) == 0x000008, "Wrong size on ReticleContext_ShowReticle");
static_assert(offsetof(ReticleContext_ShowReticle, Ability) == 0x000000, "Member 'ReticleContext_ShowReticle::Ability' has a wrong offset!");

// Function BlueprintContext.ReticleContext.GetHideCount
// 0x0004 (0x0004 - 0x0000)
struct ReticleContext_GetHideCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_GetHideCount) == 0x000004, "Wrong alignment on ReticleContext_GetHideCount");
static_assert(sizeof(ReticleContext_GetHideCount) == 0x000004, "Wrong size on ReticleContext_GetHideCount");
static_assert(offsetof(ReticleContext_GetHideCount, ReturnValue) == 0x000000, "Member 'ReticleContext_GetHideCount::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ReticleContext.GetReticleClass
// 0x0008 (0x0008 - 0x0000)
struct ReticleContext_GetReticleClass final
{
public:
	TSubclassOf<class UOrionUserWidget_Reticle>   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_GetReticleClass) == 0x000008, "Wrong alignment on ReticleContext_GetReticleClass");
static_assert(sizeof(ReticleContext_GetReticleClass) == 0x000008, "Wrong size on ReticleContext_GetReticleClass");
static_assert(offsetof(ReticleContext_GetReticleClass, ReturnValue) == 0x000000, "Member 'ReticleContext_GetReticleClass::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ReticleContext.GetReticleWidget
// 0x0010 (0x0010 - 0x0000)
struct ReticleContext_GetReticleWidget final
{
public:
	const class UOrionAbility*                    Ability;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionUserWidget_Reticle*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_GetReticleWidget) == 0x000008, "Wrong alignment on ReticleContext_GetReticleWidget");
static_assert(sizeof(ReticleContext_GetReticleWidget) == 0x000010, "Wrong size on ReticleContext_GetReticleWidget");
static_assert(offsetof(ReticleContext_GetReticleWidget, Ability) == 0x000000, "Member 'ReticleContext_GetReticleWidget::Ability' has a wrong offset!");
static_assert(offsetof(ReticleContext_GetReticleWidget, ReturnValue) == 0x000008, "Member 'ReticleContext_GetReticleWidget::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ReticleContext.IsActivelyTargetingAnyActor
// 0x0001 (0x0001 - 0x0000)
struct ReticleContext_IsActivelyTargetingAnyActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_IsActivelyTargetingAnyActor) == 0x000001, "Wrong alignment on ReticleContext_IsActivelyTargetingAnyActor");
static_assert(sizeof(ReticleContext_IsActivelyTargetingAnyActor) == 0x000001, "Wrong size on ReticleContext_IsActivelyTargetingAnyActor");
static_assert(offsetof(ReticleContext_IsActivelyTargetingAnyActor, ReturnValue) == 0x000000, "Member 'ReticleContext_IsActivelyTargetingAnyActor::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ReticleContext.IsReticleHidden
// 0x0001 (0x0001 - 0x0000)
struct ReticleContext_IsReticleHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_IsReticleHidden) == 0x000001, "Wrong alignment on ReticleContext_IsReticleHidden");
static_assert(sizeof(ReticleContext_IsReticleHidden) == 0x000001, "Wrong size on ReticleContext_IsReticleHidden");
static_assert(offsetof(ReticleContext_IsReticleHidden, ReturnValue) == 0x000000, "Member 'ReticleContext_IsReticleHidden::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ReticleContext.IsUsingUMGReticle
// 0x0001 (0x0001 - 0x0000)
struct ReticleContext_IsUsingUMGReticle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReticleContext_IsUsingUMGReticle) == 0x000001, "Wrong alignment on ReticleContext_IsUsingUMGReticle");
static_assert(sizeof(ReticleContext_IsUsingUMGReticle) == 0x000001, "Wrong size on ReticleContext_IsUsingUMGReticle");
static_assert(offsetof(ReticleContext_IsUsingUMGReticle, ReturnValue) == 0x000000, "Member 'ReticleContext_IsUsingUMGReticle::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetCurrentMatchTime
// 0x0004 (0x0004 - 0x0000)
struct ScoreboardContext_GetCurrentMatchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetCurrentMatchTime) == 0x000004, "Wrong alignment on ScoreboardContext_GetCurrentMatchTime");
static_assert(sizeof(ScoreboardContext_GetCurrentMatchTime) == 0x000004, "Wrong size on ScoreboardContext_GetCurrentMatchTime");
static_assert(offsetof(ScoreboardContext_GetCurrentMatchTime, ReturnValue) == 0x000000, "Member 'ScoreboardContext_GetCurrentMatchTime::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetEnemyTeam
// 0x0001 (0x0001 - 0x0000)
struct ScoreboardContext_GetEnemyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetEnemyTeam) == 0x000001, "Wrong alignment on ScoreboardContext_GetEnemyTeam");
static_assert(sizeof(ScoreboardContext_GetEnemyTeam) == 0x000001, "Wrong size on ScoreboardContext_GetEnemyTeam");
static_assert(offsetof(ScoreboardContext_GetEnemyTeam, ReturnValue) == 0x000000, "Member 'ScoreboardContext_GetEnemyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetLocalPlayerScoreboardEntry
// 0x00C0 (0x00C0 - 0x0000)
struct ScoreboardContext_GetLocalPlayerScoreboardEntry final
{
public:
	struct FOrionScoreboardPlayerEntryInfo        ReturnValue;                                       // 0x0000(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetLocalPlayerScoreboardEntry) == 0x000008, "Wrong alignment on ScoreboardContext_GetLocalPlayerScoreboardEntry");
static_assert(sizeof(ScoreboardContext_GetLocalPlayerScoreboardEntry) == 0x0000C0, "Wrong size on ScoreboardContext_GetLocalPlayerScoreboardEntry");
static_assert(offsetof(ScoreboardContext_GetLocalPlayerScoreboardEntry, ReturnValue) == 0x000000, "Member 'ScoreboardContext_GetLocalPlayerScoreboardEntry::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetLocalPlayerUIID
// 0x0028 (0x0028 - 0x0000)
struct ScoreboardContext_GetLocalPlayerUIID final
{
public:
	struct FOrionPlayerStateUIID                  ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetLocalPlayerUIID) == 0x000008, "Wrong alignment on ScoreboardContext_GetLocalPlayerUIID");
static_assert(sizeof(ScoreboardContext_GetLocalPlayerUIID) == 0x000028, "Wrong size on ScoreboardContext_GetLocalPlayerUIID");
static_assert(offsetof(ScoreboardContext_GetLocalPlayerUIID, ReturnValue) == 0x000000, "Member 'ScoreboardContext_GetLocalPlayerUIID::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetMyTeam
// 0x0001 (0x0001 - 0x0000)
struct ScoreboardContext_GetMyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetMyTeam) == 0x000001, "Wrong alignment on ScoreboardContext_GetMyTeam");
static_assert(sizeof(ScoreboardContext_GetMyTeam) == 0x000001, "Wrong size on ScoreboardContext_GetMyTeam");
static_assert(offsetof(ScoreboardContext_GetMyTeam, ReturnValue) == 0x000000, "Member 'ScoreboardContext_GetMyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetScoreboardPlayerEntry
// 0x00C8 (0x00C8 - 0x0000)
struct ScoreboardContext_GetScoreboardPlayerEntry final
{
public:
	EOrionTeam                                    TeamNum;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOrionScoreboardPlayerEntryInfo        ReturnValue;                                       // 0x0008(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetScoreboardPlayerEntry) == 0x000008, "Wrong alignment on ScoreboardContext_GetScoreboardPlayerEntry");
static_assert(sizeof(ScoreboardContext_GetScoreboardPlayerEntry) == 0x0000C8, "Wrong size on ScoreboardContext_GetScoreboardPlayerEntry");
static_assert(offsetof(ScoreboardContext_GetScoreboardPlayerEntry, TeamNum) == 0x000000, "Member 'ScoreboardContext_GetScoreboardPlayerEntry::TeamNum' has a wrong offset!");
static_assert(offsetof(ScoreboardContext_GetScoreboardPlayerEntry, PlayerIndex) == 0x000004, "Member 'ScoreboardContext_GetScoreboardPlayerEntry::PlayerIndex' has a wrong offset!");
static_assert(offsetof(ScoreboardContext_GetScoreboardPlayerEntry, ReturnValue) == 0x000008, "Member 'ScoreboardContext_GetScoreboardPlayerEntry::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetScoreboardPlayerEntryFromUIID
// 0x00E8 (0x00E8 - 0x0000)
struct ScoreboardContext_GetScoreboardPlayerEntryFromUIID final
{
public:
	struct FOrionPlayerStateUIID                  PlayerStateUIID;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOrionScoreboardPlayerEntryInfo        ReturnValue;                                       // 0x0028(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetScoreboardPlayerEntryFromUIID) == 0x000008, "Wrong alignment on ScoreboardContext_GetScoreboardPlayerEntryFromUIID");
static_assert(sizeof(ScoreboardContext_GetScoreboardPlayerEntryFromUIID) == 0x0000E8, "Wrong size on ScoreboardContext_GetScoreboardPlayerEntryFromUIID");
static_assert(offsetof(ScoreboardContext_GetScoreboardPlayerEntryFromUIID, PlayerStateUIID) == 0x000000, "Member 'ScoreboardContext_GetScoreboardPlayerEntryFromUIID::PlayerStateUIID' has a wrong offset!");
static_assert(offsetof(ScoreboardContext_GetScoreboardPlayerEntryFromUIID, ReturnValue) == 0x000028, "Member 'ScoreboardContext_GetScoreboardPlayerEntryFromUIID::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.GetScoreboardTeamEntry
// 0x0038 (0x0038 - 0x0000)
struct ScoreboardContext_GetScoreboardTeamEntry final
{
public:
	EOrionTeam                                    TeamNum;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrionScoreboardTeamEntryInfo          ReturnValue;                                       // 0x0004(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_GetScoreboardTeamEntry) == 0x000004, "Wrong alignment on ScoreboardContext_GetScoreboardTeamEntry");
static_assert(sizeof(ScoreboardContext_GetScoreboardTeamEntry) == 0x000038, "Wrong size on ScoreboardContext_GetScoreboardTeamEntry");
static_assert(offsetof(ScoreboardContext_GetScoreboardTeamEntry, TeamNum) == 0x000000, "Member 'ScoreboardContext_GetScoreboardTeamEntry::TeamNum' has a wrong offset!");
static_assert(offsetof(ScoreboardContext_GetScoreboardTeamEntry, ReturnValue) == 0x000004, "Member 'ScoreboardContext_GetScoreboardTeamEntry::ReturnValue' has a wrong offset!");

// Function BlueprintContext.ScoreboardContext.IsSpectatorScoreboard
// 0x0001 (0x0001 - 0x0000)
struct ScoreboardContext_IsSpectatorScoreboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreboardContext_IsSpectatorScoreboard) == 0x000001, "Wrong alignment on ScoreboardContext_IsSpectatorScoreboard");
static_assert(sizeof(ScoreboardContext_IsSpectatorScoreboard) == 0x000001, "Wrong size on ScoreboardContext_IsSpectatorScoreboard");
static_assert(offsetof(ScoreboardContext_IsSpectatorScoreboard, ReturnValue) == 0x000000, "Member 'ScoreboardContext_IsSpectatorScoreboard::ReturnValue' has a wrong offset!");

// Function BlueprintContext.SpectatorHUDContext.GetCurrentMatchTime
// 0x0004 (0x0004 - 0x0000)
struct SpectatorHUDContext_GetCurrentMatchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_GetCurrentMatchTime) == 0x000004, "Wrong alignment on SpectatorHUDContext_GetCurrentMatchTime");
static_assert(sizeof(SpectatorHUDContext_GetCurrentMatchTime) == 0x000004, "Wrong size on SpectatorHUDContext_GetCurrentMatchTime");
static_assert(offsetof(SpectatorHUDContext_GetCurrentMatchTime, ReturnValue) == 0x000000, "Member 'SpectatorHUDContext_GetCurrentMatchTime::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.SpectatorHUDContext.OnPlayerInfoUpdateDelegate__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature final
{
public:
	EOrionTeam                                    TeamNum;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOrionSpectatorHUDPlayerInfo           NewPlayerInfo;                                     // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature");
static_assert(sizeof(SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature) == 0x0000C8, "Wrong size on SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature");
static_assert(offsetof(SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature, TeamNum) == 0x000000, "Member 'SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature::TeamNum' has a wrong offset!");
static_assert(offsetof(SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature, PlayerIndex) == 0x000004, "Member 'SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature, NewPlayerInfo) == 0x000008, "Member 'SpectatorHUDContext_OnPlayerInfoUpdateDelegate__DelegateSignature::NewPlayerInfo' has a wrong offset!");

// DelegateFunction BlueprintContext.SpectatorHUDContext.OnSetHudVisibility__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct SpectatorHUDContext_OnSetHudVisibility__DelegateSignature final
{
public:
	bool                                          bMainVisible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIndicatorsVisible;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_OnSetHudVisibility__DelegateSignature) == 0x000001, "Wrong alignment on SpectatorHUDContext_OnSetHudVisibility__DelegateSignature");
static_assert(sizeof(SpectatorHUDContext_OnSetHudVisibility__DelegateSignature) == 0x000002, "Wrong size on SpectatorHUDContext_OnSetHudVisibility__DelegateSignature");
static_assert(offsetof(SpectatorHUDContext_OnSetHudVisibility__DelegateSignature, bMainVisible) == 0x000000, "Member 'SpectatorHUDContext_OnSetHudVisibility__DelegateSignature::bMainVisible' has a wrong offset!");
static_assert(offsetof(SpectatorHUDContext_OnSetHudVisibility__DelegateSignature, bIndicatorsVisible) == 0x000001, "Member 'SpectatorHUDContext_OnSetHudVisibility__DelegateSignature::bIndicatorsVisible' has a wrong offset!");

// DelegateFunction BlueprintContext.SpectatorHUDContext.OnSpectatorCameraModeChange__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SpectatorHUDContext_OnSpectatorCameraModeChange__DelegateSignature final
{
public:
	ESpectatorCameraType                          NewCameraMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_OnSpectatorCameraModeChange__DelegateSignature) == 0x000001, "Wrong alignment on SpectatorHUDContext_OnSpectatorCameraModeChange__DelegateSignature");
static_assert(sizeof(SpectatorHUDContext_OnSpectatorCameraModeChange__DelegateSignature) == 0x000001, "Wrong size on SpectatorHUDContext_OnSpectatorCameraModeChange__DelegateSignature");
static_assert(offsetof(SpectatorHUDContext_OnSpectatorCameraModeChange__DelegateSignature, NewCameraMode) == 0x000000, "Member 'SpectatorHUDContext_OnSpectatorCameraModeChange__DelegateSignature::NewCameraMode' has a wrong offset!");

// DelegateFunction BlueprintContext.SpectatorHUDContext.OnSpectatorWatchedHeroChange__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature final
{
public:
	EOrionTeam                                    HeroTeam;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature) == 0x000004, "Wrong alignment on SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature");
static_assert(sizeof(SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature) == 0x000008, "Wrong size on SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature");
static_assert(offsetof(SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature, HeroTeam) == 0x000000, "Member 'SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature::HeroTeam' has a wrong offset!");
static_assert(offsetof(SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature, HeroIndex) == 0x000004, "Member 'SpectatorHUDContext_OnSpectatorWatchedHeroChange__DelegateSignature::HeroIndex' has a wrong offset!");

// Function BlueprintContext.SpectatorHUDContext.GetEnemyTeam
// 0x0001 (0x0001 - 0x0000)
struct SpectatorHUDContext_GetEnemyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_GetEnemyTeam) == 0x000001, "Wrong alignment on SpectatorHUDContext_GetEnemyTeam");
static_assert(sizeof(SpectatorHUDContext_GetEnemyTeam) == 0x000001, "Wrong size on SpectatorHUDContext_GetEnemyTeam");
static_assert(offsetof(SpectatorHUDContext_GetEnemyTeam, ReturnValue) == 0x000000, "Member 'SpectatorHUDContext_GetEnemyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.SpectatorHUDContext.GetHUDPlayerInfo
// 0x0070 (0x0070 - 0x0000)
struct SpectatorHUDContext_GetHUDPlayerInfo final
{
public:
	struct FOrionBaseHUDPlayerInfo                ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_GetHUDPlayerInfo) == 0x000008, "Wrong alignment on SpectatorHUDContext_GetHUDPlayerInfo");
static_assert(sizeof(SpectatorHUDContext_GetHUDPlayerInfo) == 0x000070, "Wrong size on SpectatorHUDContext_GetHUDPlayerInfo");
static_assert(offsetof(SpectatorHUDContext_GetHUDPlayerInfo, ReturnValue) == 0x000000, "Member 'SpectatorHUDContext_GetHUDPlayerInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.SpectatorHUDContext.GetMyTeam
// 0x0001 (0x0001 - 0x0000)
struct SpectatorHUDContext_GetMyTeam final
{
public:
	EOrionTeam                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_GetMyTeam) == 0x000001, "Wrong alignment on SpectatorHUDContext_GetMyTeam");
static_assert(sizeof(SpectatorHUDContext_GetMyTeam) == 0x000001, "Wrong size on SpectatorHUDContext_GetMyTeam");
static_assert(offsetof(SpectatorHUDContext_GetMyTeam, ReturnValue) == 0x000000, "Member 'SpectatorHUDContext_GetMyTeam::ReturnValue' has a wrong offset!");

// Function BlueprintContext.SpectatorHUDContext.GetSpectatorHUDPlayerInfo
// 0x00C8 (0x00C8 - 0x0000)
struct SpectatorHUDContext_GetSpectatorHUDPlayerInfo final
{
public:
	EOrionTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOrionSpectatorHUDPlayerInfo           ReturnValue;                                       // 0x0008(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorHUDContext_GetSpectatorHUDPlayerInfo) == 0x000008, "Wrong alignment on SpectatorHUDContext_GetSpectatorHUDPlayerInfo");
static_assert(sizeof(SpectatorHUDContext_GetSpectatorHUDPlayerInfo) == 0x0000C8, "Wrong size on SpectatorHUDContext_GetSpectatorHUDPlayerInfo");
static_assert(offsetof(SpectatorHUDContext_GetSpectatorHUDPlayerInfo, Team) == 0x000000, "Member 'SpectatorHUDContext_GetSpectatorHUDPlayerInfo::Team' has a wrong offset!");
static_assert(offsetof(SpectatorHUDContext_GetSpectatorHUDPlayerInfo, Index_0) == 0x000004, "Member 'SpectatorHUDContext_GetSpectatorHUDPlayerInfo::Index_0' has a wrong offset!");
static_assert(offsetof(SpectatorHUDContext_GetSpectatorHUDPlayerInfo, ReturnValue) == 0x000008, "Member 'SpectatorHUDContext_GetSpectatorHUDPlayerInfo::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.StoreContext.OnEpicPurchasingWidgetDisplay__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature final
{
public:
	class UWidget*                                WebWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature) == 0x000008, "Wrong alignment on StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature");
static_assert(sizeof(StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature) == 0x000018, "Wrong size on StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature");
static_assert(offsetof(StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature, WebWidget) == 0x000000, "Member 'StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature::WebWidget' has a wrong offset!");
static_assert(offsetof(StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature, OfferId) == 0x000008, "Member 'StoreContext_OnEpicPurchasingWidgetDisplay__DelegateSignature::OfferId' has a wrong offset!");

// DelegateFunction BlueprintContext.StoreContext.OnPlatformStoreClosed__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct StoreContext_OnPlatformStoreClosed__DelegateSignature final
{
public:
	bool                                          bPurchased;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_OnPlatformStoreClosed__DelegateSignature) == 0x000001, "Wrong alignment on StoreContext_OnPlatformStoreClosed__DelegateSignature");
static_assert(sizeof(StoreContext_OnPlatformStoreClosed__DelegateSignature) == 0x000001, "Wrong size on StoreContext_OnPlatformStoreClosed__DelegateSignature");
static_assert(offsetof(StoreContext_OnPlatformStoreClosed__DelegateSignature, bPurchased) == 0x000000, "Member 'StoreContext_OnPlatformStoreClosed__DelegateSignature::bPurchased' has a wrong offset!");

// Function BlueprintContext.StoreContext.RegisterForEpicPurchasingDisplay
// 0x0020 (0x0020 - 0x0000)
struct StoreContext_RegisterForEpicPurchasingDisplay final
{
public:
	TDelegate<void(class UWidget* WebWidget, const class FString& OfferId)> DisplayCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             DismissCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_RegisterForEpicPurchasingDisplay) == 0x000004, "Wrong alignment on StoreContext_RegisterForEpicPurchasingDisplay");
static_assert(sizeof(StoreContext_RegisterForEpicPurchasingDisplay) == 0x000020, "Wrong size on StoreContext_RegisterForEpicPurchasingDisplay");
static_assert(offsetof(StoreContext_RegisterForEpicPurchasingDisplay, DisplayCallback) == 0x000000, "Member 'StoreContext_RegisterForEpicPurchasingDisplay::DisplayCallback' has a wrong offset!");
static_assert(offsetof(StoreContext_RegisterForEpicPurchasingDisplay, DismissCallback) == 0x000010, "Member 'StoreContext_RegisterForEpicPurchasingDisplay::DismissCallback' has a wrong offset!");

// Function BlueprintContext.StoreContext.ReportNoOffersAvailable
// 0x0001 (0x0001 - 0x0000)
struct StoreContext_ReportNoOffersAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_ReportNoOffersAvailable) == 0x000001, "Wrong alignment on StoreContext_ReportNoOffersAvailable");
static_assert(sizeof(StoreContext_ReportNoOffersAvailable) == 0x000001, "Wrong size on StoreContext_ReportNoOffersAvailable");
static_assert(offsetof(StoreContext_ReportNoOffersAvailable, ReturnValue) == 0x000000, "Member 'StoreContext_ReportNoOffersAvailable::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.ShowPlatformStore
// 0x0020 (0x0020 - 0x0000)
struct StoreContext_ShowPlatformStore final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bPurchased)>              OnClosedDelegate;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_ShowPlatformStore) == 0x000008, "Wrong alignment on StoreContext_ShowPlatformStore");
static_assert(sizeof(StoreContext_ShowPlatformStore) == 0x000020, "Wrong size on StoreContext_ShowPlatformStore");
static_assert(offsetof(StoreContext_ShowPlatformStore, Category) == 0x000000, "Member 'StoreContext_ShowPlatformStore::Category' has a wrong offset!");
static_assert(offsetof(StoreContext_ShowPlatformStore, OnClosedDelegate) == 0x000010, "Member 'StoreContext_ShowPlatformStore::OnClosedDelegate' has a wrong offset!");

// Function BlueprintContext.StoreContext.ToggleCurrencyUpdate
// 0x0001 (0x0001 - 0x0000)
struct StoreContext_ToggleCurrencyUpdate final
{
public:
	bool                                          bBroadcastCurrencyChange;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_ToggleCurrencyUpdate) == 0x000001, "Wrong alignment on StoreContext_ToggleCurrencyUpdate");
static_assert(sizeof(StoreContext_ToggleCurrencyUpdate) == 0x000001, "Wrong size on StoreContext_ToggleCurrencyUpdate");
static_assert(offsetof(StoreContext_ToggleCurrencyUpdate, bBroadcastCurrencyChange) == 0x000000, "Member 'StoreContext_ToggleCurrencyUpdate::bBroadcastCurrencyChange' has a wrong offset!");

// Function BlueprintContext.StoreContext.BP_GetBannerOffer
// 0x0140 (0x0140 - 0x0000)
struct StoreContext_BP_GetBannerOffer final
{
public:
	class UOrionMcpBannerItemDefinition*          Banner;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreOfferBP                          BannerOffer;                                       // 0x0008(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0138(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_BP_GetBannerOffer) == 0x000008, "Wrong alignment on StoreContext_BP_GetBannerOffer");
static_assert(sizeof(StoreContext_BP_GetBannerOffer) == 0x000140, "Wrong size on StoreContext_BP_GetBannerOffer");
static_assert(offsetof(StoreContext_BP_GetBannerOffer, Banner) == 0x000000, "Member 'StoreContext_BP_GetBannerOffer::Banner' has a wrong offset!");
static_assert(offsetof(StoreContext_BP_GetBannerOffer, BannerOffer) == 0x000008, "Member 'StoreContext_BP_GetBannerOffer::BannerOffer' has a wrong offset!");
static_assert(offsetof(StoreContext_BP_GetBannerOffer, ReturnValue) == 0x000138, "Member 'StoreContext_BP_GetBannerOffer::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.BP_GetSkinOffer
// 0x0140 (0x0140 - 0x0000)
struct StoreContext_BP_GetSkinOffer final
{
public:
	class UOrionSkinItemDefinition*               Skin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreOfferBP                          SkinOffer;                                         // 0x0008(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0138(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_BP_GetSkinOffer) == 0x000008, "Wrong alignment on StoreContext_BP_GetSkinOffer");
static_assert(sizeof(StoreContext_BP_GetSkinOffer) == 0x000140, "Wrong size on StoreContext_BP_GetSkinOffer");
static_assert(offsetof(StoreContext_BP_GetSkinOffer, Skin) == 0x000000, "Member 'StoreContext_BP_GetSkinOffer::Skin' has a wrong offset!");
static_assert(offsetof(StoreContext_BP_GetSkinOffer, SkinOffer) == 0x000008, "Member 'StoreContext_BP_GetSkinOffer::SkinOffer' has a wrong offset!");
static_assert(offsetof(StoreContext_BP_GetSkinOffer, ReturnValue) == 0x000138, "Member 'StoreContext_BP_GetSkinOffer::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.CanAfford
// 0x0070 (0x0070 - 0x0000)
struct StoreContext_CanAfford final
{
public:
	struct FOrionStorePrice                       Price;                                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_CanAfford) == 0x000008, "Wrong alignment on StoreContext_CanAfford");
static_assert(sizeof(StoreContext_CanAfford) == 0x000070, "Wrong size on StoreContext_CanAfford");
static_assert(offsetof(StoreContext_CanAfford, Price) == 0x000000, "Member 'StoreContext_CanAfford::Price' has a wrong offset!");
static_assert(offsetof(StoreContext_CanAfford, Quantity) == 0x000068, "Member 'StoreContext_CanAfford::Quantity' has a wrong offset!");
static_assert(offsetof(StoreContext_CanAfford, ReturnValue) == 0x00006C, "Member 'StoreContext_CanAfford::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetBannerOffers
// 0x0010 (0x0010 - 0x0000)
struct StoreContext_GetBannerOffers final
{
public:
	TArray<struct FStoreOfferBP>                  BannerOffers;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_GetBannerOffers) == 0x000008, "Wrong alignment on StoreContext_GetBannerOffers");
static_assert(sizeof(StoreContext_GetBannerOffers) == 0x000010, "Wrong size on StoreContext_GetBannerOffers");
static_assert(offsetof(StoreContext_GetBannerOffers, BannerOffers) == 0x000000, "Member 'StoreContext_GetBannerOffers::BannerOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetBoostOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetBoostOffers final
{
public:
	TArray<struct FStoreOfferBP>                  BoostOffers;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetBoostOffers) == 0x000008, "Wrong alignment on StoreContext_GetBoostOffers");
static_assert(sizeof(StoreContext_GetBoostOffers) == 0x000018, "Wrong size on StoreContext_GetBoostOffers");
static_assert(offsetof(StoreContext_GetBoostOffers, BoostOffers) == 0x000000, "Member 'StoreContext_GetBoostOffers::BoostOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetBoostOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetBoostOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetBundleByTag
// 0x0148 (0x0148 - 0x0000)
struct StoreContext_GetBundleByTag final
{
public:
	class FString                                 BundleTag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreOfferBP                          StoreOffer;                                        // 0x0010(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetBundleByTag) == 0x000008, "Wrong alignment on StoreContext_GetBundleByTag");
static_assert(sizeof(StoreContext_GetBundleByTag) == 0x000148, "Wrong size on StoreContext_GetBundleByTag");
static_assert(offsetof(StoreContext_GetBundleByTag, BundleTag) == 0x000000, "Member 'StoreContext_GetBundleByTag::BundleTag' has a wrong offset!");
static_assert(offsetof(StoreContext_GetBundleByTag, StoreOffer) == 0x000010, "Member 'StoreContext_GetBundleByTag::StoreOffer' has a wrong offset!");
static_assert(offsetof(StoreContext_GetBundleByTag, ReturnValue) == 0x000140, "Member 'StoreContext_GetBundleByTag::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetBundleForHero
// 0x0150 (0x0150 - 0x0000)
struct StoreContext_GetBundleForHero final
{
public:
	const class UOrionHeroData*                   Hero;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BundleTag;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreOfferBP                          StoreOffer;                                        // 0x0018(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0148(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetBundleForHero) == 0x000008, "Wrong alignment on StoreContext_GetBundleForHero");
static_assert(sizeof(StoreContext_GetBundleForHero) == 0x000150, "Wrong size on StoreContext_GetBundleForHero");
static_assert(offsetof(StoreContext_GetBundleForHero, Hero) == 0x000000, "Member 'StoreContext_GetBundleForHero::Hero' has a wrong offset!");
static_assert(offsetof(StoreContext_GetBundleForHero, BundleTag) == 0x000008, "Member 'StoreContext_GetBundleForHero::BundleTag' has a wrong offset!");
static_assert(offsetof(StoreContext_GetBundleForHero, StoreOffer) == 0x000018, "Member 'StoreContext_GetBundleForHero::StoreOffer' has a wrong offset!");
static_assert(offsetof(StoreContext_GetBundleForHero, ReturnValue) == 0x000148, "Member 'StoreContext_GetBundleForHero::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetBundleOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetBundleOffers final
{
public:
	TArray<struct FStoreOfferBP>                  BundleOffers;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetBundleOffers) == 0x000008, "Wrong alignment on StoreContext_GetBundleOffers");
static_assert(sizeof(StoreContext_GetBundleOffers) == 0x000018, "Wrong size on StoreContext_GetBundleOffers");
static_assert(offsetof(StoreContext_GetBundleOffers, BundleOffers) == 0x000000, "Member 'StoreContext_GetBundleOffers::BundleOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetBundleOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetBundleOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetCardpackOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetCardpackOffers final
{
public:
	TArray<struct FStoreOfferBP>                  CardpackOffers;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetCardpackOffers) == 0x000008, "Wrong alignment on StoreContext_GetCardpackOffers");
static_assert(sizeof(StoreContext_GetCardpackOffers) == 0x000018, "Wrong size on StoreContext_GetCardpackOffers");
static_assert(offsetof(StoreContext_GetCardpackOffers, CardpackOffers) == 0x000000, "Member 'StoreContext_GetCardpackOffers::CardpackOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetCardpackOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetCardpackOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetCrateOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetCrateOffers final
{
public:
	TArray<struct FStoreOfferBP>                  CrateOffers;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetCrateOffers) == 0x000008, "Wrong alignment on StoreContext_GetCrateOffers");
static_assert(sizeof(StoreContext_GetCrateOffers) == 0x000018, "Wrong size on StoreContext_GetCrateOffers");
static_assert(offsetof(StoreContext_GetCrateOffers, CrateOffers) == 0x000000, "Member 'StoreContext_GetCrateOffers::CrateOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetCrateOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetCrateOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetCurrencyBalance
// 0x0008 (0x0008 - 0x0000)
struct StoreContext_GetCurrencyBalance final
{
public:
	EOrionCurrencyType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_GetCurrencyBalance) == 0x000004, "Wrong alignment on StoreContext_GetCurrencyBalance");
static_assert(sizeof(StoreContext_GetCurrencyBalance) == 0x000008, "Wrong size on StoreContext_GetCurrencyBalance");
static_assert(offsetof(StoreContext_GetCurrencyBalance, Type) == 0x000000, "Member 'StoreContext_GetCurrencyBalance::Type' has a wrong offset!");
static_assert(offsetof(StoreContext_GetCurrencyBalance, ReturnValue) == 0x000004, "Member 'StoreContext_GetCurrencyBalance::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetDailyRewardInfo
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetDailyRewardInfo final
{
public:
	TArray<struct FOrionDailyRewardInfo>          UpcomingRewards;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetDailyRewardInfo) == 0x000008, "Wrong alignment on StoreContext_GetDailyRewardInfo");
static_assert(sizeof(StoreContext_GetDailyRewardInfo) == 0x000018, "Wrong size on StoreContext_GetDailyRewardInfo");
static_assert(offsetof(StoreContext_GetDailyRewardInfo, UpcomingRewards) == 0x000000, "Member 'StoreContext_GetDailyRewardInfo::UpcomingRewards' has a wrong offset!");
static_assert(offsetof(StoreContext_GetDailyRewardInfo, ReturnValue) == 0x000010, "Member 'StoreContext_GetDailyRewardInfo::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetDeckOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetDeckOffers final
{
public:
	TArray<struct FStoreOfferBP>                  DeckOffers;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetDeckOffers) == 0x000008, "Wrong alignment on StoreContext_GetDeckOffers");
static_assert(sizeof(StoreContext_GetDeckOffers) == 0x000018, "Wrong size on StoreContext_GetDeckOffers");
static_assert(offsetof(StoreContext_GetDeckOffers, DeckOffers) == 0x000000, "Member 'StoreContext_GetDeckOffers::DeckOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetDeckOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetDeckOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetEmoteOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetEmoteOffers final
{
public:
	TArray<struct FStoreOfferBP>                  EmoteOffers;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetEmoteOffers) == 0x000008, "Wrong alignment on StoreContext_GetEmoteOffers");
static_assert(sizeof(StoreContext_GetEmoteOffers) == 0x000018, "Wrong size on StoreContext_GetEmoteOffers");
static_assert(offsetof(StoreContext_GetEmoteOffers, EmoteOffers) == 0x000000, "Member 'StoreContext_GetEmoteOffers::EmoteOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetEmoteOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetEmoteOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetFounderOffers
// 0x0010 (0x0010 - 0x0000)
struct StoreContext_GetFounderOffers final
{
public:
	TArray<struct FStoreOfferBP>                  FounderOffers;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_GetFounderOffers) == 0x000008, "Wrong alignment on StoreContext_GetFounderOffers");
static_assert(sizeof(StoreContext_GetFounderOffers) == 0x000010, "Wrong size on StoreContext_GetFounderOffers");
static_assert(offsetof(StoreContext_GetFounderOffers, FounderOffers) == 0x000000, "Member 'StoreContext_GetFounderOffers::FounderOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetHeroOffer
// 0x0148 (0x0148 - 0x0000)
struct StoreContext_GetHeroOffer final
{
public:
	class FString                                 HeroPersistentName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreOfferBP                          HeroOffer;                                         // 0x0010(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetHeroOffer) == 0x000008, "Wrong alignment on StoreContext_GetHeroOffer");
static_assert(sizeof(StoreContext_GetHeroOffer) == 0x000148, "Wrong size on StoreContext_GetHeroOffer");
static_assert(offsetof(StoreContext_GetHeroOffer, HeroPersistentName) == 0x000000, "Member 'StoreContext_GetHeroOffer::HeroPersistentName' has a wrong offset!");
static_assert(offsetof(StoreContext_GetHeroOffer, HeroOffer) == 0x000010, "Member 'StoreContext_GetHeroOffer::HeroOffer' has a wrong offset!");
static_assert(offsetof(StoreContext_GetHeroOffer, ReturnValue) == 0x000140, "Member 'StoreContext_GetHeroOffer::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetHeroOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetHeroOffers final
{
public:
	TArray<struct FStoreOfferBP>                  HeroOffers;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetHeroOffers) == 0x000008, "Wrong alignment on StoreContext_GetHeroOffers");
static_assert(sizeof(StoreContext_GetHeroOffers) == 0x000018, "Wrong size on StoreContext_GetHeroOffers");
static_assert(offsetof(StoreContext_GetHeroOffers, HeroOffers) == 0x000000, "Member 'StoreContext_GetHeroOffers::HeroOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetHeroOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetHeroOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetMtxCurrency
// 0x0004 (0x0004 - 0x0000)
struct StoreContext_GetMtxCurrency final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_GetMtxCurrency) == 0x000004, "Wrong alignment on StoreContext_GetMtxCurrency");
static_assert(sizeof(StoreContext_GetMtxCurrency) == 0x000004, "Wrong size on StoreContext_GetMtxCurrency");
static_assert(offsetof(StoreContext_GetMtxCurrency, ReturnValue) == 0x000000, "Member 'StoreContext_GetMtxCurrency::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetMtxOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetMtxOffers final
{
public:
	TArray<struct FStoreOfferBP>                  MtxOffers;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetMtxOffers) == 0x000008, "Wrong alignment on StoreContext_GetMtxOffers");
static_assert(sizeof(StoreContext_GetMtxOffers) == 0x000018, "Wrong size on StoreContext_GetMtxOffers");
static_assert(offsetof(StoreContext_GetMtxOffers, MtxOffers) == 0x000000, "Member 'StoreContext_GetMtxOffers::MtxOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetMtxOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetMtxOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetOffer
// 0x0140 (0x0140 - 0x0000)
struct StoreContext_GetOffer final
{
public:
	const class UOrionMcpItemDefinition*          ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStoreOfferBP                          StoreOffer;                                        // 0x0008(0x0130)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0138(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetOffer) == 0x000008, "Wrong alignment on StoreContext_GetOffer");
static_assert(sizeof(StoreContext_GetOffer) == 0x000140, "Wrong size on StoreContext_GetOffer");
static_assert(offsetof(StoreContext_GetOffer, ItemDefinition) == 0x000000, "Member 'StoreContext_GetOffer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(StoreContext_GetOffer, StoreOffer) == 0x000008, "Member 'StoreContext_GetOffer::StoreOffer' has a wrong offset!");
static_assert(offsetof(StoreContext_GetOffer, ReturnValue) == 0x000138, "Member 'StoreContext_GetOffer::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetSkinOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetSkinOffers final
{
public:
	TArray<struct FStoreOfferBP>                  SkinOffers;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetSkinOffers) == 0x000008, "Wrong alignment on StoreContext_GetSkinOffers");
static_assert(sizeof(StoreContext_GetSkinOffers) == 0x000018, "Wrong size on StoreContext_GetSkinOffers");
static_assert(offsetof(StoreContext_GetSkinOffers, SkinOffers) == 0x000000, "Member 'StoreContext_GetSkinOffers::SkinOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetSkinOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetSkinOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetTimeCurrency
// 0x0004 (0x0004 - 0x0000)
struct StoreContext_GetTimeCurrency final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_GetTimeCurrency) == 0x000004, "Wrong alignment on StoreContext_GetTimeCurrency");
static_assert(sizeof(StoreContext_GetTimeCurrency) == 0x000004, "Wrong size on StoreContext_GetTimeCurrency");
static_assert(offsetof(StoreContext_GetTimeCurrency, ReturnValue) == 0x000000, "Member 'StoreContext_GetTimeCurrency::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetTimeUntilNextDailyReward
// 0x0008 (0x0008 - 0x0000)
struct StoreContext_GetTimeUntilNextDailyReward final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_GetTimeUntilNextDailyReward) == 0x000008, "Wrong alignment on StoreContext_GetTimeUntilNextDailyReward");
static_assert(sizeof(StoreContext_GetTimeUntilNextDailyReward) == 0x000008, "Wrong size on StoreContext_GetTimeUntilNextDailyReward");
static_assert(offsetof(StoreContext_GetTimeUntilNextDailyReward, ReturnValue) == 0x000000, "Member 'StoreContext_GetTimeUntilNextDailyReward::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.GetVaultKeyOffers
// 0x0018 (0x0018 - 0x0000)
struct StoreContext_GetVaultKeyOffers final
{
public:
	TArray<struct FStoreOfferBP>                  VaultKeyOffers;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreContext_GetVaultKeyOffers) == 0x000008, "Wrong alignment on StoreContext_GetVaultKeyOffers");
static_assert(sizeof(StoreContext_GetVaultKeyOffers) == 0x000018, "Wrong size on StoreContext_GetVaultKeyOffers");
static_assert(offsetof(StoreContext_GetVaultKeyOffers, VaultKeyOffers) == 0x000000, "Member 'StoreContext_GetVaultKeyOffers::VaultKeyOffers' has a wrong offset!");
static_assert(offsetof(StoreContext_GetVaultKeyOffers, bShowIneligibleOffers) == 0x000010, "Member 'StoreContext_GetVaultKeyOffers::bShowIneligibleOffers' has a wrong offset!");

// Function BlueprintContext.StoreContext.IsCatalogDownloadInProgress
// 0x0001 (0x0001 - 0x0000)
struct StoreContext_IsCatalogDownloadInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_IsCatalogDownloadInProgress) == 0x000001, "Wrong alignment on StoreContext_IsCatalogDownloadInProgress");
static_assert(sizeof(StoreContext_IsCatalogDownloadInProgress) == 0x000001, "Wrong size on StoreContext_IsCatalogDownloadInProgress");
static_assert(offsetof(StoreContext_IsCatalogDownloadInProgress, ReturnValue) == 0x000000, "Member 'StoreContext_IsCatalogDownloadInProgress::ReturnValue' has a wrong offset!");

// Function BlueprintContext.StoreContext.IsDailyRewardAvailable
// 0x0001 (0x0001 - 0x0000)
struct StoreContext_IsDailyRewardAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreContext_IsDailyRewardAvailable) == 0x000001, "Wrong alignment on StoreContext_IsDailyRewardAvailable");
static_assert(sizeof(StoreContext_IsDailyRewardAvailable) == 0x000001, "Wrong size on StoreContext_IsDailyRewardAvailable");
static_assert(offsetof(StoreContext_IsDailyRewardAvailable, ReturnValue) == 0x000000, "Member 'StoreContext_IsDailyRewardAvailable::ReturnValue' has a wrong offset!");

// Function BlueprintContext.OrionAsyncAction_RefreshCatalog.RefreshCatalog
// 0x0010 (0x0010 - 0x0000)
struct OrionAsyncAction_RefreshCatalog_RefreshCatalog final
{
public:
	class UStoreContext*                          InStoreContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionAsyncAction_RefreshCatalog*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAsyncAction_RefreshCatalog_RefreshCatalog) == 0x000008, "Wrong alignment on OrionAsyncAction_RefreshCatalog_RefreshCatalog");
static_assert(sizeof(OrionAsyncAction_RefreshCatalog_RefreshCatalog) == 0x000010, "Wrong size on OrionAsyncAction_RefreshCatalog_RefreshCatalog");
static_assert(offsetof(OrionAsyncAction_RefreshCatalog_RefreshCatalog, InStoreContext) == 0x000000, "Member 'OrionAsyncAction_RefreshCatalog_RefreshCatalog::InStoreContext' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_RefreshCatalog_RefreshCatalog, ReturnValue) == 0x000008, "Member 'OrionAsyncAction_RefreshCatalog_RefreshCatalog::ReturnValue' has a wrong offset!");

// DelegateFunction BlueprintContext.TencentContext.OnSensitivityBrowserWidgetDisplay__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature final
{
public:
	class UWidget*                                WebWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature) == 0x000008, "Wrong alignment on TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature");
static_assert(sizeof(TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature) == 0x000038, "Wrong size on TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature");
static_assert(offsetof(TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature, WebWidget) == 0x000000, "Member 'TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature::WebWidget' has a wrong offset!");
static_assert(offsetof(TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature, Title) == 0x000008, "Member 'TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature::Title' has a wrong offset!");
static_assert(offsetof(TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature, Text) == 0x000020, "Member 'TencentContext_OnSensitivityBrowserWidgetDisplay__DelegateSignature::Text' has a wrong offset!");

// Function BlueprintContext.TencentContext.OpenSensitivitySettingsBrowser
// 0x0001 (0x0001 - 0x0000)
struct TencentContext_OpenSensitivitySettingsBrowser final
{
public:
	ETencentSensitivityType                       SensitivityType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TencentContext_OpenSensitivitySettingsBrowser) == 0x000001, "Wrong alignment on TencentContext_OpenSensitivitySettingsBrowser");
static_assert(sizeof(TencentContext_OpenSensitivitySettingsBrowser) == 0x000001, "Wrong size on TencentContext_OpenSensitivitySettingsBrowser");
static_assert(offsetof(TencentContext_OpenSensitivitySettingsBrowser, SensitivityType) == 0x000000, "Member 'TencentContext_OpenSensitivitySettingsBrowser::SensitivityType' has a wrong offset!");

// Function BlueprintContext.TencentContext.RegisterForSensitivityBrowserDisplay
// 0x0010 (0x0010 - 0x0000)
struct TencentContext_RegisterForSensitivityBrowserDisplay final
{
public:
	TDelegate<void(class UWidget* WebWidget, class FText Title, class FText Text)> DisplayCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TencentContext_RegisterForSensitivityBrowserDisplay) == 0x000004, "Wrong alignment on TencentContext_RegisterForSensitivityBrowserDisplay");
static_assert(sizeof(TencentContext_RegisterForSensitivityBrowserDisplay) == 0x000010, "Wrong size on TencentContext_RegisterForSensitivityBrowserDisplay");
static_assert(offsetof(TencentContext_RegisterForSensitivityBrowserDisplay, DisplayCallback) == 0x000000, "Member 'TencentContext_RegisterForSensitivityBrowserDisplay::DisplayCallback' has a wrong offset!");

// Function BlueprintContext.TooltipContext.CalculateHeroTooltip
// 0x0018 (0x0018 - 0x0000)
struct TooltipContext_CalculateHeroTooltip final
{
public:
	class UOrionHeroData*                         InHeroData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionAbilityBinding                          InAbilityKeyBind;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InAbilityLevel;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAbilitySystemComponent*          ASC;                                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TooltipContext_CalculateHeroTooltip) == 0x000008, "Wrong alignment on TooltipContext_CalculateHeroTooltip");
static_assert(sizeof(TooltipContext_CalculateHeroTooltip) == 0x000018, "Wrong size on TooltipContext_CalculateHeroTooltip");
static_assert(offsetof(TooltipContext_CalculateHeroTooltip, InHeroData) == 0x000000, "Member 'TooltipContext_CalculateHeroTooltip::InHeroData' has a wrong offset!");
static_assert(offsetof(TooltipContext_CalculateHeroTooltip, InAbilityKeyBind) == 0x000008, "Member 'TooltipContext_CalculateHeroTooltip::InAbilityKeyBind' has a wrong offset!");
static_assert(offsetof(TooltipContext_CalculateHeroTooltip, InAbilityLevel) == 0x00000C, "Member 'TooltipContext_CalculateHeroTooltip::InAbilityLevel' has a wrong offset!");
static_assert(offsetof(TooltipContext_CalculateHeroTooltip, ASC) == 0x000010, "Member 'TooltipContext_CalculateHeroTooltip::ASC' has a wrong offset!");

// Function BlueprintContext.TooltipContext.GetField
// 0x0020 (0x0020 - 0x0000)
struct TooltipContext_GetField final
{
public:
	class FName                                   InFieldName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FieldText;                                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TooltipContext_GetField) == 0x000008, "Wrong alignment on TooltipContext_GetField");
static_assert(sizeof(TooltipContext_GetField) == 0x000020, "Wrong size on TooltipContext_GetField");
static_assert(offsetof(TooltipContext_GetField, InFieldName) == 0x000000, "Member 'TooltipContext_GetField::InFieldName' has a wrong offset!");
static_assert(offsetof(TooltipContext_GetField, FieldText) == 0x000008, "Member 'TooltipContext_GetField::FieldText' has a wrong offset!");

// Function BlueprintContext.UserFeedbackContext.SendFeedback
// 0x0018 (0x0018 - 0x0000)
struct UserFeedbackContext_SendFeedback final
{
public:
	class FText                                   Body;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserFeedbackContext_SendFeedback) == 0x000008, "Wrong alignment on UserFeedbackContext_SendFeedback");
static_assert(sizeof(UserFeedbackContext_SendFeedback) == 0x000018, "Wrong size on UserFeedbackContext_SendFeedback");
static_assert(offsetof(UserFeedbackContext_SendFeedback, Body) == 0x000000, "Member 'UserFeedbackContext_SendFeedback::Body' has a wrong offset!");

// Function BlueprintContext.UserFeedbackContext.TakeScreenshotAndInitializeFeedback
// 0x0001 (0x0001 - 0x0000)
struct UserFeedbackContext_TakeScreenshotAndInitializeFeedback final
{
public:
	EFeedbackType                                 FeedbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserFeedbackContext_TakeScreenshotAndInitializeFeedback) == 0x000001, "Wrong alignment on UserFeedbackContext_TakeScreenshotAndInitializeFeedback");
static_assert(sizeof(UserFeedbackContext_TakeScreenshotAndInitializeFeedback) == 0x000001, "Wrong size on UserFeedbackContext_TakeScreenshotAndInitializeFeedback");
static_assert(offsetof(UserFeedbackContext_TakeScreenshotAndInitializeFeedback, FeedbackType) == 0x000000, "Member 'UserFeedbackContext_TakeScreenshotAndInitializeFeedback::FeedbackType' has a wrong offset!");

// Function BlueprintContext.VideoContext.IsFullscreen
// 0x0001 (0x0001 - 0x0000)
struct VideoContext_IsFullscreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoContext_IsFullscreen) == 0x000001, "Wrong alignment on VideoContext_IsFullscreen");
static_assert(sizeof(VideoContext_IsFullscreen) == 0x000001, "Wrong size on VideoContext_IsFullscreen");
static_assert(offsetof(VideoContext_IsFullscreen, ReturnValue) == 0x000000, "Member 'VideoContext_IsFullscreen::ReturnValue' has a wrong offset!");

}

