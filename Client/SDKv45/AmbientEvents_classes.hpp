#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientEvents

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "AmbientEvents_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class AmbientEvents.AmbientEventBase
// 0x00D8 (0x0100 - 0x0028)
class UAmbientEventBase : public UObject
{
public:
	uint8                                         Pad_28[0x78];                                      // 0x0028(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OptionalId;                                        // 0x00A0(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        Cue;                                               // 0x00A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredSourceTags;                                // 0x00B0(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTargetTags;                                // 0x00D0(0x0020)(Edit, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventTriggerType;                                  // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmbientEventPriority                         Priority;                                          // 0x00F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmbientEventChance                           Chance;                                            // 0x00F2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmbientEventCooldown                         EventCooldown;                                     // 0x00F3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmbientEventLifetime                         LifeTime;                                          // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmbientEventProximityFilter                  WitnessDistance;                                   // 0x00F5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpirationTime;                                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientEventBase">();
	}
	static class UAmbientEventBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientEventBase>();
	}
};
static_assert(alignof(UAmbientEventBase) == 0x000008, "Wrong alignment on UAmbientEventBase");
static_assert(sizeof(UAmbientEventBase) == 0x000100, "Wrong size on UAmbientEventBase");
static_assert(offsetof(UAmbientEventBase, OptionalId) == 0x0000A0, "Member 'UAmbientEventBase::OptionalId' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, Cue) == 0x0000A8, "Member 'UAmbientEventBase::Cue' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, RequiredSourceTags) == 0x0000B0, "Member 'UAmbientEventBase::RequiredSourceTags' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, RequiredTargetTags) == 0x0000D0, "Member 'UAmbientEventBase::RequiredTargetTags' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, EventTriggerType) == 0x0000F0, "Member 'UAmbientEventBase::EventTriggerType' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, Priority) == 0x0000F1, "Member 'UAmbientEventBase::Priority' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, Chance) == 0x0000F2, "Member 'UAmbientEventBase::Chance' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, EventCooldown) == 0x0000F3, "Member 'UAmbientEventBase::EventCooldown' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, LifeTime) == 0x0000F4, "Member 'UAmbientEventBase::LifeTime' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, WitnessDistance) == 0x0000F5, "Member 'UAmbientEventBase::WitnessDistance' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, ExpirationTime) == 0x0000F8, "Member 'UAmbientEventBase::ExpirationTime' has a wrong offset!");
static_assert(offsetof(UAmbientEventBase, IsNew) == 0x0000FC, "Member 'UAmbientEventBase::IsNew' has a wrong offset!");

// Class AmbientEvents.AmbientEventComponent
// 0x0018 (0x0108 - 0x00F0)
class UAmbientEventComponent : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmbientEventContainer*                 Events;                                            // 0x0100(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientEventComponent">();
	}
	static class UAmbientEventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientEventComponent>();
	}
};
static_assert(alignof(UAmbientEventComponent) == 0x000008, "Wrong alignment on UAmbientEventComponent");
static_assert(sizeof(UAmbientEventComponent) == 0x000108, "Wrong size on UAmbientEventComponent");
static_assert(offsetof(UAmbientEventComponent, Events) == 0x000100, "Member 'UAmbientEventComponent::Events' has a wrong offset!");

// Class AmbientEvents.DialogueSpeakerInterface
// 0x0000 (0x0028 - 0x0028)
class IDialogueSpeakerInterface final : public IInterface
{
public:
	class UAudioComponent* GetAudioComponentForDialogue() const;
	class UDialogueVoice* GetVoice() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueSpeakerInterface">();
	}
	static class IDialogueSpeakerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDialogueSpeakerInterface>();
	}
};
static_assert(alignof(IDialogueSpeakerInterface) == 0x000008, "Wrong alignment on IDialogueSpeakerInterface");
static_assert(sizeof(IDialogueSpeakerInterface) == 0x000028, "Wrong size on IDialogueSpeakerInterface");

// Class AmbientEvents.AmbientEventScheduler
// 0x00B0 (0x03C8 - 0x0318)
class AAmbientEventScheduler : public AActor
{
public:
	float                                         GlobalCooldown;                                    // 0x0318(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAmbientEventPriority>                 PriorityLayers;                                    // 0x0320(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmbientEventBase*                      CurrentEvent;                                      // 0x0338(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x88];                                     // 0x0340(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientEventScheduler">();
	}
	static class AAmbientEventScheduler* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientEventScheduler>();
	}
};
static_assert(alignof(AAmbientEventScheduler) == 0x000008, "Wrong alignment on AAmbientEventScheduler");
static_assert(sizeof(AAmbientEventScheduler) == 0x0003C8, "Wrong size on AAmbientEventScheduler");
static_assert(offsetof(AAmbientEventScheduler, GlobalCooldown) == 0x000318, "Member 'AAmbientEventScheduler::GlobalCooldown' has a wrong offset!");
static_assert(offsetof(AAmbientEventScheduler, PriorityLayers) == 0x000320, "Member 'AAmbientEventScheduler::PriorityLayers' has a wrong offset!");
static_assert(offsetof(AAmbientEventScheduler, CurrentEvent) == 0x000338, "Member 'AAmbientEventScheduler::CurrentEvent' has a wrong offset!");

// Class AmbientEvents.AmbientDialogueEvent
// 0x0078 (0x0178 - 0x0100)
#pragma pack(push, 0x1)
class alignas(0x08) UAmbientDialogueEvent : public UAmbientEventBase
{
public:
	class AActor*                                 Speaker;                                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDialogueWave>           Audio;                                             // 0x0110(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0138(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayCueTag>                CuesOnComplete;                                    // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientDialogueEvent">();
	}
	static class UAmbientDialogueEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientDialogueEvent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAmbientDialogueEvent) == 0x000008, "Wrong alignment on UAmbientDialogueEvent");
static_assert(sizeof(UAmbientDialogueEvent) == 0x000178, "Wrong size on UAmbientDialogueEvent");
static_assert(offsetof(UAmbientDialogueEvent, Speaker) == 0x000100, "Member 'UAmbientDialogueEvent::Speaker' has a wrong offset!");
static_assert(offsetof(UAmbientDialogueEvent, Target) == 0x000108, "Member 'UAmbientDialogueEvent::Target' has a wrong offset!");
static_assert(offsetof(UAmbientDialogueEvent, Audio) == 0x000110, "Member 'UAmbientDialogueEvent::Audio' has a wrong offset!");
static_assert(offsetof(UAmbientDialogueEvent, SoundCue) == 0x000138, "Member 'UAmbientDialogueEvent::SoundCue' has a wrong offset!");
static_assert(offsetof(UAmbientDialogueEvent, CuesOnComplete) == 0x000160, "Member 'UAmbientDialogueEvent::CuesOnComplete' has a wrong offset!");

// Class AmbientEvents.AmbientEventContainer
// 0x0010 (0x0040 - 0x0030)
class UAmbientEventContainer final : public UDataAsset
{
public:
	TArray<class UAmbientEventBase*>              Events;                                            // 0x0030(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientEventContainer">();
	}
	static class UAmbientEventContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientEventContainer>();
	}
};
static_assert(alignof(UAmbientEventContainer) == 0x000008, "Wrong alignment on UAmbientEventContainer");
static_assert(sizeof(UAmbientEventContainer) == 0x000040, "Wrong size on UAmbientEventContainer");
static_assert(offsetof(UAmbientEventContainer, Events) == 0x000030, "Member 'UAmbientEventContainer::Events' has a wrong offset!");

// Class AmbientEvents.AmbientEventSettings
// 0x00A0 (0x00C8 - 0x0028)
class UAmbientEventSettings final : public UObject
{
public:
	struct FScalableFloat                         EventWitnessDistances;                             // 0x0028(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         EventChances;                                      // 0x0050(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         EventCooldowns;                                    // 0x0078(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         EventLifetimes;                                    // 0x00A0(0x0028)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientEventSettings">();
	}
	static class UAmbientEventSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientEventSettings>();
	}
};
static_assert(alignof(UAmbientEventSettings) == 0x000008, "Wrong alignment on UAmbientEventSettings");
static_assert(sizeof(UAmbientEventSettings) == 0x0000C8, "Wrong size on UAmbientEventSettings");
static_assert(offsetof(UAmbientEventSettings, EventWitnessDistances) == 0x000028, "Member 'UAmbientEventSettings::EventWitnessDistances' has a wrong offset!");
static_assert(offsetof(UAmbientEventSettings, EventChances) == 0x000050, "Member 'UAmbientEventSettings::EventChances' has a wrong offset!");
static_assert(offsetof(UAmbientEventSettings, EventCooldowns) == 0x000078, "Member 'UAmbientEventSettings::EventCooldowns' has a wrong offset!");
static_assert(offsetof(UAmbientEventSettings, EventLifetimes) == 0x0000A0, "Member 'UAmbientEventSettings::EventLifetimes' has a wrong offset!");

}

