#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueprintContext

#include "Basic.hpp"

#include "GameSubCatalog_structs.hpp"
#include "Slate_structs.hpp"
#include "OrionGame_structs.hpp"


namespace SDK
{

// Enum BlueprintContext.EKeyBindingType
// NumValues: 0x0004
enum class EKeyBindingType : uint8
{
	Action                                   = 0,
	PositiveAxis                             = 1,
	NegativeAxis                             = 2,
	EKeyBindingType_MAX                      = 3,
};

// Enum BlueprintContext.EPingQuality
// NumValues: 0x0006
enum class EPingQuality : uint8
{
	Invalid                                  = 0,
	Excellent                                = 1,
	Good                                     = 2,
	Mediocre                                 = 3,
	Bad                                      = 4,
	EPingQuality_MAX                         = 5,
};

// Enum BlueprintContext.EOrionFriendshipStatus
// NumValues: 0x0005
enum class EOrionFriendshipStatus : uint8
{
	None                                     = 0,
	Friends                                  = 1,
	RequestReceived                          = 2,
	RequestSent                              = 3,
	EOrionFriendshipStatus_MAX               = 4,
};

// Enum BlueprintContext.ETencentSensitivityType
// NumValues: 0x0004
enum class ETencentSensitivityType : uint8
{
	Invalid                                  = 0,
	PropertyLock                             = 1,
	SecondaryPassword                        = 2,
	ETencentSensitivityType_MAX              = 3,
};

// Enum BlueprintContext.ETestResult
// NumValues: 0x0004
enum class ETestResult : uint8
{
	Unknown                                  = 0,
	Failed                                   = 1,
	Succeeded                                = 2,
	ETestResult_MAX                          = 3,
};

// Enum BlueprintContext.EPartyMemberState
// NumValues: 0x0003
enum class EPartyMemberState : uint8
{
	Solo                                     = 0,
	InParty                                  = 1,
	EPartyMemberState_MAX                    = 2,
};

// Enum BlueprintContext.EInstallStatus
// NumValues: 0x0005
enum class EInstallStatus : uint8
{
	NotInstalled                             = 0,
	Installing                               = 1,
	OnDisc                                   = 2,
	OnHardDrive                              = 3,
	EInstallStatus_MAX                       = 4,
};

// Enum BlueprintContext.EInstallPriority
// NumValues: 0x0004
enum class EInstallPriority : uint8
{
	Immediate                                = 0,
	High                                     = 1,
	Low                                      = 2,
	EInstallPriority_MAX                     = 3,
};

// Enum BlueprintContext.EInstallSpeed
// NumValues: 0x0004
enum class EInstallSpeed : uint8
{
	Paused                                   = 0,
	Slow                                     = 1,
	Fast                                     = 2,
	EInstallSpeed_MAX                        = 3,
};

// Enum BlueprintContext.EHeroPickStatus
// NumValues: 0x0005
enum class EHeroPickStatus : uint8
{
	Available                                = 0,
	OtherPick                                = 1,
	Banned                                   = 2,
	NotOwned                                 = 3,
	EHeroPickStatus_MAX                      = 4,
};

// Enum BlueprintContext.EOrionPartyTransition
// NumValues: 0x0004
enum class EOrionPartyTransition : uint8
{
	Idle                                     = 0,
	Joining                                  = 1,
	Leaving                                  = 2,
	Max                                      = 3,
};

// Enum BlueprintContext.EFeedbackType
// NumValues: 0x0003
enum class EFeedbackType : uint8
{
	Bug                                      = 0,
	Player                                   = 1,
	EFeedbackType_MAX                        = 2,
};

// ScriptStruct BlueprintContext.BoundKeys
// 0x0040 (0x0040 - 0x0000)
struct FBoundKeys final
{
public:
	struct FInputChord                            Primary;                                           // 0x0000(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            Secondary;                                         // 0x0020(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoundKeys) == 0x000008, "Wrong alignment on FBoundKeys");
static_assert(sizeof(FBoundKeys) == 0x000040, "Wrong size on FBoundKeys");
static_assert(offsetof(FBoundKeys, Primary) == 0x000000, "Member 'FBoundKeys::Primary' has a wrong offset!");
static_assert(offsetof(FBoundKeys, Secondary) == 0x000020, "Member 'FBoundKeys::Secondary' has a wrong offset!");

// ScriptStruct BlueprintContext.FriendCode
// 0x0020 (0x0020 - 0x0000)
struct FFriendCode final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeType;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCode) == 0x000008, "Wrong alignment on FFriendCode");
static_assert(sizeof(FFriendCode) == 0x000020, "Wrong size on FFriendCode");
static_assert(offsetof(FFriendCode, Code) == 0x000000, "Member 'FFriendCode::Code' has a wrong offset!");
static_assert(offsetof(FFriendCode, CodeType) == 0x000010, "Member 'FFriendCode::CodeType' has a wrong offset!");

// ScriptStruct BlueprintContext.FriendCodeLocString
// 0x0020 (0x0020 - 0x0000)
struct FFriendCodeLocString final
{
public:
	class FString                                 Lang;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCodeLocString) == 0x000008, "Wrong alignment on FFriendCodeLocString");
static_assert(sizeof(FFriendCodeLocString) == 0x000020, "Wrong size on FFriendCodeLocString");
static_assert(offsetof(FFriendCodeLocString, Lang) == 0x000000, "Member 'FFriendCodeLocString::Lang' has a wrong offset!");
static_assert(offsetof(FFriendCodeLocString, Text) == 0x000010, "Member 'FFriendCodeLocString::Text' has a wrong offset!");

// ScriptStruct BlueprintContext.StoreOfferBP
// 0x0130 (0x0130 - 0x0000)
struct FStoreOfferBP final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortDescription;                                  // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ECatalogOfferType                             OfferType;                                         // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityRemaining;                                 // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 LazyDisplayAsset;                                  // 0x0050(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemGrants;                                        // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCatalogDynamicBundle                  DynamicBundleInfo;                                 // 0x0098(0x0030)(NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x68];                                      // 0x00C8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreOfferBP) == 0x000008, "Wrong alignment on FStoreOfferBP");
static_assert(sizeof(FStoreOfferBP) == 0x000130, "Wrong size on FStoreOfferBP");
static_assert(offsetof(FStoreOfferBP, Title) == 0x000000, "Member 'FStoreOfferBP::Title' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, Description) == 0x000018, "Member 'FStoreOfferBP::Description' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, ShortDescription) == 0x000030, "Member 'FStoreOfferBP::ShortDescription' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, OfferType) == 0x000048, "Member 'FStoreOfferBP::OfferType' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, QuantityRemaining) == 0x00004C, "Member 'FStoreOfferBP::QuantityRemaining' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, LazyDisplayAsset) == 0x000050, "Member 'FStoreOfferBP::LazyDisplayAsset' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, OfferId) == 0x000078, "Member 'FStoreOfferBP::OfferId' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, ItemGrants) == 0x000088, "Member 'FStoreOfferBP::ItemGrants' has a wrong offset!");
static_assert(offsetof(FStoreOfferBP, DynamicBundleInfo) == 0x000098, "Member 'FStoreOfferBP::DynamicBundleInfo' has a wrong offset!");

// ScriptStruct BlueprintContext.WebEnvironmentUrl
// 0x0030 (0x0030 - 0x0000)
struct FWebEnvironmentUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUrl;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Environment;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebEnvironmentUrl) == 0x000008, "Wrong alignment on FWebEnvironmentUrl");
static_assert(sizeof(FWebEnvironmentUrl) == 0x000030, "Wrong size on FWebEnvironmentUrl");
static_assert(offsetof(FWebEnvironmentUrl, URL) == 0x000000, "Member 'FWebEnvironmentUrl::URL' has a wrong offset!");
static_assert(offsetof(FWebEnvironmentUrl, RedirectUrl) == 0x000010, "Member 'FWebEnvironmentUrl::RedirectUrl' has a wrong offset!");
static_assert(offsetof(FWebEnvironmentUrl, Environment) == 0x000020, "Member 'FWebEnvironmentUrl::Environment' has a wrong offset!");

// ScriptStruct BlueprintContext.ReticleInfo
// 0x0010 (0x0010 - 0x0000)
struct FReticleInfo final
{
public:
	TWeakObjectPtr<class UOrionAbility>           AssociatedAbility;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOrionUserWidget_Reticle> AssociatedReticle;                                 // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReticleInfo) == 0x000004, "Wrong alignment on FReticleInfo");
static_assert(sizeof(FReticleInfo) == 0x000010, "Wrong size on FReticleInfo");
static_assert(offsetof(FReticleInfo, AssociatedAbility) == 0x000000, "Member 'FReticleInfo::AssociatedAbility' has a wrong offset!");
static_assert(offsetof(FReticleInfo, AssociatedReticle) == 0x000008, "Member 'FReticleInfo::AssociatedReticle' has a wrong offset!");

// ScriptStruct BlueprintContext.OrionStorePrice
// 0x0068 (0x0068 - 0x0000)
struct FOrionStorePrice final
{
public:
	EOrionCurrencyType                            Currency;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumericPrice;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FinalPriceText;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         NumericBasePrice;                                  // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BasePriceText;                                     // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DiscountDescription;                               // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrionStorePrice) == 0x000008, "Wrong alignment on FOrionStorePrice");
static_assert(sizeof(FOrionStorePrice) == 0x000068, "Wrong size on FOrionStorePrice");
static_assert(offsetof(FOrionStorePrice, Currency) == 0x000000, "Member 'FOrionStorePrice::Currency' has a wrong offset!");
static_assert(offsetof(FOrionStorePrice, NumericPrice) == 0x000004, "Member 'FOrionStorePrice::NumericPrice' has a wrong offset!");
static_assert(offsetof(FOrionStorePrice, FinalPriceText) == 0x000008, "Member 'FOrionStorePrice::FinalPriceText' has a wrong offset!");
static_assert(offsetof(FOrionStorePrice, NumericBasePrice) == 0x000020, "Member 'FOrionStorePrice::NumericBasePrice' has a wrong offset!");
static_assert(offsetof(FOrionStorePrice, BasePriceText) == 0x000028, "Member 'FOrionStorePrice::BasePriceText' has a wrong offset!");
static_assert(offsetof(FOrionStorePrice, DiscountDescription) == 0x000040, "Member 'FOrionStorePrice::DiscountDescription' has a wrong offset!");

// ScriptStruct BlueprintContext.BannerItemIdent
// 0x0048 (0x0048 - 0x0000)
struct FBannerItemIdent final
{
public:
	class FString                                 EntryID;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnedAssetID;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Alterations;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExistingAlterations;                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAssetIsOwned;                                     // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetIsAssigned;                                  // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBannerItemIdent) == 0x000008, "Wrong alignment on FBannerItemIdent");
static_assert(sizeof(FBannerItemIdent) == 0x000048, "Wrong size on FBannerItemIdent");
static_assert(offsetof(FBannerItemIdent, EntryID) == 0x000000, "Member 'FBannerItemIdent::EntryID' has a wrong offset!");
static_assert(offsetof(FBannerItemIdent, OwnedAssetID) == 0x000010, "Member 'FBannerItemIdent::OwnedAssetID' has a wrong offset!");
static_assert(offsetof(FBannerItemIdent, Alterations) == 0x000020, "Member 'FBannerItemIdent::Alterations' has a wrong offset!");
static_assert(offsetof(FBannerItemIdent, ExistingAlterations) == 0x000030, "Member 'FBannerItemIdent::ExistingAlterations' has a wrong offset!");
static_assert(offsetof(FBannerItemIdent, bAssetIsOwned) == 0x000040, "Member 'FBannerItemIdent::bAssetIsOwned' has a wrong offset!");
static_assert(offsetof(FBannerItemIdent, bAssetIsAssigned) == 0x000041, "Member 'FBannerItemIdent::bAssetIsAssigned' has a wrong offset!");

// ScriptStruct BlueprintContext.StorePurchase
// 0x0010 (0x0010 - 0x0000)
struct FStorePurchase final
{
public:
	class UOrionMcpItem*                          ItemStack;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityGained;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStorePurchase) == 0x000008, "Wrong alignment on FStorePurchase");
static_assert(sizeof(FStorePurchase) == 0x000010, "Wrong size on FStorePurchase");
static_assert(offsetof(FStorePurchase, ItemStack) == 0x000000, "Member 'FStorePurchase::ItemStack' has a wrong offset!");
static_assert(offsetof(FStorePurchase, QuantityGained) == 0x000008, "Member 'FStorePurchase::QuantityGained' has a wrong offset!");

// ScriptStruct BlueprintContext.ServicePriceBP
// 0x0008 (0x0008 - 0x0000)
struct FServicePriceBP final
{
public:
	EOrionCurrencyType                            Currency;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServicePriceBP) == 0x000004, "Wrong alignment on FServicePriceBP");
static_assert(sizeof(FServicePriceBP) == 0x000008, "Wrong size on FServicePriceBP");
static_assert(offsetof(FServicePriceBP, Currency) == 0x000000, "Member 'FServicePriceBP::Currency' has a wrong offset!");
static_assert(offsetof(FServicePriceBP, Price) == 0x000004, "Member 'FServicePriceBP::Price' has a wrong offset!");

// ScriptStruct BlueprintContext.OrionMtxOffer
// 0x0060 (0x0060 - 0x0000)
struct FOrionMtxOffer final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MtxTotal;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MtxBonus;                                          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RealMoneyPrice;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrionMtxOffer) == 0x000008, "Wrong alignment on FOrionMtxOffer");
static_assert(sizeof(FOrionMtxOffer) == 0x000060, "Wrong size on FOrionMtxOffer");
static_assert(offsetof(FOrionMtxOffer, Title) == 0x000000, "Member 'FOrionMtxOffer::Title' has a wrong offset!");
static_assert(offsetof(FOrionMtxOffer, Description) == 0x000018, "Member 'FOrionMtxOffer::Description' has a wrong offset!");
static_assert(offsetof(FOrionMtxOffer, MtxTotal) == 0x000030, "Member 'FOrionMtxOffer::MtxTotal' has a wrong offset!");
static_assert(offsetof(FOrionMtxOffer, MtxBonus) == 0x000034, "Member 'FOrionMtxOffer::MtxBonus' has a wrong offset!");
static_assert(offsetof(FOrionMtxOffer, RealMoneyPrice) == 0x000038, "Member 'FOrionMtxOffer::RealMoneyPrice' has a wrong offset!");

// ScriptStruct BlueprintContext.OrionTooltipHelper
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FOrionTooltipHelper final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrionTooltipHelper) == 0x000008, "Wrong alignment on FOrionTooltipHelper");
static_assert(sizeof(FOrionTooltipHelper) == 0x0000A8, "Wrong size on FOrionTooltipHelper");

// ScriptStruct BlueprintContext.OrionAbilityValueSummary
// 0x01D8 (0x01D8 - 0x0000)
struct alignas(0x08) FOrionAbilityValueSummary final
{
public:
	uint8                                         Pad_0[0x1D8];                                      // 0x0000(0x01D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrionAbilityValueSummary) == 0x000008, "Wrong alignment on FOrionAbilityValueSummary");
static_assert(sizeof(FOrionAbilityValueSummary) == 0x0001D8, "Wrong size on FOrionAbilityValueSummary");

}

