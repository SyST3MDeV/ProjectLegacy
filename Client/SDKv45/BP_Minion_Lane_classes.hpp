#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Minion_Lane

#include "Basic.hpp"

#include "BP_OrionCharAI_Minion_classes.hpp"
#include "Engine_structs.hpp"
#include "OrionGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Minion_Lane.BP_Minion_Lane_C
// 0x0130 (0x0F10 - 0x0DE0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Minion_Lane_C : public ABP_OrionCharAI_Minion_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0DE0(0x0008)(Transient, DuplicateTransient)
	float                                         DeWarp_Glow_8349110E43B212A79ACBB3AADD0C64D4;      // 0x0DE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeWarp_WarpAmount_8349110E43B212A79ACBB3AADD0C64D4; // 0x0DEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DeWarp__Direction_8349110E43B212A79ACBB3AADD0C64D4; // 0x0DF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF1[0x7];                                      // 0x0DF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DeWarp;                                            // 0x0DF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Ash_B54535014EE5C89D129A3E8AB7C0F74E;   // 0x0E00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_EmissiveRamp_B54535014EE5C89D129A3E8AB7C0F74E; // 0x0E04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Erode_B54535014EE5C89D129A3E8AB7C0F74E; // 0x0E08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_B54535014EE5C89D129A3E8AB7C0F74E; // 0x0E0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E0D[0x3];                                      // 0x0E0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0E10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CoreExposedFX_Timeline_EmissiveRamp_88FE1153419EC83E2A4DAC85C6F8E55B; // 0x0E18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CoreExposedFX_Timeline__Direction_88FE1153419EC83E2A4DAC85C6F8E55B; // 0x0E1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1D[0x3];                                      // 0x0E1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CoreExposedFX_Timeline;                            // 0x0E20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathFX_Timeline_Ash_472191D548F4518D01D92B812FCF88C0; // 0x0E28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathFX_Timeline_EmissiveRamp_472191D548F4518D01D92B812FCF88C0; // 0x0E2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathFX_Timeline_Erode_472191D548F4518D01D92B812FCF88C0; // 0x0E30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DeathFX_Timeline__Direction_472191D548F4518D01D92B812FCF88C0; // 0x0E34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E35[0x3];                                      // 0x0E35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DeathFX_Timeline;                                  // 0x0E38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Mesh_Dawn;                                         // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Mesh_Dusk;                                         // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollOnDeath;                                    // 0x0E50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E51[0x7];                                      // 0x0E51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Mesh_Core_Dawn;                                    // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Mesh_Core_Dusk;                                    // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDusk;                                            // 0x0E68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E69[0x7];                                      // 0x0E69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Mesh_Death_Dawn;                                   // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          Mesh_Death_Dusk;                                   // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Mat_Core_Dawn;                                     // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Mat_Core_Dusk;                                     // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mat_TeamColor_Dawn;                                // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrionTeam                                    TeamIndex;                                         // 0x0E98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E99[0x7];                                      // 0x0E99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MatTeamColor_Dusk;                                 // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatTeamColorDusk1;                                 // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatTeamColorDawn1;                                 // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaskedMat_Base_Dawn;                               // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaskedMat_Base_Dusk;                               // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLastHitAble;                                     // 0x0EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EC9[0x7];                                      // 0x0EC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaskedMat_Core_Dawn;                               // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaskedMat_Core_Dusk;                               // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Mat_Base_Dawn;                                     // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Mat_Base_Dusk;                                     // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveLevel;                                     // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrionTeam                                    Debug_TeamVisualOverride;                          // 0x0EF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF5[0x3];                                      // 0x0EF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AnimBP_Dawn;                                       // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AnimBP_Dusk;                                       // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathEmissiveLevel;                                // 0x0F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Minion_Lane(int32 EntryPoint);
	void GameplayCue_Minion_Spawn(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnPlayDeathAnim(float PlaybackTime, bool bAllowedToRagdoll);
	void Debug_OverrideTeamVisuals(EOrionTeam NewTeamVisuals);
	void OnCoreExposed();
	void GameplayCue_Minion_LastHitVulnerable(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnTeamChanged(EOrionTeam NewTeamIdx);
	void GameplayCue_Damage_DoT(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Damage(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void DeWarp__UpdateFunc();
	void DeWarp__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void CoreExposedFX_Timeline__UpdateFunc();
	void CoreExposedFX_Timeline__FinishedFunc();
	void DeathFX_Timeline__UpdateFunc();
	void DeathFX_Timeline__FinishedFunc();
	void UserConstructionScript();
	void InitTeamChanged(EOrionTeam Team);
	void SwapClientToCoreMesh(class USkeletalMesh* NewMesh_Dawn, class USkeletalMesh* NewMesh_Dusk, bool IsDusk_0);
	void SetTeamColor(EOrionTeam TeamNum_0, bool IsDead);
	void SwapMatsToCore(class UMaterialInterface* MatCoreDawn, class UMaterialInterface* MatCoreDusk, bool IsDusk_0);
	void SwapMatsToDeath(bool IsDusk_0);
	void Debug_CheckTeamVisualOverride(EOrionTeam DesiredTeamVisual, EOrionTeam* ActualTeamVisual);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Minion_Lane_C">();
	}
	static class ABP_Minion_Lane_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Minion_Lane_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Minion_Lane_C) == 0x000010, "Wrong alignment on ABP_Minion_Lane_C");
static_assert(sizeof(ABP_Minion_Lane_C) == 0x000F10, "Wrong size on ABP_Minion_Lane_C");
static_assert(offsetof(ABP_Minion_Lane_C, UberGraphFrame) == 0x000DE0, "Member 'ABP_Minion_Lane_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeWarp_Glow_8349110E43B212A79ACBB3AADD0C64D4) == 0x000DE8, "Member 'ABP_Minion_Lane_C::DeWarp_Glow_8349110E43B212A79ACBB3AADD0C64D4' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeWarp_WarpAmount_8349110E43B212A79ACBB3AADD0C64D4) == 0x000DEC, "Member 'ABP_Minion_Lane_C::DeWarp_WarpAmount_8349110E43B212A79ACBB3AADD0C64D4' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeWarp__Direction_8349110E43B212A79ACBB3AADD0C64D4) == 0x000DF0, "Member 'ABP_Minion_Lane_C::DeWarp__Direction_8349110E43B212A79ACBB3AADD0C64D4' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeWarp) == 0x000DF8, "Member 'ABP_Minion_Lane_C::DeWarp' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Timeline_0_Ash_B54535014EE5C89D129A3E8AB7C0F74E) == 0x000E00, "Member 'ABP_Minion_Lane_C::Timeline_0_Ash_B54535014EE5C89D129A3E8AB7C0F74E' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Timeline_0_EmissiveRamp_B54535014EE5C89D129A3E8AB7C0F74E) == 0x000E04, "Member 'ABP_Minion_Lane_C::Timeline_0_EmissiveRamp_B54535014EE5C89D129A3E8AB7C0F74E' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Timeline_0_Erode_B54535014EE5C89D129A3E8AB7C0F74E) == 0x000E08, "Member 'ABP_Minion_Lane_C::Timeline_0_Erode_B54535014EE5C89D129A3E8AB7C0F74E' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Timeline_0__Direction_B54535014EE5C89D129A3E8AB7C0F74E) == 0x000E0C, "Member 'ABP_Minion_Lane_C::Timeline_0__Direction_B54535014EE5C89D129A3E8AB7C0F74E' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Timeline_0) == 0x000E10, "Member 'ABP_Minion_Lane_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, CoreExposedFX_Timeline_EmissiveRamp_88FE1153419EC83E2A4DAC85C6F8E55B) == 0x000E18, "Member 'ABP_Minion_Lane_C::CoreExposedFX_Timeline_EmissiveRamp_88FE1153419EC83E2A4DAC85C6F8E55B' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, CoreExposedFX_Timeline__Direction_88FE1153419EC83E2A4DAC85C6F8E55B) == 0x000E1C, "Member 'ABP_Minion_Lane_C::CoreExposedFX_Timeline__Direction_88FE1153419EC83E2A4DAC85C6F8E55B' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, CoreExposedFX_Timeline) == 0x000E20, "Member 'ABP_Minion_Lane_C::CoreExposedFX_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeathFX_Timeline_Ash_472191D548F4518D01D92B812FCF88C0) == 0x000E28, "Member 'ABP_Minion_Lane_C::DeathFX_Timeline_Ash_472191D548F4518D01D92B812FCF88C0' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeathFX_Timeline_EmissiveRamp_472191D548F4518D01D92B812FCF88C0) == 0x000E2C, "Member 'ABP_Minion_Lane_C::DeathFX_Timeline_EmissiveRamp_472191D548F4518D01D92B812FCF88C0' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeathFX_Timeline_Erode_472191D548F4518D01D92B812FCF88C0) == 0x000E30, "Member 'ABP_Minion_Lane_C::DeathFX_Timeline_Erode_472191D548F4518D01D92B812FCF88C0' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeathFX_Timeline__Direction_472191D548F4518D01D92B812FCF88C0) == 0x000E34, "Member 'ABP_Minion_Lane_C::DeathFX_Timeline__Direction_472191D548F4518D01D92B812FCF88C0' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeathFX_Timeline) == 0x000E38, "Member 'ABP_Minion_Lane_C::DeathFX_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mesh_Dawn) == 0x000E40, "Member 'ABP_Minion_Lane_C::Mesh_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mesh_Dusk) == 0x000E48, "Member 'ABP_Minion_Lane_C::Mesh_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, RagdollOnDeath) == 0x000E50, "Member 'ABP_Minion_Lane_C::RagdollOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mesh_Core_Dawn) == 0x000E58, "Member 'ABP_Minion_Lane_C::Mesh_Core_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mesh_Core_Dusk) == 0x000E60, "Member 'ABP_Minion_Lane_C::Mesh_Core_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, IsDusk) == 0x000E68, "Member 'ABP_Minion_Lane_C::IsDusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mesh_Death_Dawn) == 0x000E70, "Member 'ABP_Minion_Lane_C::Mesh_Death_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mesh_Death_Dusk) == 0x000E78, "Member 'ABP_Minion_Lane_C::Mesh_Death_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mat_Core_Dawn) == 0x000E80, "Member 'ABP_Minion_Lane_C::Mat_Core_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mat_Core_Dusk) == 0x000E88, "Member 'ABP_Minion_Lane_C::Mat_Core_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mat_TeamColor_Dawn) == 0x000E90, "Member 'ABP_Minion_Lane_C::Mat_TeamColor_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, TeamIndex) == 0x000E98, "Member 'ABP_Minion_Lane_C::TeamIndex' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, MatTeamColor_Dusk) == 0x000EA0, "Member 'ABP_Minion_Lane_C::MatTeamColor_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, MatTeamColorDusk1) == 0x000EA8, "Member 'ABP_Minion_Lane_C::MatTeamColorDusk1' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, MatTeamColorDawn1) == 0x000EB0, "Member 'ABP_Minion_Lane_C::MatTeamColorDawn1' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, MaskedMat_Base_Dawn) == 0x000EB8, "Member 'ABP_Minion_Lane_C::MaskedMat_Base_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, MaskedMat_Base_Dusk) == 0x000EC0, "Member 'ABP_Minion_Lane_C::MaskedMat_Base_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, IsLastHitAble) == 0x000EC8, "Member 'ABP_Minion_Lane_C::IsLastHitAble' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, MaskedMat_Core_Dawn) == 0x000ED0, "Member 'ABP_Minion_Lane_C::MaskedMat_Core_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, MaskedMat_Core_Dusk) == 0x000ED8, "Member 'ABP_Minion_Lane_C::MaskedMat_Core_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mat_Base_Dawn) == 0x000EE0, "Member 'ABP_Minion_Lane_C::Mat_Base_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Mat_Base_Dusk) == 0x000EE8, "Member 'ABP_Minion_Lane_C::Mat_Base_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, EmissiveLevel) == 0x000EF0, "Member 'ABP_Minion_Lane_C::EmissiveLevel' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, Debug_TeamVisualOverride) == 0x000EF4, "Member 'ABP_Minion_Lane_C::Debug_TeamVisualOverride' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, AnimBP_Dawn) == 0x000EF8, "Member 'ABP_Minion_Lane_C::AnimBP_Dawn' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, AnimBP_Dusk) == 0x000F00, "Member 'ABP_Minion_Lane_C::AnimBP_Dusk' has a wrong offset!");
static_assert(offsetof(ABP_Minion_Lane_C, DeathEmissiveLevel) == 0x000F08, "Member 'ABP_Minion_Lane_C::DeathEmissiveLevel' has a wrong offset!");

}

