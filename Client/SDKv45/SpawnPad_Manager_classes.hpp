#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpawnPad_Manager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OrionGame_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SpawnPad_Manager.SpawnPad_Manager_C
// 0x0160 (0x0548 - 0x03E8)
class ASpawnPad_Manager_C final : public AOrionBaseActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E8(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SpawnPad_Discs;                                    // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_5_Rim6;                                        // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_5_Rim5;                                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_5_Rim4;                                        // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_5_Rim3;                                        // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_5_Rim2;                                        // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_5_Rim1;                                        // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_5_CentralLight;                                // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_4_Rim6;                                        // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_4_Rim5;                                        // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_4_Rim4;                                        // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_4_Rim3;                                        // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_4_Rim2;                                        // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_4_Rim1;                                        // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_4_CentralLight;                                // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_3_Rim6;                                        // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_3_Rim5;                                        // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_3_Rim4;                                        // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_3_Rim3;                                        // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_3_Rim2;                                        // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_3_Rim1;                                        // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_3_CentralLight;                                // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_2_Rim2;                                        // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_2_Rim6;                                        // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_2_Rim5;                                        // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_2_Rim4;                                        // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_2_Rim3;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_2_Rim1;                                        // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_2_CentralLight;                                // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_1_Rim6;                                        // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_1_Rim5;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_1_Rim4;                                        // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_1_Rim3;                                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_1_Rim2;                                        // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_1_Rim1;                                        // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Pad_1_CentralLight;                                // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynaMat;                                           // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxEmissive;                                       // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCentralLightIntensity;                          // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRimIntensity;                                   // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TestMode;                                          // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Test_Pad_ID;                                       // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TestPadDriver;                                     // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrionTeam                                    CurrentTeamIndex;                                  // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_SpawnPad_Manager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnTeamChanged(EOrionTeam NewTeamIdx);
	void UserConstructionScript();
	void HandleTeamColors();
	void DrivePad(float DriverValue, int32 Pad_ID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SpawnPad_Manager_C">();
	}
	static class ASpawnPad_Manager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpawnPad_Manager_C>();
	}
};
static_assert(alignof(ASpawnPad_Manager_C) == 0x000008, "Wrong alignment on ASpawnPad_Manager_C");
static_assert(sizeof(ASpawnPad_Manager_C) == 0x000548, "Wrong size on ASpawnPad_Manager_C");
static_assert(offsetof(ASpawnPad_Manager_C, UberGraphFrame) == 0x0003E8, "Member 'ASpawnPad_Manager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, SpawnPad_Discs) == 0x0003F0, "Member 'ASpawnPad_Manager_C::SpawnPad_Discs' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Billboard) == 0x0003F8, "Member 'ASpawnPad_Manager_C::Billboard' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_5_Rim6) == 0x000400, "Member 'ASpawnPad_Manager_C::Pad_5_Rim6' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_5_Rim5) == 0x000408, "Member 'ASpawnPad_Manager_C::Pad_5_Rim5' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_5_Rim4) == 0x000410, "Member 'ASpawnPad_Manager_C::Pad_5_Rim4' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_5_Rim3) == 0x000418, "Member 'ASpawnPad_Manager_C::Pad_5_Rim3' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_5_Rim2) == 0x000420, "Member 'ASpawnPad_Manager_C::Pad_5_Rim2' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_5_Rim1) == 0x000428, "Member 'ASpawnPad_Manager_C::Pad_5_Rim1' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_5_CentralLight) == 0x000430, "Member 'ASpawnPad_Manager_C::Pad_5_CentralLight' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_4_Rim6) == 0x000438, "Member 'ASpawnPad_Manager_C::Pad_4_Rim6' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_4_Rim5) == 0x000440, "Member 'ASpawnPad_Manager_C::Pad_4_Rim5' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_4_Rim4) == 0x000448, "Member 'ASpawnPad_Manager_C::Pad_4_Rim4' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_4_Rim3) == 0x000450, "Member 'ASpawnPad_Manager_C::Pad_4_Rim3' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_4_Rim2) == 0x000458, "Member 'ASpawnPad_Manager_C::Pad_4_Rim2' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_4_Rim1) == 0x000460, "Member 'ASpawnPad_Manager_C::Pad_4_Rim1' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_4_CentralLight) == 0x000468, "Member 'ASpawnPad_Manager_C::Pad_4_CentralLight' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_3_Rim6) == 0x000470, "Member 'ASpawnPad_Manager_C::Pad_3_Rim6' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_3_Rim5) == 0x000478, "Member 'ASpawnPad_Manager_C::Pad_3_Rim5' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_3_Rim4) == 0x000480, "Member 'ASpawnPad_Manager_C::Pad_3_Rim4' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_3_Rim3) == 0x000488, "Member 'ASpawnPad_Manager_C::Pad_3_Rim3' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_3_Rim2) == 0x000490, "Member 'ASpawnPad_Manager_C::Pad_3_Rim2' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_3_Rim1) == 0x000498, "Member 'ASpawnPad_Manager_C::Pad_3_Rim1' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_3_CentralLight) == 0x0004A0, "Member 'ASpawnPad_Manager_C::Pad_3_CentralLight' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_2_Rim2) == 0x0004A8, "Member 'ASpawnPad_Manager_C::Pad_2_Rim2' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_2_Rim6) == 0x0004B0, "Member 'ASpawnPad_Manager_C::Pad_2_Rim6' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_2_Rim5) == 0x0004B8, "Member 'ASpawnPad_Manager_C::Pad_2_Rim5' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_2_Rim4) == 0x0004C0, "Member 'ASpawnPad_Manager_C::Pad_2_Rim4' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_2_Rim3) == 0x0004C8, "Member 'ASpawnPad_Manager_C::Pad_2_Rim3' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_2_Rim1) == 0x0004D0, "Member 'ASpawnPad_Manager_C::Pad_2_Rim1' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_2_CentralLight) == 0x0004D8, "Member 'ASpawnPad_Manager_C::Pad_2_CentralLight' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_1_Rim6) == 0x0004E0, "Member 'ASpawnPad_Manager_C::Pad_1_Rim6' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_1_Rim5) == 0x0004E8, "Member 'ASpawnPad_Manager_C::Pad_1_Rim5' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_1_Rim4) == 0x0004F0, "Member 'ASpawnPad_Manager_C::Pad_1_Rim4' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_1_Rim3) == 0x0004F8, "Member 'ASpawnPad_Manager_C::Pad_1_Rim3' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_1_Rim2) == 0x000500, "Member 'ASpawnPad_Manager_C::Pad_1_Rim2' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_1_Rim1) == 0x000508, "Member 'ASpawnPad_Manager_C::Pad_1_Rim1' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Pad_1_CentralLight) == 0x000510, "Member 'ASpawnPad_Manager_C::Pad_1_CentralLight' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, DefaultSceneRoot) == 0x000518, "Member 'ASpawnPad_Manager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, DynaMat) == 0x000520, "Member 'ASpawnPad_Manager_C::DynaMat' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, MaxEmissive) == 0x000528, "Member 'ASpawnPad_Manager_C::MaxEmissive' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, MaxCentralLightIntensity) == 0x00052C, "Member 'ASpawnPad_Manager_C::MaxCentralLightIntensity' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, MaxRimIntensity) == 0x000530, "Member 'ASpawnPad_Manager_C::MaxRimIntensity' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, TestMode) == 0x000534, "Member 'ASpawnPad_Manager_C::TestMode' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, Test_Pad_ID) == 0x000538, "Member 'ASpawnPad_Manager_C::Test_Pad_ID' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, TestPadDriver) == 0x00053C, "Member 'ASpawnPad_Manager_C::TestPadDriver' has a wrong offset!");
static_assert(offsetof(ASpawnPad_Manager_C, CurrentTeamIndex) == 0x000540, "Member 'ASpawnPad_Manager_C::CurrentTeamIndex' has a wrong offset!");

}

