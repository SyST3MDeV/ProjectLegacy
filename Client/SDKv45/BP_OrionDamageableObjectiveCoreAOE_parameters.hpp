#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OrionDamageableObjectiveCoreAOE

#include "Basic.hpp"

#include "OrionGame_structs.hpp"


namespace SDK::Params
{

// Function BP_OrionDamageableObjectiveCoreAOE.BP_OrionDamageableObjectiveCoreAOE_C.ReturnValidOverlapActor
// 0x0040 (0x0040 - 0x0000)
struct BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor final
{
public:
	class AActor*                                 OverlapActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnActor;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Local_IsValid;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EOrionTeam                                    Local_Team;                                        // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Local_Actor;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOrionDamageableActor*                  K2Node_DynamicCast_AsOrion_Damageable_Actor;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOrionChar*                             K2Node_DynamicCast_AsOrion_Char;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor) == 0x000008, "Wrong alignment on BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor");
static_assert(sizeof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor) == 0x000040, "Wrong size on BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, OverlapActor) == 0x000000, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::OverlapActor' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, ReturnActor) == 0x000008, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::ReturnActor' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, IsValid) == 0x000010, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::IsValid' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, Local_IsValid) == 0x000011, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::Local_IsValid' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, Local_Team) == 0x000012, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::Local_Team' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, Local_Actor) == 0x000018, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::Local_Actor' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, K2Node_DynamicCast_AsOrion_Damageable_Actor) == 0x000020, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::K2Node_DynamicCast_AsOrion_Damageable_Actor' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, K2Node_DynamicCast_AsOrion_Char) == 0x000030, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::K2Node_DynamicCast_AsOrion_Char' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, K2Node_DynamicCast_bSuccess2) == 0x000038, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000039, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_ReturnValidOverlapActor::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_OrionDamageableObjectiveCoreAOE.BP_OrionDamageableObjectiveCoreAOE_C.HandlePerfSettings
// 0x0002 (0x0002 - 0x0000)
struct BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings) == 0x000001, "Wrong alignment on BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings");
static_assert(sizeof(BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings) == 0x000002, "Wrong size on BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings, CallFunc_IsValid_ReturnValue2) == 0x000001, "Member 'BP_OrionDamageableObjectiveCoreAOE_C_HandlePerfSettings::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

}

