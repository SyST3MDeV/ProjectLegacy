#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IOSRuntimeSettings

#include "Basic.hpp"

#include "IOSRuntimeSettings_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class IOSRuntimeSettings.IOSRuntimeSettings
// 0x0178 (0x01A0 - 0x0028)
class UIOSRuntimeSettings final : public UObject
{
public:
	uint8                                         bEnableGameCenterSupport : 1;                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCloudKitSupport : 1;                        // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableRemoteNotificationsSupport : 1;             // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSupportsMetal;                                    // 0x002C(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsMetalMRT;                                 // 0x002D(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCookPVRTCTextures;                                // 0x002E(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCookASTCTextures;                                 // 0x002F(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsOpenGLES2;                                // 0x0030(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRemoteShaderCompile;                         // 0x0031(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGeneratedSYMFile;                                 // 0x0032(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGeneratedSYMBundle;                               // 0x0033(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateXCArchive;                                // 0x0034(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDevForArmV7;                                      // 0x0035(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDevForArm64;                                      // 0x0036(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDevForArmV7S;                                     // 0x0037(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShipForArmV7;                                     // 0x0038(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShipForArm64;                                     // 0x0039(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShipForArmV7S;                                    // 0x003A(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShipForBitcode;                                   // 0x003B(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalLinkerFlags;                             // 0x0040(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalShippingLinkerFlags;                     // 0x0050(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RemoteServerName;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRSync;                                         // 0x0070(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RSyncUsername;                                     // 0x0078(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIOSBuildResourceDirectory             DeltaCopyInstallPath;                              // 0x0088(0x0010)(Edit, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class FString                                 SSHPrivateKeyLocation;                             // 0x0098(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIOSBuildResourceFilePath              SSHPrivateKeyOverridePath;                         // 0x00A8(0x0010)(Edit, Config, GlobalConfig, NativeAccessSpecifierPublic)
	bool                                          bTreatRemoteAsSeparateController;                  // 0x00B8(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRemoteRotation;                              // 0x00B9(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRemoteAsVirtualJoystick;                       // 0x00BA(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRemoteAbsoluteDpadValues;                      // 0x00BB(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSupportsPortraitOrientation : 1;                  // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsUpsideDownOrientation : 1;                // 0x00BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsLandscapeLeftOrientation : 1;             // 0x00BC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsLandscapeRightOrientation : 1;            // 0x00BC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BundleDisplayName;                                 // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BundleName;                                        // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BundleIdentifier;                                  // 0x00E0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionInfo;                                       // 0x00F0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPowerUsageFrameRateLock                      FrameRateLock;                                     // 0x0100(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIOSVersion                                   MinimumiOSVersion;                                 // 0x0101(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bSupportsIPad : 1;                                 // 0x0104(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportsIPhone : 1;                               // 0x0104(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalPlistData;                               // 0x0108(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFacebookSupport;                            // 0x0118(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FacebookAppID;                                     // 0x0120(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MobileProvision;                                   // 0x0130(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SigningCertificate;                                // 0x0140(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticSigning;                                 // 0x0150(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxShaderLanguageVersion;                          // 0x0151(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFastIntrinsics;                                 // 0x0152(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMathOptimisations;                           // 0x0153(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseIntegratedKeyboard;                            // 0x0154(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AudioSampleRate;                                   // 0x0158(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioCallbackBufferFrameSize;                      // 0x015C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioNumBuffersToEnqueue;                          // 0x0160(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioMaxChannels;                                  // 0x0164(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioNumSourceWorkers;                             // 0x0168(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpatializationPlugin;                              // 0x0170(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReverbPlugin;                                      // 0x0180(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OcclusionPlugin;                                   // 0x0190(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IOSRuntimeSettings">();
	}
	static class UIOSRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIOSRuntimeSettings>();
	}
};
static_assert(alignof(UIOSRuntimeSettings) == 0x000008, "Wrong alignment on UIOSRuntimeSettings");
static_assert(sizeof(UIOSRuntimeSettings) == 0x0001A0, "Wrong size on UIOSRuntimeSettings");
static_assert(offsetof(UIOSRuntimeSettings, bSupportsMetal) == 0x00002C, "Member 'UIOSRuntimeSettings::bSupportsMetal' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bSupportsMetalMRT) == 0x00002D, "Member 'UIOSRuntimeSettings::bSupportsMetalMRT' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bCookPVRTCTextures) == 0x00002E, "Member 'UIOSRuntimeSettings::bCookPVRTCTextures' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bCookASTCTextures) == 0x00002F, "Member 'UIOSRuntimeSettings::bCookASTCTextures' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bSupportsOpenGLES2) == 0x000030, "Member 'UIOSRuntimeSettings::bSupportsOpenGLES2' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, EnableRemoteShaderCompile) == 0x000031, "Member 'UIOSRuntimeSettings::EnableRemoteShaderCompile' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bGeneratedSYMFile) == 0x000032, "Member 'UIOSRuntimeSettings::bGeneratedSYMFile' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bGeneratedSYMBundle) == 0x000033, "Member 'UIOSRuntimeSettings::bGeneratedSYMBundle' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bGenerateXCArchive) == 0x000034, "Member 'UIOSRuntimeSettings::bGenerateXCArchive' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bDevForArmV7) == 0x000035, "Member 'UIOSRuntimeSettings::bDevForArmV7' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bDevForArm64) == 0x000036, "Member 'UIOSRuntimeSettings::bDevForArm64' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bDevForArmV7S) == 0x000037, "Member 'UIOSRuntimeSettings::bDevForArmV7S' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bShipForArmV7) == 0x000038, "Member 'UIOSRuntimeSettings::bShipForArmV7' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bShipForArm64) == 0x000039, "Member 'UIOSRuntimeSettings::bShipForArm64' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bShipForArmV7S) == 0x00003A, "Member 'UIOSRuntimeSettings::bShipForArmV7S' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bShipForBitcode) == 0x00003B, "Member 'UIOSRuntimeSettings::bShipForBitcode' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AdditionalLinkerFlags) == 0x000040, "Member 'UIOSRuntimeSettings::AdditionalLinkerFlags' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AdditionalShippingLinkerFlags) == 0x000050, "Member 'UIOSRuntimeSettings::AdditionalShippingLinkerFlags' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, RemoteServerName) == 0x000060, "Member 'UIOSRuntimeSettings::RemoteServerName' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bUseRSync) == 0x000070, "Member 'UIOSRuntimeSettings::bUseRSync' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, RSyncUsername) == 0x000078, "Member 'UIOSRuntimeSettings::RSyncUsername' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, DeltaCopyInstallPath) == 0x000088, "Member 'UIOSRuntimeSettings::DeltaCopyInstallPath' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, SSHPrivateKeyLocation) == 0x000098, "Member 'UIOSRuntimeSettings::SSHPrivateKeyLocation' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, SSHPrivateKeyOverridePath) == 0x0000A8, "Member 'UIOSRuntimeSettings::SSHPrivateKeyOverridePath' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bTreatRemoteAsSeparateController) == 0x0000B8, "Member 'UIOSRuntimeSettings::bTreatRemoteAsSeparateController' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bAllowRemoteRotation) == 0x0000B9, "Member 'UIOSRuntimeSettings::bAllowRemoteRotation' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bUseRemoteAsVirtualJoystick) == 0x0000BA, "Member 'UIOSRuntimeSettings::bUseRemoteAsVirtualJoystick' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bUseRemoteAbsoluteDpadValues) == 0x0000BB, "Member 'UIOSRuntimeSettings::bUseRemoteAbsoluteDpadValues' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, BundleDisplayName) == 0x0000C0, "Member 'UIOSRuntimeSettings::BundleDisplayName' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, BundleName) == 0x0000D0, "Member 'UIOSRuntimeSettings::BundleName' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, BundleIdentifier) == 0x0000E0, "Member 'UIOSRuntimeSettings::BundleIdentifier' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, VersionInfo) == 0x0000F0, "Member 'UIOSRuntimeSettings::VersionInfo' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, FrameRateLock) == 0x000100, "Member 'UIOSRuntimeSettings::FrameRateLock' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, MinimumiOSVersion) == 0x000101, "Member 'UIOSRuntimeSettings::MinimumiOSVersion' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AdditionalPlistData) == 0x000108, "Member 'UIOSRuntimeSettings::AdditionalPlistData' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bEnableFacebookSupport) == 0x000118, "Member 'UIOSRuntimeSettings::bEnableFacebookSupport' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, FacebookAppID) == 0x000120, "Member 'UIOSRuntimeSettings::FacebookAppID' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, MobileProvision) == 0x000130, "Member 'UIOSRuntimeSettings::MobileProvision' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, SigningCertificate) == 0x000140, "Member 'UIOSRuntimeSettings::SigningCertificate' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bAutomaticSigning) == 0x000150, "Member 'UIOSRuntimeSettings::bAutomaticSigning' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, MaxShaderLanguageVersion) == 0x000151, "Member 'UIOSRuntimeSettings::MaxShaderLanguageVersion' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, UseFastIntrinsics) == 0x000152, "Member 'UIOSRuntimeSettings::UseFastIntrinsics' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, EnableMathOptimisations) == 0x000153, "Member 'UIOSRuntimeSettings::EnableMathOptimisations' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, bUseIntegratedKeyboard) == 0x000154, "Member 'UIOSRuntimeSettings::bUseIntegratedKeyboard' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AudioSampleRate) == 0x000158, "Member 'UIOSRuntimeSettings::AudioSampleRate' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AudioCallbackBufferFrameSize) == 0x00015C, "Member 'UIOSRuntimeSettings::AudioCallbackBufferFrameSize' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AudioNumBuffersToEnqueue) == 0x000160, "Member 'UIOSRuntimeSettings::AudioNumBuffersToEnqueue' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AudioMaxChannels) == 0x000164, "Member 'UIOSRuntimeSettings::AudioMaxChannels' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, AudioNumSourceWorkers) == 0x000168, "Member 'UIOSRuntimeSettings::AudioNumSourceWorkers' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, SpatializationPlugin) == 0x000170, "Member 'UIOSRuntimeSettings::SpatializationPlugin' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, ReverbPlugin) == 0x000180, "Member 'UIOSRuntimeSettings::ReverbPlugin' has a wrong offset!");
static_assert(offsetof(UIOSRuntimeSettings, OcclusionPlugin) == 0x000190, "Member 'UIOSRuntimeSettings::OcclusionPlugin' has a wrong offset!");

}

