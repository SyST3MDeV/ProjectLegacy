#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OrionUI

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "OrionGame_structs.hpp"
#include "BlueprintContext_structs.hpp"
#include "McpProfileSys_structs.hpp"
#include "OrionUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Hotfix_structs.hpp"


namespace SDK::Params
{

// Function OrionUI.ArcadeLadderDetailsRoot.SetLadder
// 0x0008 (0x0008 - 0x0000)
struct ArcadeLadderDetailsRoot_SetLadder final
{
public:
	class UOrionArcadeLadderSetupData*            NewLadderData;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeLadderDetailsRoot_SetLadder) == 0x000008, "Wrong alignment on ArcadeLadderDetailsRoot_SetLadder");
static_assert(sizeof(ArcadeLadderDetailsRoot_SetLadder) == 0x000008, "Wrong size on ArcadeLadderDetailsRoot_SetLadder");
static_assert(offsetof(ArcadeLadderDetailsRoot_SetLadder, NewLadderData) == 0x000000, "Member 'ArcadeLadderDetailsRoot_SetLadder::NewLadderData' has a wrong offset!");

// Function OrionUI.ArcadeLadderDetailsRoot.SetupButtons
// 0x0004 (0x0004 - 0x0000)
struct ArcadeLadderDetailsRoot_SetupButtons final
{
public:
	int32                                         StartingStageIndex;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeLadderDetailsRoot_SetupButtons) == 0x000004, "Wrong alignment on ArcadeLadderDetailsRoot_SetupButtons");
static_assert(sizeof(ArcadeLadderDetailsRoot_SetupButtons) == 0x000004, "Wrong size on ArcadeLadderDetailsRoot_SetupButtons");
static_assert(offsetof(ArcadeLadderDetailsRoot_SetupButtons, StartingStageIndex) == 0x000000, "Member 'ArcadeLadderDetailsRoot_SetupButtons::StartingStageIndex' has a wrong offset!");

// Function OrionUI.ArcadeRoot.DynamicHandleItemSelected
// 0x0008 (0x0008 - 0x0000)
struct ArcadeRoot_DynamicHandleItemSelected final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeRoot_DynamicHandleItemSelected) == 0x000008, "Wrong alignment on ArcadeRoot_DynamicHandleItemSelected");
static_assert(sizeof(ArcadeRoot_DynamicHandleItemSelected) == 0x000008, "Wrong size on ArcadeRoot_DynamicHandleItemSelected");
static_assert(offsetof(ArcadeRoot_DynamicHandleItemSelected, Item) == 0x000000, "Member 'ArcadeRoot_DynamicHandleItemSelected::Item' has a wrong offset!");

// Function OrionUI.ArcadeStageButton.SetStageData
// 0x0010 (0x0010 - 0x0000)
struct ArcadeStageButton_SetStageData final
{
public:
	class UOrionArcadeLadderSetupData*            InLadderData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InStageIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArcadeStageButton_SetStageData) == 0x000008, "Wrong alignment on ArcadeStageButton_SetStageData");
static_assert(sizeof(ArcadeStageButton_SetStageData) == 0x000010, "Wrong size on ArcadeStageButton_SetStageData");
static_assert(offsetof(ArcadeStageButton_SetStageData, InLadderData) == 0x000000, "Member 'ArcadeStageButton_SetStageData::InLadderData' has a wrong offset!");
static_assert(offsetof(ArcadeStageButton_SetStageData, InStageIndex) == 0x000008, "Member 'ArcadeStageButton_SetStageData::InStageIndex' has a wrong offset!");

// Function OrionUI.ArcadeStageButton.GetPlaylistID
// 0x0004 (0x0004 - 0x0000)
struct ArcadeStageButton_GetPlaylistID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeStageButton_GetPlaylistID) == 0x000004, "Wrong alignment on ArcadeStageButton_GetPlaylistID");
static_assert(sizeof(ArcadeStageButton_GetPlaylistID) == 0x000004, "Wrong size on ArcadeStageButton_GetPlaylistID");
static_assert(offsetof(ArcadeStageButton_GetPlaylistID, ReturnValue) == 0x000000, "Member 'ArcadeStageButton_GetPlaylistID::ReturnValue' has a wrong offset!");

// Function OrionUI.ArcadeStageButton.GetUIIndex
// 0x0004 (0x0004 - 0x0000)
struct ArcadeStageButton_GetUIIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeStageButton_GetUIIndex) == 0x000004, "Wrong alignment on ArcadeStageButton_GetUIIndex");
static_assert(sizeof(ArcadeStageButton_GetUIIndex) == 0x000004, "Wrong size on ArcadeStageButton_GetUIIndex");
static_assert(offsetof(ArcadeStageButton_GetUIIndex, ReturnValue) == 0x000000, "Member 'ArcadeStageButton_GetUIIndex::ReturnValue' has a wrong offset!");

// Function OrionUI.ArcadeStageButton.IsValidStage
// 0x0001 (0x0001 - 0x0000)
struct ArcadeStageButton_IsValidStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeStageButton_IsValidStage) == 0x000001, "Wrong alignment on ArcadeStageButton_IsValidStage");
static_assert(sizeof(ArcadeStageButton_IsValidStage) == 0x000001, "Wrong size on ArcadeStageButton_IsValidStage");
static_assert(offsetof(ArcadeStageButton_IsValidStage, ReturnValue) == 0x000000, "Member 'ArcadeStageButton_IsValidStage::ReturnValue' has a wrong offset!");

// Function OrionUI.Base_Group.AddWidget
// 0x0008 (0x0008 - 0x0000)
struct Base_Group_AddWidget final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Base_Group_AddWidget) == 0x000008, "Wrong alignment on Base_Group_AddWidget");
static_assert(sizeof(Base_Group_AddWidget) == 0x000008, "Wrong size on Base_Group_AddWidget");
static_assert(offsetof(Base_Group_AddWidget, InWidget) == 0x000000, "Member 'Base_Group_AddWidget::InWidget' has a wrong offset!");

// Function OrionUI.Base_Group.RemoveWidget
// 0x0008 (0x0008 - 0x0000)
struct Base_Group_RemoveWidget final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Base_Group_RemoveWidget) == 0x000008, "Wrong alignment on Base_Group_RemoveWidget");
static_assert(sizeof(Base_Group_RemoveWidget) == 0x000008, "Wrong size on Base_Group_RemoveWidget");
static_assert(offsetof(Base_Group_RemoveWidget, InWidget) == 0x000000, "Member 'Base_Group_RemoveWidget::InWidget' has a wrong offset!");

// DelegateFunction OrionUI.ChatWindow.GetChatPromptText__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ChatWindow_GetChatPromptText__DelegateSignature final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWindow_GetChatPromptText__DelegateSignature) == 0x000008, "Wrong alignment on ChatWindow_GetChatPromptText__DelegateSignature");
static_assert(sizeof(ChatWindow_GetChatPromptText__DelegateSignature) == 0x000018, "Wrong size on ChatWindow_GetChatPromptText__DelegateSignature");
static_assert(offsetof(ChatWindow_GetChatPromptText__DelegateSignature, ReturnValue) == 0x000000, "Member 'ChatWindow_GetChatPromptText__DelegateSignature::ReturnValue' has a wrong offset!");

// Function OrionUI.ChatWindow.SetActive
// 0x0001 (0x0001 - 0x0000)
struct ChatWindow_SetActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWindow_SetActive) == 0x000001, "Wrong alignment on ChatWindow_SetActive");
static_assert(sizeof(ChatWindow_SetActive) == 0x000001, "Wrong size on ChatWindow_SetActive");
static_assert(offsetof(ChatWindow_SetActive, bActive) == 0x000000, "Member 'ChatWindow_SetActive::bActive' has a wrong offset!");

// Function OrionUI.ChatWindow.SetFocus
// 0x0001 (0x0001 - 0x0000)
struct ChatWindow_SetFocus final
{
public:
	bool                                          bWithSlash;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWindow_SetFocus) == 0x000001, "Wrong alignment on ChatWindow_SetFocus");
static_assert(sizeof(ChatWindow_SetFocus) == 0x000001, "Wrong size on ChatWindow_SetFocus");
static_assert(offsetof(ChatWindow_SetFocus, bWithSlash) == 0x000000, "Member 'ChatWindow_SetFocus::bWithSlash' has a wrong offset!");

// Function OrionUI.ChatWindow.IsActive
// 0x0001 (0x0001 - 0x0000)
struct ChatWindow_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatWindow_IsActive) == 0x000001, "Wrong alignment on ChatWindow_IsActive");
static_assert(sizeof(ChatWindow_IsActive) == 0x000001, "Wrong size on ChatWindow_IsActive");
static_assert(offsetof(ChatWindow_IsActive, ReturnValue) == 0x000000, "Member 'ChatWindow_IsActive::ReturnValue' has a wrong offset!");

// Function OrionUI.CircularLayoutPanel.AddChildToCircularLayout
// 0x0010 (0x0010 - 0x0000)
struct CircularLayoutPanel_AddChildToCircularLayout final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCircularLayoutSlot*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircularLayoutPanel_AddChildToCircularLayout) == 0x000008, "Wrong alignment on CircularLayoutPanel_AddChildToCircularLayout");
static_assert(sizeof(CircularLayoutPanel_AddChildToCircularLayout) == 0x000010, "Wrong size on CircularLayoutPanel_AddChildToCircularLayout");
static_assert(offsetof(CircularLayoutPanel_AddChildToCircularLayout, Content) == 0x000000, "Member 'CircularLayoutPanel_AddChildToCircularLayout::Content' has a wrong offset!");
static_assert(offsetof(CircularLayoutPanel_AddChildToCircularLayout, ReturnValue) == 0x000008, "Member 'CircularLayoutPanel_AddChildToCircularLayout::ReturnValue' has a wrong offset!");

// Function OrionUI.CircularLayoutPanel.SetPhaseOffset
// 0x0004 (0x0004 - 0x0000)
struct CircularLayoutPanel_SetPhaseOffset final
{
public:
	float                                         InPhaseOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircularLayoutPanel_SetPhaseOffset) == 0x000004, "Wrong alignment on CircularLayoutPanel_SetPhaseOffset");
static_assert(sizeof(CircularLayoutPanel_SetPhaseOffset) == 0x000004, "Wrong size on CircularLayoutPanel_SetPhaseOffset");
static_assert(offsetof(CircularLayoutPanel_SetPhaseOffset, InPhaseOffset) == 0x000000, "Member 'CircularLayoutPanel_SetPhaseOffset::InPhaseOffset' has a wrong offset!");

// Function OrionUI.CircularLayoutPanel.SetRadiusMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CircularLayoutPanel_SetRadiusMultiplier final
{
public:
	float                                         InRadiusMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircularLayoutPanel_SetRadiusMultiplier) == 0x000004, "Wrong alignment on CircularLayoutPanel_SetRadiusMultiplier");
static_assert(sizeof(CircularLayoutPanel_SetRadiusMultiplier) == 0x000004, "Wrong size on CircularLayoutPanel_SetRadiusMultiplier");
static_assert(offsetof(CircularLayoutPanel_SetRadiusMultiplier, InRadiusMultiplier) == 0x000000, "Member 'CircularLayoutPanel_SetRadiusMultiplier::InRadiusMultiplier' has a wrong offset!");

// Function OrionUI.CircularLayoutSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct CircularLayoutSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircularLayoutSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on CircularLayoutSlot_SetHorizontalAlignment");
static_assert(sizeof(CircularLayoutSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on CircularLayoutSlot_SetHorizontalAlignment");
static_assert(offsetof(CircularLayoutSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'CircularLayoutSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function OrionUI.CircularLayoutSlot.SetProportion
// 0x0004 (0x0004 - 0x0000)
struct CircularLayoutSlot_SetProportion final
{
public:
	float                                         InProportion;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircularLayoutSlot_SetProportion) == 0x000004, "Wrong alignment on CircularLayoutSlot_SetProportion");
static_assert(sizeof(CircularLayoutSlot_SetProportion) == 0x000004, "Wrong size on CircularLayoutSlot_SetProportion");
static_assert(offsetof(CircularLayoutSlot_SetProportion, InProportion) == 0x000000, "Member 'CircularLayoutSlot_SetProportion::InProportion' has a wrong offset!");

// Function OrionUI.CircularLayoutSlot.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct CircularLayoutSlot_SetRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircularLayoutSlot_SetRadius) == 0x000004, "Wrong alignment on CircularLayoutSlot_SetRadius");
static_assert(sizeof(CircularLayoutSlot_SetRadius) == 0x000004, "Wrong size on CircularLayoutSlot_SetRadius");
static_assert(offsetof(CircularLayoutSlot_SetRadius, InRadius) == 0x000000, "Member 'CircularLayoutSlot_SetRadius::InRadius' has a wrong offset!");

// Function OrionUI.CircularLayoutSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct CircularLayoutSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircularLayoutSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on CircularLayoutSlot_SetVerticalAlignment");
static_assert(sizeof(CircularLayoutSlot_SetVerticalAlignment) == 0x000001, "Wrong size on CircularLayoutSlot_SetVerticalAlignment");
static_assert(offsetof(CircularLayoutSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'CircularLayoutSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function OrionUI.EventWidgetSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EventWidgetSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventWidgetSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EventWidgetSlot_SetHorizontalAlignment");
static_assert(sizeof(EventWidgetSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on EventWidgetSlot_SetHorizontalAlignment");
static_assert(offsetof(EventWidgetSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'EventWidgetSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function OrionUI.EventWidgetSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EventWidgetSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventWidgetSlot_SetPadding) == 0x000004, "Wrong alignment on EventWidgetSlot_SetPadding");
static_assert(sizeof(EventWidgetSlot_SetPadding) == 0x000010, "Wrong size on EventWidgetSlot_SetPadding");
static_assert(offsetof(EventWidgetSlot_SetPadding, InPadding) == 0x000000, "Member 'EventWidgetSlot_SetPadding::InPadding' has a wrong offset!");

// Function OrionUI.EventWidgetSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EventWidgetSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventWidgetSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on EventWidgetSlot_SetVerticalAlignment");
static_assert(sizeof(EventWidgetSlot_SetVerticalAlignment) == 0x000001, "Wrong size on EventWidgetSlot_SetVerticalAlignment");
static_assert(offsetof(EventWidgetSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'EventWidgetSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function OrionUI.ExpandableArea_Group.OnExpansionChanged
// 0x0010 (0x0010 - 0x0000)
struct ExpandableArea_Group_OnExpansionChanged final
{
public:
	class UExpandableArea*                        Area;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpanded;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExpandableArea_Group_OnExpansionChanged) == 0x000008, "Wrong alignment on ExpandableArea_Group_OnExpansionChanged");
static_assert(sizeof(ExpandableArea_Group_OnExpansionChanged) == 0x000010, "Wrong size on ExpandableArea_Group_OnExpansionChanged");
static_assert(offsetof(ExpandableArea_Group_OnExpansionChanged, Area) == 0x000000, "Member 'ExpandableArea_Group_OnExpansionChanged::Area' has a wrong offset!");
static_assert(offsetof(ExpandableArea_Group_OnExpansionChanged, bIsExpanded) == 0x000008, "Member 'ExpandableArea_Group_OnExpansionChanged::bIsExpanded' has a wrong offset!");

// Function OrionUI.HUDAlertWidgetBase.OnPlay
// 0x0008 (0x0008 - 0x0000)
struct HUDAlertWidgetBase_OnPlay final
{
public:
	const class UHUDAlertAsset*                   InAlertToShow;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDAlertWidgetBase_OnPlay) == 0x000008, "Wrong alignment on HUDAlertWidgetBase_OnPlay");
static_assert(sizeof(HUDAlertWidgetBase_OnPlay) == 0x000008, "Wrong size on HUDAlertWidgetBase_OnPlay");
static_assert(offsetof(HUDAlertWidgetBase_OnPlay, InAlertToShow) == 0x000000, "Member 'HUDAlertWidgetBase_OnPlay::InAlertToShow' has a wrong offset!");

// Function OrionUI.OrionListView.DynamicHandleItemClicked
// 0x0008 (0x0008 - 0x0000)
struct OrionListView_DynamicHandleItemClicked final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionListView_DynamicHandleItemClicked) == 0x000008, "Wrong alignment on OrionListView_DynamicHandleItemClicked");
static_assert(sizeof(OrionListView_DynamicHandleItemClicked) == 0x000008, "Wrong size on OrionListView_DynamicHandleItemClicked");
static_assert(offsetof(OrionListView_DynamicHandleItemClicked, Widget) == 0x000000, "Member 'OrionListView_DynamicHandleItemClicked::Widget' has a wrong offset!");

// Function OrionUI.OrionListView.DynamicHandleItemHovered
// 0x0010 (0x0010 - 0x0000)
struct OrionListView_DynamicHandleItemHovered final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionListView_DynamicHandleItemHovered) == 0x000008, "Wrong alignment on OrionListView_DynamicHandleItemHovered");
static_assert(sizeof(OrionListView_DynamicHandleItemHovered) == 0x000010, "Wrong size on OrionListView_DynamicHandleItemHovered");
static_assert(offsetof(OrionListView_DynamicHandleItemHovered, Widget) == 0x000000, "Member 'OrionListView_DynamicHandleItemHovered::Widget' has a wrong offset!");
static_assert(offsetof(OrionListView_DynamicHandleItemHovered, bIsHovered) == 0x000008, "Member 'OrionListView_DynamicHandleItemHovered::bIsHovered' has a wrong offset!");

// Function OrionUI.MatchmakingSearchWidget.OnFrontEndTabChanged
// 0x0008 (0x0008 - 0x0000)
struct MatchmakingSearchWidget_OnFrontEndTabChanged final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingSearchWidget_OnFrontEndTabChanged) == 0x000004, "Wrong alignment on MatchmakingSearchWidget_OnFrontEndTabChanged");
static_assert(sizeof(MatchmakingSearchWidget_OnFrontEndTabChanged) == 0x000008, "Wrong size on MatchmakingSearchWidget_OnFrontEndTabChanged");
static_assert(offsetof(MatchmakingSearchWidget_OnFrontEndTabChanged, TabId) == 0x000000, "Member 'MatchmakingSearchWidget_OnFrontEndTabChanged::TabId' has a wrong offset!");

// Function OrionUI.MatchmakingSearchWidget.OnHoveredChanged
// 0x0001 (0x0001 - 0x0000)
struct MatchmakingSearchWidget_OnHoveredChanged final
{
public:
	bool                                          bIsHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingSearchWidget_OnHoveredChanged) == 0x000001, "Wrong alignment on MatchmakingSearchWidget_OnHoveredChanged");
static_assert(sizeof(MatchmakingSearchWidget_OnHoveredChanged) == 0x000001, "Wrong size on MatchmakingSearchWidget_OnHoveredChanged");
static_assert(offsetof(MatchmakingSearchWidget_OnHoveredChanged, bIsHovered) == 0x000000, "Member 'MatchmakingSearchWidget_OnHoveredChanged::bIsHovered' has a wrong offset!");

// Function OrionUI.OrionTimerWidget.StartTimer
// 0x0004 (0x0004 - 0x0000)
struct OrionTimerWidget_StartTimer final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTimerWidget_StartTimer) == 0x000004, "Wrong alignment on OrionTimerWidget_StartTimer");
static_assert(sizeof(OrionTimerWidget_StartTimer) == 0x000004, "Wrong size on OrionTimerWidget_StartTimer");
static_assert(offsetof(OrionTimerWidget_StartTimer, Seconds) == 0x000000, "Member 'OrionTimerWidget_StartTimer::Seconds' has a wrong offset!");

// Function OrionUI.OrionAbilityAmmoTimer.OnTimerEnded
// 0x0008 (0x0008 - 0x0000)
struct OrionAbilityAmmoTimer_OnTimerEnded final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityAmmoTimer_OnTimerEnded) == 0x000004, "Wrong alignment on OrionAbilityAmmoTimer_OnTimerEnded");
static_assert(sizeof(OrionAbilityAmmoTimer_OnTimerEnded) == 0x000008, "Wrong size on OrionAbilityAmmoTimer_OnTimerEnded");
static_assert(offsetof(OrionAbilityAmmoTimer_OnTimerEnded, TimeRemaining) == 0x000000, "Member 'OrionAbilityAmmoTimer_OnTimerEnded::TimeRemaining' has a wrong offset!");
static_assert(offsetof(OrionAbilityAmmoTimer_OnTimerEnded, TotalDuration) == 0x000004, "Member 'OrionAbilityAmmoTimer_OnTimerEnded::TotalDuration' has a wrong offset!");

// Function OrionUI.OrionAbilityAmmoTimer.OnTimerStarted
// 0x0008 (0x0008 - 0x0000)
struct OrionAbilityAmmoTimer_OnTimerStarted final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityAmmoTimer_OnTimerStarted) == 0x000004, "Wrong alignment on OrionAbilityAmmoTimer_OnTimerStarted");
static_assert(sizeof(OrionAbilityAmmoTimer_OnTimerStarted) == 0x000008, "Wrong size on OrionAbilityAmmoTimer_OnTimerStarted");
static_assert(offsetof(OrionAbilityAmmoTimer_OnTimerStarted, TimeRemaining) == 0x000000, "Member 'OrionAbilityAmmoTimer_OnTimerStarted::TimeRemaining' has a wrong offset!");
static_assert(offsetof(OrionAbilityAmmoTimer_OnTimerStarted, TotalDuration) == 0x000004, "Member 'OrionAbilityAmmoTimer_OnTimerStarted::TotalDuration' has a wrong offset!");

// Function OrionUI.OrionAbilityConfirmWidget.HideConfirmWidget
// 0x0001 (0x0001 - 0x0000)
struct OrionAbilityConfirmWidget_HideConfirmWidget final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityConfirmWidget_HideConfirmWidget) == 0x000001, "Wrong alignment on OrionAbilityConfirmWidget_HideConfirmWidget");
static_assert(sizeof(OrionAbilityConfirmWidget_HideConfirmWidget) == 0x000001, "Wrong size on OrionAbilityConfirmWidget_HideConfirmWidget");
static_assert(offsetof(OrionAbilityConfirmWidget_HideConfirmWidget, bImmediate) == 0x000000, "Member 'OrionAbilityConfirmWidget_HideConfirmWidget::bImmediate' has a wrong offset!");

// Function OrionUI.OrionAbilityConfirmWidget.ShowConfirmWidget
// 0x0001 (0x0001 - 0x0000)
struct OrionAbilityConfirmWidget_ShowConfirmWidget final
{
public:
	bool                                          bAllowConfirm;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityConfirmWidget_ShowConfirmWidget) == 0x000001, "Wrong alignment on OrionAbilityConfirmWidget_ShowConfirmWidget");
static_assert(sizeof(OrionAbilityConfirmWidget_ShowConfirmWidget) == 0x000001, "Wrong size on OrionAbilityConfirmWidget_ShowConfirmWidget");
static_assert(offsetof(OrionAbilityConfirmWidget_ShowConfirmWidget, bAllowConfirm) == 0x000000, "Member 'OrionAbilityConfirmWidget_ShowConfirmWidget::bAllowConfirm' has a wrong offset!");

// Function OrionUI.OrionXPWidget.SetPrimaryColor
// 0x0010 (0x0010 - 0x0000)
struct OrionXPWidget_SetPrimaryColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionXPWidget_SetPrimaryColor) == 0x000004, "Wrong alignment on OrionXPWidget_SetPrimaryColor");
static_assert(sizeof(OrionXPWidget_SetPrimaryColor) == 0x000010, "Wrong size on OrionXPWidget_SetPrimaryColor");
static_assert(offsetof(OrionXPWidget_SetPrimaryColor, InColor) == 0x000000, "Member 'OrionXPWidget_SetPrimaryColor::InColor' has a wrong offset!");

// Function OrionUI.OrionAbilityLayoutWidget.OnSpectatorWatchedHeroChange
// 0x0008 (0x0008 - 0x0000)
struct OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange final
{
public:
	EOrionTeam                                    HeroTeam;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange) == 0x000004, "Wrong alignment on OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange");
static_assert(sizeof(OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange) == 0x000008, "Wrong size on OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange");
static_assert(offsetof(OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange, HeroTeam) == 0x000000, "Member 'OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange::HeroTeam' has a wrong offset!");
static_assert(offsetof(OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange, HeroIndex) == 0x000004, "Member 'OrionAbilityLayoutWidget_OnSpectatorWatchedHeroChange::HeroIndex' has a wrong offset!");

// Function OrionUI.OrionAbilityPipsWidget.OnNumFilledPipsChanged
// 0x0004 (0x0004 - 0x0000)
struct OrionAbilityPipsWidget_OnNumFilledPipsChanged final
{
public:
	int32                                         NumFilledPips;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityPipsWidget_OnNumFilledPipsChanged) == 0x000004, "Wrong alignment on OrionAbilityPipsWidget_OnNumFilledPipsChanged");
static_assert(sizeof(OrionAbilityPipsWidget_OnNumFilledPipsChanged) == 0x000004, "Wrong size on OrionAbilityPipsWidget_OnNumFilledPipsChanged");
static_assert(offsetof(OrionAbilityPipsWidget_OnNumFilledPipsChanged, NumFilledPips) == 0x000000, "Member 'OrionAbilityPipsWidget_OnNumFilledPipsChanged::NumFilledPips' has a wrong offset!");

// Function OrionUI.OrionAbilityPipsWidget.OnPipDisplayTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionAbilityPipsWidget_OnPipDisplayTypeChanged final
{
public:
	EAbilityPipDisplayType                        DisplayType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityPipsWidget_OnPipDisplayTypeChanged) == 0x000001, "Wrong alignment on OrionAbilityPipsWidget_OnPipDisplayTypeChanged");
static_assert(sizeof(OrionAbilityPipsWidget_OnPipDisplayTypeChanged) == 0x000001, "Wrong size on OrionAbilityPipsWidget_OnPipDisplayTypeChanged");
static_assert(offsetof(OrionAbilityPipsWidget_OnPipDisplayTypeChanged, DisplayType) == 0x000000, "Member 'OrionAbilityPipsWidget_OnPipDisplayTypeChanged::DisplayType' has a wrong offset!");

// Function OrionUI.OrionAbilityPipsWidget.GetCorrectMIDValue
// 0x0008 (0x0008 - 0x0000)
struct OrionAbilityPipsWidget_GetCorrectMIDValue final
{
public:
	int32                                         InNumOfPips;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityPipsWidget_GetCorrectMIDValue) == 0x000004, "Wrong alignment on OrionAbilityPipsWidget_GetCorrectMIDValue");
static_assert(sizeof(OrionAbilityPipsWidget_GetCorrectMIDValue) == 0x000008, "Wrong size on OrionAbilityPipsWidget_GetCorrectMIDValue");
static_assert(offsetof(OrionAbilityPipsWidget_GetCorrectMIDValue, InNumOfPips) == 0x000000, "Member 'OrionAbilityPipsWidget_GetCorrectMIDValue::InNumOfPips' has a wrong offset!");
static_assert(offsetof(OrionAbilityPipsWidget_GetCorrectMIDValue, ReturnValue) == 0x000004, "Member 'OrionAbilityPipsWidget_GetCorrectMIDValue::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionURLs.GetURLs
// 0x0008 (0x0008 - 0x0000)
struct OrionURLs_GetURLs final
{
public:
	class UOrionURLs*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionURLs_GetURLs) == 0x000008, "Wrong alignment on OrionURLs_GetURLs");
static_assert(sizeof(OrionURLs_GetURLs) == 0x000008, "Wrong size on OrionURLs_GetURLs");
static_assert(offsetof(OrionURLs_GetURLs, ReturnValue) == 0x000000, "Member 'OrionURLs_GetURLs::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionURLs.GetCustomerServiceURLInLanguage
// 0x0030 (0x0030 - 0x0000)
struct OrionURLs_GetCustomerServiceURLInLanguage final
{
public:
	class FString                                 LanguageCode;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryCode;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionURLs_GetCustomerServiceURLInLanguage) == 0x000008, "Wrong alignment on OrionURLs_GetCustomerServiceURLInLanguage");
static_assert(sizeof(OrionURLs_GetCustomerServiceURLInLanguage) == 0x000030, "Wrong size on OrionURLs_GetCustomerServiceURLInLanguage");
static_assert(offsetof(OrionURLs_GetCustomerServiceURLInLanguage, LanguageCode) == 0x000000, "Member 'OrionURLs_GetCustomerServiceURLInLanguage::LanguageCode' has a wrong offset!");
static_assert(offsetof(OrionURLs_GetCustomerServiceURLInLanguage, CountryCode) == 0x000010, "Member 'OrionURLs_GetCustomerServiceURLInLanguage::CountryCode' has a wrong offset!");
static_assert(offsetof(OrionURLs_GetCustomerServiceURLInLanguage, ReturnValue) == 0x000020, "Member 'OrionURLs_GetCustomerServiceURLInLanguage::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.DynamicHandleOnMediaOpened
// 0x0010 (0x0010 - 0x0000)
struct OrionVideoPlayerWidget_DynamicHandleOnMediaOpened final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoPlayerWidget_DynamicHandleOnMediaOpened) == 0x000008, "Wrong alignment on OrionVideoPlayerWidget_DynamicHandleOnMediaOpened");
static_assert(sizeof(OrionVideoPlayerWidget_DynamicHandleOnMediaOpened) == 0x000010, "Wrong size on OrionVideoPlayerWidget_DynamicHandleOnMediaOpened");
static_assert(offsetof(OrionVideoPlayerWidget_DynamicHandleOnMediaOpened, OpenedUrl) == 0x000000, "Member 'OrionVideoPlayerWidget_DynamicHandleOnMediaOpened::OpenedUrl' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.DynamicHandleOnOpenMediaFailed
// 0x0010 (0x0010 - 0x0000)
struct OrionVideoPlayerWidget_DynamicHandleOnOpenMediaFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoPlayerWidget_DynamicHandleOnOpenMediaFailed) == 0x000008, "Wrong alignment on OrionVideoPlayerWidget_DynamicHandleOnOpenMediaFailed");
static_assert(sizeof(OrionVideoPlayerWidget_DynamicHandleOnOpenMediaFailed) == 0x000010, "Wrong size on OrionVideoPlayerWidget_DynamicHandleOnOpenMediaFailed");
static_assert(offsetof(OrionVideoPlayerWidget_DynamicHandleOnOpenMediaFailed, FailedUrl) == 0x000000, "Member 'OrionVideoPlayerWidget_DynamicHandleOnOpenMediaFailed::FailedUrl' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.DynamicHandleVideoMouseButtonDown
// 0x0160 (0x0160 - 0x0000)
struct OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown) == 0x000008, "Wrong alignment on OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown");
static_assert(sizeof(OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown) == 0x000160, "Wrong size on OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown");
static_assert(offsetof(OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown, Geometry) == 0x000000, "Member 'OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown::Geometry' has a wrong offset!");
static_assert(offsetof(OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown, MouseEvent) == 0x000038, "Member 'OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'OrionVideoPlayerWidget_DynamicHandleVideoMouseButtonDown::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.LoadFromVideoID
// 0x0010 (0x0010 - 0x0000)
struct OrionVideoPlayerWidget_LoadFromVideoID final
{
public:
	class FName                                   VideoID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionVideoPlayerWidget_LoadFromVideoID) == 0x000004, "Wrong alignment on OrionVideoPlayerWidget_LoadFromVideoID");
static_assert(sizeof(OrionVideoPlayerWidget_LoadFromVideoID) == 0x000010, "Wrong size on OrionVideoPlayerWidget_LoadFromVideoID");
static_assert(offsetof(OrionVideoPlayerWidget_LoadFromVideoID, VideoID) == 0x000000, "Member 'OrionVideoPlayerWidget_LoadFromVideoID::VideoID' has a wrong offset!");
static_assert(offsetof(OrionVideoPlayerWidget_LoadFromVideoID, ReturnValue) == 0x000008, "Member 'OrionVideoPlayerWidget_LoadFromVideoID::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.OnVideoTitlesCreated
// 0x0008 (0x0008 - 0x0000)
struct OrionVideoPlayerWidget_OnVideoTitlesCreated final
{
public:
	class UOrionVideoTitles*                      VideoTitlesWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoPlayerWidget_OnVideoTitlesCreated) == 0x000008, "Wrong alignment on OrionVideoPlayerWidget_OnVideoTitlesCreated");
static_assert(sizeof(OrionVideoPlayerWidget_OnVideoTitlesCreated) == 0x000008, "Wrong size on OrionVideoPlayerWidget_OnVideoTitlesCreated");
static_assert(offsetof(OrionVideoPlayerWidget_OnVideoTitlesCreated, VideoTitlesWidget) == 0x000000, "Member 'OrionVideoPlayerWidget_OnVideoTitlesCreated::VideoTitlesWidget' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.Start
// 0x0001 (0x0001 - 0x0000)
struct OrionVideoPlayerWidget_Start final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoPlayerWidget_Start) == 0x000001, "Wrong alignment on OrionVideoPlayerWidget_Start");
static_assert(sizeof(OrionVideoPlayerWidget_Start) == 0x000001, "Wrong size on OrionVideoPlayerWidget_Start");
static_assert(offsetof(OrionVideoPlayerWidget_Start, ReturnValue) == 0x000000, "Member 'OrionVideoPlayerWidget_Start::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.StreamFromVideoURL
// 0x0018 (0x0018 - 0x0000)
struct OrionVideoPlayerWidget_StreamFromVideoURL final
{
public:
	class FString                                 VideoURL;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionVideoPlayerWidget_StreamFromVideoURL) == 0x000008, "Wrong alignment on OrionVideoPlayerWidget_StreamFromVideoURL");
static_assert(sizeof(OrionVideoPlayerWidget_StreamFromVideoURL) == 0x000018, "Wrong size on OrionVideoPlayerWidget_StreamFromVideoURL");
static_assert(offsetof(OrionVideoPlayerWidget_StreamFromVideoURL, VideoURL) == 0x000000, "Member 'OrionVideoPlayerWidget_StreamFromVideoURL::VideoURL' has a wrong offset!");
static_assert(offsetof(OrionVideoPlayerWidget_StreamFromVideoURL, ReturnValue) == 0x000010, "Member 'OrionVideoPlayerWidget_StreamFromVideoURL::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct OrionVideoPlayerWidget_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoPlayerWidget_IsPlaying) == 0x000001, "Wrong alignment on OrionVideoPlayerWidget_IsPlaying");
static_assert(sizeof(OrionVideoPlayerWidget_IsPlaying) == 0x000001, "Wrong size on OrionVideoPlayerWidget_IsPlaying");
static_assert(offsetof(OrionVideoPlayerWidget_IsPlaying, ReturnValue) == 0x000000, "Member 'OrionVideoPlayerWidget_IsPlaying::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionVideoPlayerWidget.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct OrionVideoPlayerWidget_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoPlayerWidget_IsRunning) == 0x000001, "Wrong alignment on OrionVideoPlayerWidget_IsRunning");
static_assert(sizeof(OrionVideoPlayerWidget_IsRunning) == 0x000001, "Wrong size on OrionVideoPlayerWidget_IsRunning");
static_assert(offsetof(OrionVideoPlayerWidget_IsRunning, ReturnValue) == 0x000000, "Member 'OrionVideoPlayerWidget_IsRunning::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionAbilityUpgradeRowWidget.GetInputID
// 0x0001 (0x0001 - 0x0000)
struct OrionAbilityUpgradeRowWidget_GetInputID final
{
public:
	EOrionAbilityBinding                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityUpgradeRowWidget_GetInputID) == 0x000001, "Wrong alignment on OrionAbilityUpgradeRowWidget_GetInputID");
static_assert(sizeof(OrionAbilityUpgradeRowWidget_GetInputID) == 0x000001, "Wrong size on OrionAbilityUpgradeRowWidget_GetInputID");
static_assert(offsetof(OrionAbilityUpgradeRowWidget_GetInputID, ReturnValue) == 0x000000, "Member 'OrionAbilityUpgradeRowWidget_GetInputID::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionMiscAbilityWidget.ShowAbilityWidget
// 0x0001 (0x0001 - 0x0000)
struct OrionMiscAbilityWidget_ShowAbilityWidget final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMiscAbilityWidget_ShowAbilityWidget) == 0x000001, "Wrong alignment on OrionMiscAbilityWidget_ShowAbilityWidget");
static_assert(sizeof(OrionMiscAbilityWidget_ShowAbilityWidget) == 0x000001, "Wrong size on OrionMiscAbilityWidget_ShowAbilityWidget");
static_assert(offsetof(OrionMiscAbilityWidget_ShowAbilityWidget, bImmediate) == 0x000000, "Member 'OrionMiscAbilityWidget_ShowAbilityWidget::bImmediate' has a wrong offset!");

// Function OrionUI.OrionAbilityWidget.OnAbilityLevelUp
// 0x0010 (0x0010 - 0x0000)
struct OrionAbilityWidget_OnAbilityLevelUp final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldLevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStillUpgrade;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionAbilityWidget_OnAbilityLevelUp) == 0x000004, "Wrong alignment on OrionAbilityWidget_OnAbilityLevelUp");
static_assert(sizeof(OrionAbilityWidget_OnAbilityLevelUp) == 0x000010, "Wrong size on OrionAbilityWidget_OnAbilityLevelUp");
static_assert(offsetof(OrionAbilityWidget_OnAbilityLevelUp, NewLevel) == 0x000000, "Member 'OrionAbilityWidget_OnAbilityLevelUp::NewLevel' has a wrong offset!");
static_assert(offsetof(OrionAbilityWidget_OnAbilityLevelUp, OldLevel) == 0x000004, "Member 'OrionAbilityWidget_OnAbilityLevelUp::OldLevel' has a wrong offset!");
static_assert(offsetof(OrionAbilityWidget_OnAbilityLevelUp, LevelMax) == 0x000008, "Member 'OrionAbilityWidget_OnAbilityLevelUp::LevelMax' has a wrong offset!");
static_assert(offsetof(OrionAbilityWidget_OnAbilityLevelUp, bCanStillUpgrade) == 0x00000C, "Member 'OrionAbilityWidget_OnAbilityLevelUp::bCanStillUpgrade' has a wrong offset!");

// Function OrionUI.OrionAbilityWidget.ShowUpgrades
// 0x0008 (0x0008 - 0x0000)
struct OrionAbilityWidget_ShowUpgrades final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityWidget_ShowUpgrades) == 0x000004, "Wrong alignment on OrionAbilityWidget_ShowUpgrades");
static_assert(sizeof(OrionAbilityWidget_ShowUpgrades) == 0x000008, "Wrong size on OrionAbilityWidget_ShowUpgrades");
static_assert(offsetof(OrionAbilityWidget_ShowUpgrades, CurrentLevel) == 0x000000, "Member 'OrionAbilityWidget_ShowUpgrades::CurrentLevel' has a wrong offset!");
static_assert(offsetof(OrionAbilityWidget_ShowUpgrades, MaxLevel) == 0x000004, "Member 'OrionAbilityWidget_ShowUpgrades::MaxLevel' has a wrong offset!");

// Function OrionUI.OrionAbilityWidget.StartCooldown
// 0x0001 (0x0001 - 0x0000)
struct OrionAbilityWidget_StartCooldown final
{
public:
	bool                                          bIsSpecial;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAbilityWidget_StartCooldown) == 0x000001, "Wrong alignment on OrionAbilityWidget_StartCooldown");
static_assert(sizeof(OrionAbilityWidget_StartCooldown) == 0x000001, "Wrong size on OrionAbilityWidget_StartCooldown");
static_assert(offsetof(OrionAbilityWidget_StartCooldown, bIsSpecial) == 0x000000, "Member 'OrionAbilityWidget_StartCooldown::bIsSpecial' has a wrong offset!");

// Function OrionUI.OrionArcadeHeroBuff.ShowWidget
// 0x0008 (0x0008 - 0x0000)
struct OrionArcadeHeroBuff_ShowWidget final
{
public:
	TSubclassOf<class UGameplayEffect>            InGameplayEffect;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeHeroBuff_ShowWidget) == 0x000008, "Wrong alignment on OrionArcadeHeroBuff_ShowWidget");
static_assert(sizeof(OrionArcadeHeroBuff_ShowWidget) == 0x000008, "Wrong size on OrionArcadeHeroBuff_ShowWidget");
static_assert(offsetof(OrionArcadeHeroBuff_ShowWidget, InGameplayEffect) == 0x000000, "Member 'OrionArcadeHeroBuff_ShowWidget::InGameplayEffect' has a wrong offset!");

// Function OrionUI.ArcadeHandCard.GetHandIndex
// 0x0004 (0x0004 - 0x0000)
struct ArcadeHandCard_GetHandIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeHandCard_GetHandIndex) == 0x000004, "Wrong alignment on ArcadeHandCard_GetHandIndex");
static_assert(sizeof(ArcadeHandCard_GetHandIndex) == 0x000004, "Wrong size on ArcadeHandCard_GetHandIndex");
static_assert(offsetof(ArcadeHandCard_GetHandIndex, ReturnValue) == 0x000000, "Member 'ArcadeHandCard_GetHandIndex::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionArcadeCardSelection.OnCardSelected
// 0x0008 (0x0008 - 0x0000)
struct OrionArcadeCardSelection_OnCardSelected final
{
public:
	class UArcadeHandCard*                        HandCardWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeCardSelection_OnCardSelected) == 0x000008, "Wrong alignment on OrionArcadeCardSelection_OnCardSelected");
static_assert(sizeof(OrionArcadeCardSelection_OnCardSelected) == 0x000008, "Wrong size on OrionArcadeCardSelection_OnCardSelected");
static_assert(offsetof(OrionArcadeCardSelection_OnCardSelected, HandCardWidget) == 0x000000, "Member 'OrionArcadeCardSelection_OnCardSelected::HandCardWidget' has a wrong offset!");

// Function OrionUI.OrionScoreboardPlayerRow.OnIsFrozenChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionScoreboardPlayerRow_OnIsFrozenChanged final
{
public:
	bool                                          bIsFrozen;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardPlayerRow_OnIsFrozenChanged) == 0x000001, "Wrong alignment on OrionScoreboardPlayerRow_OnIsFrozenChanged");
static_assert(sizeof(OrionScoreboardPlayerRow_OnIsFrozenChanged) == 0x000001, "Wrong size on OrionScoreboardPlayerRow_OnIsFrozenChanged");
static_assert(offsetof(OrionScoreboardPlayerRow_OnIsFrozenChanged, bIsFrozen) == 0x000000, "Member 'OrionScoreboardPlayerRow_OnIsFrozenChanged::bIsFrozen' has a wrong offset!");

// Function OrionUI.OrionScoreboardPlayerRow.OnPlayerInfoSet
// 0x0001 (0x0001 - 0x0000)
struct OrionScoreboardPlayerRow_OnPlayerInfoSet final
{
public:
	bool                                          bIsLocalPlayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardPlayerRow_OnPlayerInfoSet) == 0x000001, "Wrong alignment on OrionScoreboardPlayerRow_OnPlayerInfoSet");
static_assert(sizeof(OrionScoreboardPlayerRow_OnPlayerInfoSet) == 0x000001, "Wrong size on OrionScoreboardPlayerRow_OnPlayerInfoSet");
static_assert(offsetof(OrionScoreboardPlayerRow_OnPlayerInfoSet, bIsLocalPlayer) == 0x000000, "Member 'OrionScoreboardPlayerRow_OnPlayerInfoSet::bIsLocalPlayer' has a wrong offset!");

// Function OrionUI.OrionScoreboardPlayerRow.OnSetBotInfo
// 0x0002 (0x0002 - 0x0000)
struct OrionScoreboardPlayerRow_OnSetBotInfo final
{
public:
	bool                                          bIsBot;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIBotDifficulty                              BotDifficulty;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardPlayerRow_OnSetBotInfo) == 0x000001, "Wrong alignment on OrionScoreboardPlayerRow_OnSetBotInfo");
static_assert(sizeof(OrionScoreboardPlayerRow_OnSetBotInfo) == 0x000002, "Wrong size on OrionScoreboardPlayerRow_OnSetBotInfo");
static_assert(offsetof(OrionScoreboardPlayerRow_OnSetBotInfo, bIsBot) == 0x000000, "Member 'OrionScoreboardPlayerRow_OnSetBotInfo::bIsBot' has a wrong offset!");
static_assert(offsetof(OrionScoreboardPlayerRow_OnSetBotInfo, BotDifficulty) == 0x000001, "Member 'OrionScoreboardPlayerRow_OnSetBotInfo::BotDifficulty' has a wrong offset!");

// Function OrionUI.OrionScoreboardPlayerRow.OnSetPositionInfo
// 0x0002 (0x0002 - 0x0000)
struct OrionScoreboardPlayerRow_OnSetPositionInfo final
{
public:
	bool                                          bIsFirst;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLast;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardPlayerRow_OnSetPositionInfo) == 0x000001, "Wrong alignment on OrionScoreboardPlayerRow_OnSetPositionInfo");
static_assert(sizeof(OrionScoreboardPlayerRow_OnSetPositionInfo) == 0x000002, "Wrong size on OrionScoreboardPlayerRow_OnSetPositionInfo");
static_assert(offsetof(OrionScoreboardPlayerRow_OnSetPositionInfo, bIsFirst) == 0x000000, "Member 'OrionScoreboardPlayerRow_OnSetPositionInfo::bIsFirst' has a wrong offset!");
static_assert(offsetof(OrionScoreboardPlayerRow_OnSetPositionInfo, bIsLast) == 0x000001, "Member 'OrionScoreboardPlayerRow_OnSetPositionInfo::bIsLast' has a wrong offset!");

// Function OrionUI.OrionArcadeReadyScreen.SetKills
// 0x0008 (0x0008 - 0x0000)
struct OrionArcadeReadyScreen_SetKills final
{
public:
	EOrionTeam                                    TeamNum;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Kills;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeReadyScreen_SetKills) == 0x000004, "Wrong alignment on OrionArcadeReadyScreen_SetKills");
static_assert(sizeof(OrionArcadeReadyScreen_SetKills) == 0x000008, "Wrong size on OrionArcadeReadyScreen_SetKills");
static_assert(offsetof(OrionArcadeReadyScreen_SetKills, TeamNum) == 0x000000, "Member 'OrionArcadeReadyScreen_SetKills::TeamNum' has a wrong offset!");
static_assert(offsetof(OrionArcadeReadyScreen_SetKills, Kills) == 0x000004, "Member 'OrionArcadeReadyScreen_SetKills::Kills' has a wrong offset!");

// Function OrionUI.OrionArcadeReadyScreen.SetVictorPointMargin
// 0x0004 (0x0004 - 0x0000)
struct OrionArcadeReadyScreen_SetVictorPointMargin final
{
public:
	int32                                         VPMargin;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeReadyScreen_SetVictorPointMargin) == 0x000004, "Wrong alignment on OrionArcadeReadyScreen_SetVictorPointMargin");
static_assert(sizeof(OrionArcadeReadyScreen_SetVictorPointMargin) == 0x000004, "Wrong size on OrionArcadeReadyScreen_SetVictorPointMargin");
static_assert(offsetof(OrionArcadeReadyScreen_SetVictorPointMargin, VPMargin) == 0x000000, "Member 'OrionArcadeReadyScreen_SetVictorPointMargin::VPMargin' has a wrong offset!");

// Function OrionUI.OrionArcadeRestartScreen.OnRestartPressed
// 0x0001 (0x0001 - 0x0000)
struct OrionArcadeRestartScreen_OnRestartPressed final
{
public:
	bool                                          bWithBuff;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeRestartScreen_OnRestartPressed) == 0x000001, "Wrong alignment on OrionArcadeRestartScreen_OnRestartPressed");
static_assert(sizeof(OrionArcadeRestartScreen_OnRestartPressed) == 0x000001, "Wrong size on OrionArcadeRestartScreen_OnRestartPressed");
static_assert(offsetof(OrionArcadeRestartScreen_OnRestartPressed, bWithBuff) == 0x000000, "Member 'OrionArcadeRestartScreen_OnRestartPressed::bWithBuff' has a wrong offset!");

// Function OrionUI.OrionArcadeRoundPrompt.OnRoundStateChange
// 0x0018 (0x0018 - 0x0000)
struct OrionArcadeRoundPrompt_OnRoundStateChange final
{
public:
	struct FArcadeRoundState                      NewState;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeRoundPrompt_OnRoundStateChange) == 0x000004, "Wrong alignment on OrionArcadeRoundPrompt_OnRoundStateChange");
static_assert(sizeof(OrionArcadeRoundPrompt_OnRoundStateChange) == 0x000018, "Wrong size on OrionArcadeRoundPrompt_OnRoundStateChange");
static_assert(offsetof(OrionArcadeRoundPrompt_OnRoundStateChange, NewState) == 0x000000, "Member 'OrionArcadeRoundPrompt_OnRoundStateChange::NewState' has a wrong offset!");

// Function OrionUI.OrionArcadeRoundPrompt.RestartScreen_OnRestart
// 0x0001 (0x0001 - 0x0000)
struct OrionArcadeRoundPrompt_RestartScreen_OnRestart final
{
public:
	bool                                          bWithBuff;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeRoundPrompt_RestartScreen_OnRestart) == 0x000001, "Wrong alignment on OrionArcadeRoundPrompt_RestartScreen_OnRestart");
static_assert(sizeof(OrionArcadeRoundPrompt_RestartScreen_OnRestart) == 0x000001, "Wrong size on OrionArcadeRoundPrompt_RestartScreen_OnRestart");
static_assert(offsetof(OrionArcadeRoundPrompt_RestartScreen_OnRestart, bWithBuff) == 0x000000, "Member 'OrionArcadeRoundPrompt_RestartScreen_OnRestart::bWithBuff' has a wrong offset!");

// Function OrionUI.OrionArcadeRoundPrompt.ShowPrompt
// 0x0008 (0x0008 - 0x0000)
struct OrionArcadeRoundPrompt_ShowPrompt final
{
public:
	class UWidget*                                ScreenToShow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeRoundPrompt_ShowPrompt) == 0x000008, "Wrong alignment on OrionArcadeRoundPrompt_ShowPrompt");
static_assert(sizeof(OrionArcadeRoundPrompt_ShowPrompt) == 0x000008, "Wrong size on OrionArcadeRoundPrompt_ShowPrompt");
static_assert(offsetof(OrionArcadeRoundPrompt_ShowPrompt, ScreenToShow) == 0x000000, "Member 'OrionArcadeRoundPrompt_ShowPrompt::ScreenToShow' has a wrong offset!");

// Function OrionUI.OrionScoreboardRow.OnDisconnectedChange
// 0x0001 (0x0001 - 0x0000)
struct OrionScoreboardRow_OnDisconnectedChange final
{
public:
	bool                                          bIsDisconnected;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardRow_OnDisconnectedChange) == 0x000001, "Wrong alignment on OrionScoreboardRow_OnDisconnectedChange");
static_assert(sizeof(OrionScoreboardRow_OnDisconnectedChange) == 0x000001, "Wrong size on OrionScoreboardRow_OnDisconnectedChange");
static_assert(offsetof(OrionScoreboardRow_OnDisconnectedChange, bIsDisconnected) == 0x000000, "Member 'OrionScoreboardRow_OnDisconnectedChange::bIsDisconnected' has a wrong offset!");

// Function OrionUI.OrionScoreboardRow.UpdateIsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct OrionScoreboardRow_UpdateIsLocalPlayer final
{
public:
	bool                                          bIsLocalPlayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardRow_UpdateIsLocalPlayer) == 0x000001, "Wrong alignment on OrionScoreboardRow_UpdateIsLocalPlayer");
static_assert(sizeof(OrionScoreboardRow_UpdateIsLocalPlayer) == 0x000001, "Wrong size on OrionScoreboardRow_UpdateIsLocalPlayer");
static_assert(offsetof(OrionScoreboardRow_UpdateIsLocalPlayer, bIsLocalPlayer) == 0x000000, "Member 'OrionScoreboardRow_UpdateIsLocalPlayer::bIsLocalPlayer' has a wrong offset!");

// Function OrionUI.OrionScoreboardRow.UpdateVisibleToLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct OrionScoreboardRow_UpdateVisibleToLocalPlayer final
{
public:
	bool                                          bVisibleToLocalPlayer;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardRow_UpdateVisibleToLocalPlayer) == 0x000001, "Wrong alignment on OrionScoreboardRow_UpdateVisibleToLocalPlayer");
static_assert(sizeof(OrionScoreboardRow_UpdateVisibleToLocalPlayer) == 0x000001, "Wrong size on OrionScoreboardRow_UpdateVisibleToLocalPlayer");
static_assert(offsetof(OrionScoreboardRow_UpdateVisibleToLocalPlayer, bVisibleToLocalPlayer) == 0x000000, "Member 'OrionScoreboardRow_UpdateVisibleToLocalPlayer::bVisibleToLocalPlayer' has a wrong offset!");

// Function OrionUI.OrionArcadeScoreboardRow.UpdateIsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct OrionArcadeScoreboardRow_UpdateIsLocalPlayer final
{
public:
	bool                                          bIsLocalPlayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeScoreboardRow_UpdateIsLocalPlayer) == 0x000001, "Wrong alignment on OrionArcadeScoreboardRow_UpdateIsLocalPlayer");
static_assert(sizeof(OrionArcadeScoreboardRow_UpdateIsLocalPlayer) == 0x000001, "Wrong size on OrionArcadeScoreboardRow_UpdateIsLocalPlayer");
static_assert(offsetof(OrionArcadeScoreboardRow_UpdateIsLocalPlayer, bIsLocalPlayer) == 0x000000, "Member 'OrionArcadeScoreboardRow_UpdateIsLocalPlayer::bIsLocalPlayer' has a wrong offset!");

// Function OrionUI.OrionArcadeScoreWidget.OnRoundStateUpdate
// 0x0018 (0x0018 - 0x0000)
struct OrionArcadeScoreWidget_OnRoundStateUpdate final
{
public:
	struct FArcadeRoundState                      NewRoundState;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeScoreWidget_OnRoundStateUpdate) == 0x000004, "Wrong alignment on OrionArcadeScoreWidget_OnRoundStateUpdate");
static_assert(sizeof(OrionArcadeScoreWidget_OnRoundStateUpdate) == 0x000018, "Wrong size on OrionArcadeScoreWidget_OnRoundStateUpdate");
static_assert(offsetof(OrionArcadeScoreWidget_OnRoundStateUpdate, NewRoundState) == 0x000000, "Member 'OrionArcadeScoreWidget_OnRoundStateUpdate::NewRoundState' has a wrong offset!");

// Function OrionUI.OrionArcadeVictoryMarginWidget.OnMarginUpdate
// 0x0004 (0x0004 - 0x0000)
struct OrionArcadeVictoryMarginWidget_OnMarginUpdate final
{
public:
	int32                                         Margin;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionArcadeVictoryMarginWidget_OnMarginUpdate) == 0x000004, "Wrong alignment on OrionArcadeVictoryMarginWidget_OnMarginUpdate");
static_assert(sizeof(OrionArcadeVictoryMarginWidget_OnMarginUpdate) == 0x000004, "Wrong size on OrionArcadeVictoryMarginWidget_OnMarginUpdate");
static_assert(offsetof(OrionArcadeVictoryMarginWidget_OnMarginUpdate, Margin) == 0x000000, "Member 'OrionArcadeVictoryMarginWidget_OnMarginUpdate::Margin' has a wrong offset!");

// Function OrionUI.OrionAsyncAction_ModalError.ShowModalError
// 0x0028 (0x0028 - 0x0000)
struct OrionAsyncAction_ModalError_ShowModalError final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ErrorMessage;                                      // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UOrionAsyncAction_ModalError*           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAsyncAction_ModalError_ShowModalError) == 0x000008, "Wrong alignment on OrionAsyncAction_ModalError_ShowModalError");
static_assert(sizeof(OrionAsyncAction_ModalError_ShowModalError) == 0x000028, "Wrong size on OrionAsyncAction_ModalError_ShowModalError");
static_assert(offsetof(OrionAsyncAction_ModalError_ShowModalError, InWorldContextObject) == 0x000000, "Member 'OrionAsyncAction_ModalError_ShowModalError::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ModalError_ShowModalError, ErrorMessage) == 0x000008, "Member 'OrionAsyncAction_ModalError_ShowModalError::ErrorMessage' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ModalError_ShowModalError, ReturnValue) == 0x000020, "Member 'OrionAsyncAction_ModalError_ShowModalError::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionAsyncAction_InteractiveNotification.ShowInteractiveNotification
// 0x00F0 (0x00F0 - 0x0000)
struct OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   BodyText;                                          // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   LeftButton;                                        // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   RightButton;                                       // 0x0050(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0068(0x0078)(Parm, NativeAccessSpecifierPublic)
	class FName                                   Identifier;                                        // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionAsyncAction_InteractiveNotification* ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification) == 0x000008, "Wrong alignment on OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification");
static_assert(sizeof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification) == 0x0000F0, "Wrong size on OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, Context) == 0x000000, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::Context' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, TitleText) == 0x000008, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::TitleText' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, BodyText) == 0x000020, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::BodyText' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, LeftButton) == 0x000038, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::LeftButton' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, RightButton) == 0x000050, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::RightButton' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, Brush) == 0x000068, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::Brush' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, Identifier) == 0x0000E0, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::Identifier' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification, ReturnValue) == 0x0000E8, "Member 'OrionAsyncAction_InteractiveNotification_ShowInteractiveNotification::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionAsyncAction_ShowConfirmation.ShowConfirmationDialog
// 0x0078 (0x0078 - 0x0000)
struct OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ConfirmButtonText;                                 // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DeclineButtonText;                                 // 0x0050(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InDisplayTime;                                     // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCancelButton;                                 // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOrionAsyncAction_ShowConfirmation*     ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog) == 0x000008, "Wrong alignment on OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog");
static_assert(sizeof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog) == 0x000078, "Wrong size on OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, InWorldContextObject) == 0x000000, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, Title) == 0x000008, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::Title' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, MESSAGE) == 0x000020, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::MESSAGE' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, ConfirmButtonText) == 0x000038, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::ConfirmButtonText' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, DeclineButtonText) == 0x000050, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::DeclineButtonText' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, InDisplayTime) == 0x000068, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::InDisplayTime' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, bShowCancelButton) == 0x00006C, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::bShowCancelButton' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog, ReturnValue) == 0x000070, "Member 'OrionAsyncAction_ShowConfirmation_ShowConfirmationDialog::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionAsyncAction_TimedLerp.TimedLerp
// 0x0028 (0x0028 - 0x0000)
struct OrionAsyncAction_TimedLerp_TimedLerp final
{
public:
	class UObject*                                WorldContext_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpDuration;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseOutExp;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWholeNumbersOnly;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOrionAsyncAction_TimedLerp*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAsyncAction_TimedLerp_TimedLerp) == 0x000008, "Wrong alignment on OrionAsyncAction_TimedLerp_TimedLerp");
static_assert(sizeof(OrionAsyncAction_TimedLerp_TimedLerp) == 0x000028, "Wrong size on OrionAsyncAction_TimedLerp_TimedLerp");
static_assert(offsetof(OrionAsyncAction_TimedLerp_TimedLerp, WorldContext_0) == 0x000000, "Member 'OrionAsyncAction_TimedLerp_TimedLerp::WorldContext_0' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_TimedLerp_TimedLerp, StartValue) == 0x000008, "Member 'OrionAsyncAction_TimedLerp_TimedLerp::StartValue' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_TimedLerp_TimedLerp, EndValue) == 0x00000C, "Member 'OrionAsyncAction_TimedLerp_TimedLerp::EndValue' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_TimedLerp_TimedLerp, LerpDuration) == 0x000010, "Member 'OrionAsyncAction_TimedLerp_TimedLerp::LerpDuration' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_TimedLerp_TimedLerp, EaseOutExp) == 0x000014, "Member 'OrionAsyncAction_TimedLerp_TimedLerp::EaseOutExp' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_TimedLerp_TimedLerp, bWholeNumbersOnly) == 0x000018, "Member 'OrionAsyncAction_TimedLerp_TimedLerp::bWholeNumbersOnly' has a wrong offset!");
static_assert(offsetof(OrionAsyncAction_TimedLerp_TimedLerp, ReturnValue) == 0x000020, "Member 'OrionAsyncAction_TimedLerp_TimedLerp::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionAttributeDisplay.GetFlyingPip
// 0x0008 (0x0008 - 0x0000)
struct OrionAttributeDisplay_GetFlyingPip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAttributeDisplay_GetFlyingPip) == 0x000008, "Wrong alignment on OrionAttributeDisplay_GetFlyingPip");
static_assert(sizeof(OrionAttributeDisplay_GetFlyingPip) == 0x000008, "Wrong size on OrionAttributeDisplay_GetFlyingPip");
static_assert(offsetof(OrionAttributeDisplay_GetFlyingPip, ReturnValue) == 0x000000, "Member 'OrionAttributeDisplay_GetFlyingPip::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionAttributeDisplay.GetFlyingPipOrigin
// 0x0008 (0x0008 - 0x0000)
struct OrionAttributeDisplay_GetFlyingPipOrigin final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAttributeDisplay_GetFlyingPipOrigin) == 0x000008, "Wrong alignment on OrionAttributeDisplay_GetFlyingPipOrigin");
static_assert(sizeof(OrionAttributeDisplay_GetFlyingPipOrigin) == 0x000008, "Wrong size on OrionAttributeDisplay_GetFlyingPipOrigin");
static_assert(offsetof(OrionAttributeDisplay_GetFlyingPipOrigin, ReturnValue) == 0x000000, "Member 'OrionAttributeDisplay_GetFlyingPipOrigin::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionAttributeDisplay.OnBranchTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionAttributeDisplay_OnBranchTypeChanged final
{
public:
	EOrionGemBranchType                           NewBranchType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAttributeDisplay_OnBranchTypeChanged) == 0x000001, "Wrong alignment on OrionAttributeDisplay_OnBranchTypeChanged");
static_assert(sizeof(OrionAttributeDisplay_OnBranchTypeChanged) == 0x000001, "Wrong size on OrionAttributeDisplay_OnBranchTypeChanged");
static_assert(offsetof(OrionAttributeDisplay_OnBranchTypeChanged, NewBranchType) == 0x000000, "Member 'OrionAttributeDisplay_OnBranchTypeChanged::NewBranchType' has a wrong offset!");

// Function OrionUI.OrionAttributeDisplay.OnPipPurchased
// 0x0002 (0x0002 - 0x0000)
struct OrionAttributeDisplay_OnPipPurchased final
{
public:
	bool                                          bMajorPip;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasGemAssigned;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAttributeDisplay_OnPipPurchased) == 0x000001, "Wrong alignment on OrionAttributeDisplay_OnPipPurchased");
static_assert(sizeof(OrionAttributeDisplay_OnPipPurchased) == 0x000002, "Wrong size on OrionAttributeDisplay_OnPipPurchased");
static_assert(offsetof(OrionAttributeDisplay_OnPipPurchased, bMajorPip) == 0x000000, "Member 'OrionAttributeDisplay_OnPipPurchased::bMajorPip' has a wrong offset!");
static_assert(offsetof(OrionAttributeDisplay_OnPipPurchased, bHasGemAssigned) == 0x000001, "Member 'OrionAttributeDisplay_OnPipPurchased::bHasGemAssigned' has a wrong offset!");

// Function OrionUI.OrionAttributeDisplay.OnPurchasabilityChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionAttributeDisplay_OnPurchasabilityChanged final
{
public:
	bool                                          bIsPurchasable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAttributeDisplay_OnPurchasabilityChanged) == 0x000001, "Wrong alignment on OrionAttributeDisplay_OnPurchasabilityChanged");
static_assert(sizeof(OrionAttributeDisplay_OnPurchasabilityChanged) == 0x000001, "Wrong size on OrionAttributeDisplay_OnPurchasabilityChanged");
static_assert(offsetof(OrionAttributeDisplay_OnPurchasabilityChanged, bIsPurchasable) == 0x000000, "Member 'OrionAttributeDisplay_OnPurchasabilityChanged::bIsPurchasable' has a wrong offset!");

// Function OrionUI.OrionAttributeDisplay.OnRowInitialized
// 0x0001 (0x0001 - 0x0000)
struct OrionAttributeDisplay_OnRowInitialized final
{
public:
	EOrionGemBranchType                           AttributeType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionAttributeDisplay_OnRowInitialized) == 0x000001, "Wrong alignment on OrionAttributeDisplay_OnRowInitialized");
static_assert(sizeof(OrionAttributeDisplay_OnRowInitialized) == 0x000001, "Wrong size on OrionAttributeDisplay_OnRowInitialized");
static_assert(offsetof(OrionAttributeDisplay_OnRowInitialized, AttributeType) == 0x000000, "Member 'OrionAttributeDisplay_OnRowInitialized::AttributeType' has a wrong offset!");

// Function OrionUI.OrionBannerInventory.DynamicHandleBannerSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionBannerInventory_DynamicHandleBannerSelected final
{
public:
	class UObject*                                SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionBannerInventory_DynamicHandleBannerSelected) == 0x000008, "Wrong alignment on OrionBannerInventory_DynamicHandleBannerSelected");
static_assert(sizeof(OrionBannerInventory_DynamicHandleBannerSelected) == 0x000010, "Wrong size on OrionBannerInventory_DynamicHandleBannerSelected");
static_assert(offsetof(OrionBannerInventory_DynamicHandleBannerSelected, SelectedItem) == 0x000000, "Member 'OrionBannerInventory_DynamicHandleBannerSelected::SelectedItem' has a wrong offset!");
static_assert(offsetof(OrionBannerInventory_DynamicHandleBannerSelected, bSelected) == 0x000008, "Member 'OrionBannerInventory_DynamicHandleBannerSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionBannerInventoryListItem.OnBannerSet
// 0x0010 (0x0010 - 0x0000)
struct OrionBannerInventoryListItem_OnBannerSet final
{
public:
	class UOrionMcpBannerItem*                    BannerItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBannerListItemType                           ListItemType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionBannerInventoryListItem_OnBannerSet) == 0x000008, "Wrong alignment on OrionBannerInventoryListItem_OnBannerSet");
static_assert(sizeof(OrionBannerInventoryListItem_OnBannerSet) == 0x000010, "Wrong size on OrionBannerInventoryListItem_OnBannerSet");
static_assert(offsetof(OrionBannerInventoryListItem_OnBannerSet, BannerItem) == 0x000000, "Member 'OrionBannerInventoryListItem_OnBannerSet::BannerItem' has a wrong offset!");
static_assert(offsetof(OrionBannerInventoryListItem_OnBannerSet, ListItemType) == 0x000008, "Member 'OrionBannerInventoryListItem_OnBannerSet::ListItemType' has a wrong offset!");

// Function OrionUI.OrionBannerInventoryListItem.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct OrionBannerInventoryListItem_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBannerInventoryListItem_IsEquipped) == 0x000001, "Wrong alignment on OrionBannerInventoryListItem_IsEquipped");
static_assert(sizeof(OrionBannerInventoryListItem_IsEquipped) == 0x000001, "Wrong size on OrionBannerInventoryListItem_IsEquipped");
static_assert(offsetof(OrionBannerInventoryListItem_IsEquipped, ReturnValue) == 0x000000, "Member 'OrionBannerInventoryListItem_IsEquipped::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionBannerInventoryListItem.IsForSale
// 0x0001 (0x0001 - 0x0000)
struct OrionBannerInventoryListItem_IsForSale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBannerInventoryListItem_IsForSale) == 0x000001, "Wrong alignment on OrionBannerInventoryListItem_IsForSale");
static_assert(sizeof(OrionBannerInventoryListItem_IsForSale) == 0x000001, "Wrong size on OrionBannerInventoryListItem_IsForSale");
static_assert(offsetof(OrionBannerInventoryListItem_IsForSale, ReturnValue) == 0x000000, "Member 'OrionBannerInventoryListItem_IsForSale::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionBannerInventoryListItem.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct OrionBannerInventoryListItem_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBannerInventoryListItem_IsOwned) == 0x000001, "Wrong alignment on OrionBannerInventoryListItem_IsOwned");
static_assert(sizeof(OrionBannerInventoryListItem_IsOwned) == 0x000001, "Wrong size on OrionBannerInventoryListItem_IsOwned");
static_assert(offsetof(OrionBannerInventoryListItem_IsOwned, ReturnValue) == 0x000000, "Member 'OrionBannerInventoryListItem_IsOwned::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionBannerInventoryListItem.IsPlayable
// 0x0001 (0x0001 - 0x0000)
struct OrionBannerInventoryListItem_IsPlayable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBannerInventoryListItem_IsPlayable) == 0x000001, "Wrong alignment on OrionBannerInventoryListItem_IsPlayable");
static_assert(sizeof(OrionBannerInventoryListItem_IsPlayable) == 0x000001, "Wrong size on OrionBannerInventoryListItem_IsPlayable");
static_assert(offsetof(OrionBannerInventoryListItem_IsPlayable, ReturnValue) == 0x000000, "Member 'OrionBannerInventoryListItem_IsPlayable::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionBaseButton_Group.GetSelectedButtonIndex
// 0x0004 (0x0004 - 0x0000)
struct OrionBaseButton_Group_GetSelectedButtonIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBaseButton_Group_GetSelectedButtonIndex) == 0x000004, "Wrong alignment on OrionBaseButton_Group_GetSelectedButtonIndex");
static_assert(sizeof(OrionBaseButton_Group_GetSelectedButtonIndex) == 0x000004, "Wrong size on OrionBaseButton_Group_GetSelectedButtonIndex");
static_assert(offsetof(OrionBaseButton_Group_GetSelectedButtonIndex, ReturnValue) == 0x000000, "Member 'OrionBaseButton_Group_GetSelectedButtonIndex::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionBaseButton_Group.OnSelectionStateChanged
// 0x0010 (0x0010 - 0x0000)
struct OrionBaseButton_Group_OnSelectionStateChanged final
{
public:
	class UOrionBaseButton*                       BaseButton;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionBaseButton_Group_OnSelectionStateChanged) == 0x000008, "Wrong alignment on OrionBaseButton_Group_OnSelectionStateChanged");
static_assert(sizeof(OrionBaseButton_Group_OnSelectionStateChanged) == 0x000010, "Wrong size on OrionBaseButton_Group_OnSelectionStateChanged");
static_assert(offsetof(OrionBaseButton_Group_OnSelectionStateChanged, BaseButton) == 0x000000, "Member 'OrionBaseButton_Group_OnSelectionStateChanged::BaseButton' has a wrong offset!");
static_assert(offsetof(OrionBaseButton_Group_OnSelectionStateChanged, bIsSelected) == 0x000008, "Member 'OrionBaseButton_Group_OnSelectionStateChanged::bIsSelected' has a wrong offset!");

// Function OrionUI.OrionBaseButton_Group.SelectButtonAtIndex
// 0x0004 (0x0004 - 0x0000)
struct OrionBaseButton_Group_SelectButtonAtIndex final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBaseButton_Group_SelectButtonAtIndex) == 0x000004, "Wrong alignment on OrionBaseButton_Group_SelectButtonAtIndex");
static_assert(sizeof(OrionBaseButton_Group_SelectButtonAtIndex) == 0x000004, "Wrong size on OrionBaseButton_Group_SelectButtonAtIndex");
static_assert(offsetof(OrionBaseButton_Group_SelectButtonAtIndex, ButtonIndex) == 0x000000, "Member 'OrionBaseButton_Group_SelectButtonAtIndex::ButtonIndex' has a wrong offset!");

// Function OrionUI.OrionBaseButton_Group.SelectNextButton
// 0x0001 (0x0001 - 0x0000)
struct OrionBaseButton_Group_SelectNextButton final
{
public:
	bool                                          bAllowWrap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBaseButton_Group_SelectNextButton) == 0x000001, "Wrong alignment on OrionBaseButton_Group_SelectNextButton");
static_assert(sizeof(OrionBaseButton_Group_SelectNextButton) == 0x000001, "Wrong size on OrionBaseButton_Group_SelectNextButton");
static_assert(offsetof(OrionBaseButton_Group_SelectNextButton, bAllowWrap) == 0x000000, "Member 'OrionBaseButton_Group_SelectNextButton::bAllowWrap' has a wrong offset!");

// Function OrionUI.OrionBaseButton_Group.SelectPreviousButton
// 0x0001 (0x0001 - 0x0000)
struct OrionBaseButton_Group_SelectPreviousButton final
{
public:
	bool                                          bAllowWrap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBaseButton_Group_SelectPreviousButton) == 0x000001, "Wrong alignment on OrionBaseButton_Group_SelectPreviousButton");
static_assert(sizeof(OrionBaseButton_Group_SelectPreviousButton) == 0x000001, "Wrong size on OrionBaseButton_Group_SelectPreviousButton");
static_assert(offsetof(OrionBaseButton_Group_SelectPreviousButton, bAllowWrap) == 0x000000, "Member 'OrionBaseButton_Group_SelectPreviousButton::bAllowWrap' has a wrong offset!");

// Function OrionUI.OrionBaseButton_Group.SetSelectionRequired
// 0x0001 (0x0001 - 0x0000)
struct OrionBaseButton_Group_SetSelectionRequired final
{
public:
	bool                                          bRequireSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBaseButton_Group_SetSelectionRequired) == 0x000001, "Wrong alignment on OrionBaseButton_Group_SetSelectionRequired");
static_assert(sizeof(OrionBaseButton_Group_SetSelectionRequired) == 0x000001, "Wrong size on OrionBaseButton_Group_SetSelectionRequired");
static_assert(offsetof(OrionBaseButton_Group_SetSelectionRequired, bRequireSelection) == 0x000000, "Member 'OrionBaseButton_Group_SetSelectionRequired::bRequireSelection' has a wrong offset!");

// Function OrionUI.OrionBlurWidget.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct OrionBlurWidget_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBlurWidget_SetColorAndOpacity) == 0x000004, "Wrong alignment on OrionBlurWidget_SetColorAndOpacity");
static_assert(sizeof(OrionBlurWidget_SetColorAndOpacity) == 0x000010, "Wrong size on OrionBlurWidget_SetColorAndOpacity");
static_assert(offsetof(OrionBlurWidget_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'OrionBlurWidget_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function OrionUI.OrionBundlePurchaseScreen.SetBundleScreenTitle
// 0x0018 (0x0018 - 0x0000)
struct OrionBundlePurchaseScreen_SetBundleScreenTitle final
{
public:
	class FText                                   BundleTitle;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBundlePurchaseScreen_SetBundleScreenTitle) == 0x000008, "Wrong alignment on OrionBundlePurchaseScreen_SetBundleScreenTitle");
static_assert(sizeof(OrionBundlePurchaseScreen_SetBundleScreenTitle) == 0x000018, "Wrong size on OrionBundlePurchaseScreen_SetBundleScreenTitle");
static_assert(offsetof(OrionBundlePurchaseScreen_SetBundleScreenTitle, BundleTitle) == 0x000000, "Member 'OrionBundlePurchaseScreen_SetBundleScreenTitle::BundleTitle' has a wrong offset!");

// Function OrionUI.OrionBundlePurchaseScreen.SetStoreOfferAndContext
// 0x0018 (0x0018 - 0x0000)
struct OrionBundlePurchaseScreen_SetStoreOfferAndContext final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPurchaseContext;                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionBundlePurchaseScreen_SetStoreOfferAndContext) == 0x000008, "Wrong alignment on OrionBundlePurchaseScreen_SetStoreOfferAndContext");
static_assert(sizeof(OrionBundlePurchaseScreen_SetStoreOfferAndContext) == 0x000018, "Wrong size on OrionBundlePurchaseScreen_SetStoreOfferAndContext");
static_assert(offsetof(OrionBundlePurchaseScreen_SetStoreOfferAndContext, OfferId) == 0x000000, "Member 'OrionBundlePurchaseScreen_SetStoreOfferAndContext::OfferId' has a wrong offset!");
static_assert(offsetof(OrionBundlePurchaseScreen_SetStoreOfferAndContext, InPurchaseContext) == 0x000010, "Member 'OrionBundlePurchaseScreen_SetStoreOfferAndContext::InPurchaseContext' has a wrong offset!");

// Function OrionUI.OrionButton.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionButton_OnStateChanged final
{
public:
	EOrionButtonState                             NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionButton_OnStateChanged) == 0x000001, "Wrong alignment on OrionButton_OnStateChanged");
static_assert(sizeof(OrionButton_OnStateChanged) == 0x000001, "Wrong size on OrionButton_OnStateChanged");
static_assert(offsetof(OrionButton_OnStateChanged, NewState) == 0x000000, "Member 'OrionButton_OnStateChanged::NewState' has a wrong offset!");

// DelegateFunction OrionUI.OrionButton.SimpleButtonDelegate__DelegateSignature
// 0x00C0 (0x00C0 - 0x0000)
struct OrionButton_SimpleButtonDelegate__DelegateSignature final
{
public:
	class UOrionButton*                           Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0008(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionButton_SimpleButtonDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OrionButton_SimpleButtonDelegate__DelegateSignature");
static_assert(sizeof(OrionButton_SimpleButtonDelegate__DelegateSignature) == 0x0000C0, "Wrong size on OrionButton_SimpleButtonDelegate__DelegateSignature");
static_assert(offsetof(OrionButton_SimpleButtonDelegate__DelegateSignature, Button) == 0x000000, "Member 'OrionButton_SimpleButtonDelegate__DelegateSignature::Button' has a wrong offset!");
static_assert(offsetof(OrionButton_SimpleButtonDelegate__DelegateSignature, ReturnValue) == 0x000008, "Member 'OrionButton_SimpleButtonDelegate__DelegateSignature::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionCardCollectionScreen.DynamicCardClicked
// 0x0008 (0x0008 - 0x0000)
struct OrionCardCollectionScreen_DynamicCardClicked final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardCollectionScreen_DynamicCardClicked) == 0x000008, "Wrong alignment on OrionCardCollectionScreen_DynamicCardClicked");
static_assert(sizeof(OrionCardCollectionScreen_DynamicCardClicked) == 0x000008, "Wrong size on OrionCardCollectionScreen_DynamicCardClicked");
static_assert(offsetof(OrionCardCollectionScreen_DynamicCardClicked, Obj) == 0x000000, "Member 'OrionCardCollectionScreen_DynamicCardClicked::Obj' has a wrong offset!");

// Function OrionUI.OrionCardCollectionScreen.HandleCardHovered
// 0x0010 (0x0010 - 0x0000)
struct OrionCardCollectionScreen_HandleCardHovered final
{
public:
	class UObject*                                HoveredItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCardCollectionScreen_HandleCardHovered) == 0x000008, "Wrong alignment on OrionCardCollectionScreen_HandleCardHovered");
static_assert(sizeof(OrionCardCollectionScreen_HandleCardHovered) == 0x000010, "Wrong size on OrionCardCollectionScreen_HandleCardHovered");
static_assert(offsetof(OrionCardCollectionScreen_HandleCardHovered, HoveredItem) == 0x000000, "Member 'OrionCardCollectionScreen_HandleCardHovered::HoveredItem' has a wrong offset!");
static_assert(offsetof(OrionCardCollectionScreen_HandleCardHovered, bIsHovered) == 0x000008, "Member 'OrionCardCollectionScreen_HandleCardHovered::bIsHovered' has a wrong offset!");

// Function OrionUI.OrionCardFilterHeader.DynamicChaosSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionCardFilterHeader_DynamicChaosSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardFilterHeader_DynamicChaosSelected) == 0x000001, "Wrong alignment on OrionCardFilterHeader_DynamicChaosSelected");
static_assert(sizeof(OrionCardFilterHeader_DynamicChaosSelected) == 0x000001, "Wrong size on OrionCardFilterHeader_DynamicChaosSelected");
static_assert(offsetof(OrionCardFilterHeader_DynamicChaosSelected, bSelected) == 0x000000, "Member 'OrionCardFilterHeader_DynamicChaosSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionCardFilterHeader.DynamicDeathSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionCardFilterHeader_DynamicDeathSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardFilterHeader_DynamicDeathSelected) == 0x000001, "Wrong alignment on OrionCardFilterHeader_DynamicDeathSelected");
static_assert(sizeof(OrionCardFilterHeader_DynamicDeathSelected) == 0x000001, "Wrong size on OrionCardFilterHeader_DynamicDeathSelected");
static_assert(offsetof(OrionCardFilterHeader_DynamicDeathSelected, bSelected) == 0x000000, "Member 'OrionCardFilterHeader_DynamicDeathSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionCardFilterHeader.DynamicGrowthSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionCardFilterHeader_DynamicGrowthSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardFilterHeader_DynamicGrowthSelected) == 0x000001, "Wrong alignment on OrionCardFilterHeader_DynamicGrowthSelected");
static_assert(sizeof(OrionCardFilterHeader_DynamicGrowthSelected) == 0x000001, "Wrong size on OrionCardFilterHeader_DynamicGrowthSelected");
static_assert(offsetof(OrionCardFilterHeader_DynamicGrowthSelected, bSelected) == 0x000000, "Member 'OrionCardFilterHeader_DynamicGrowthSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionCardFilterHeader.DynamicKnowledgeSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionCardFilterHeader_DynamicKnowledgeSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardFilterHeader_DynamicKnowledgeSelected) == 0x000001, "Wrong alignment on OrionCardFilterHeader_DynamicKnowledgeSelected");
static_assert(sizeof(OrionCardFilterHeader_DynamicKnowledgeSelected) == 0x000001, "Wrong size on OrionCardFilterHeader_DynamicKnowledgeSelected");
static_assert(offsetof(OrionCardFilterHeader_DynamicKnowledgeSelected, bSelected) == 0x000000, "Member 'OrionCardFilterHeader_DynamicKnowledgeSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionCardFilterHeader.DynamicOrderSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionCardFilterHeader_DynamicOrderSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardFilterHeader_DynamicOrderSelected) == 0x000001, "Wrong alignment on OrionCardFilterHeader_DynamicOrderSelected");
static_assert(sizeof(OrionCardFilterHeader_DynamicOrderSelected) == 0x000001, "Wrong size on OrionCardFilterHeader_DynamicOrderSelected");
static_assert(offsetof(OrionCardFilterHeader_DynamicOrderSelected, bSelected) == 0x000000, "Member 'OrionCardFilterHeader_DynamicOrderSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionCardFilterHeader.DynamicSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct OrionCardFilterHeader_DynamicSearchTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardFilterHeader_DynamicSearchTextChanged) == 0x000008, "Wrong alignment on OrionCardFilterHeader_DynamicSearchTextChanged");
static_assert(sizeof(OrionCardFilterHeader_DynamicSearchTextChanged) == 0x000018, "Wrong size on OrionCardFilterHeader_DynamicSearchTextChanged");
static_assert(offsetof(OrionCardFilterHeader_DynamicSearchTextChanged, NewText) == 0x000000, "Member 'OrionCardFilterHeader_DynamicSearchTextChanged::NewText' has a wrong offset!");

// Function OrionUI.OrionCardFilterHeader.DynamicSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct OrionCardFilterHeader_DynamicSearchTextCommitted final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCardFilterHeader_DynamicSearchTextCommitted) == 0x000008, "Wrong alignment on OrionCardFilterHeader_DynamicSearchTextCommitted");
static_assert(sizeof(OrionCardFilterHeader_DynamicSearchTextCommitted) == 0x000020, "Wrong size on OrionCardFilterHeader_DynamicSearchTextCommitted");
static_assert(offsetof(OrionCardFilterHeader_DynamicSearchTextCommitted, NewText) == 0x000000, "Member 'OrionCardFilterHeader_DynamicSearchTextCommitted::NewText' has a wrong offset!");
static_assert(offsetof(OrionCardFilterHeader_DynamicSearchTextCommitted, CommitMethod) == 0x000018, "Member 'OrionCardFilterHeader_DynamicSearchTextCommitted::CommitMethod' has a wrong offset!");

// Function OrionUI.OrionTimedFillWidget.GetMaxFillTime
// 0x0004 (0x0004 - 0x0000)
struct OrionTimedFillWidget_GetMaxFillTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTimedFillWidget_GetMaxFillTime) == 0x000004, "Wrong alignment on OrionTimedFillWidget_GetMaxFillTime");
static_assert(sizeof(OrionTimedFillWidget_GetMaxFillTime) == 0x000004, "Wrong size on OrionTimedFillWidget_GetMaxFillTime");
static_assert(offsetof(OrionTimedFillWidget_GetMaxFillTime, ReturnValue) == 0x000000, "Member 'OrionTimedFillWidget_GetMaxFillTime::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionTimedFillWidget.OnUpdateCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct OrionTimedFillWidget_OnUpdateCurrentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTimedFillWidget_OnUpdateCurrentValue) == 0x000004, "Wrong alignment on OrionTimedFillWidget_OnUpdateCurrentValue");
static_assert(sizeof(OrionTimedFillWidget_OnUpdateCurrentValue) == 0x000004, "Wrong size on OrionTimedFillWidget_OnUpdateCurrentValue");
static_assert(offsetof(OrionTimedFillWidget_OnUpdateCurrentValue, Value) == 0x000000, "Member 'OrionTimedFillWidget_OnUpdateCurrentValue::Value' has a wrong offset!");

// Function OrionUI.OrionTimedFillWidget.SetMaxFillTime
// 0x0004 (0x0004 - 0x0000)
struct OrionTimedFillWidget_SetMaxFillTime final
{
public:
	float                                         InMaxFillTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTimedFillWidget_SetMaxFillTime) == 0x000004, "Wrong alignment on OrionTimedFillWidget_SetMaxFillTime");
static_assert(sizeof(OrionTimedFillWidget_SetMaxFillTime) == 0x000004, "Wrong size on OrionTimedFillWidget_SetMaxFillTime");
static_assert(offsetof(OrionTimedFillWidget_SetMaxFillTime, InMaxFillTime) == 0x000000, "Member 'OrionTimedFillWidget_SetMaxFillTime::InMaxFillTime' has a wrong offset!");

// Function OrionUI.OrionTimedFillWidget.SetRange
// 0x0008 (0x0008 - 0x0000)
struct OrionTimedFillWidget_SetRange final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTimedFillWidget_SetRange) == 0x000004, "Wrong alignment on OrionTimedFillWidget_SetRange");
static_assert(sizeof(OrionTimedFillWidget_SetRange) == 0x000008, "Wrong size on OrionTimedFillWidget_SetRange");
static_assert(offsetof(OrionTimedFillWidget_SetRange, StartValue) == 0x000000, "Member 'OrionTimedFillWidget_SetRange::StartValue' has a wrong offset!");
static_assert(offsetof(OrionTimedFillWidget_SetRange, EndValue) == 0x000004, "Member 'OrionTimedFillWidget_SetRange::EndValue' has a wrong offset!");

// Function OrionUI.OrionPossibleRewardsArray.SetPossibleRewardWidgets
// 0x0010 (0x0010 - 0x0000)
struct OrionPossibleRewardsArray_SetPossibleRewardWidgets final
{
public:
	TArray<class UOrionRewardWidget*>             InPossibleRewardWidgets;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPossibleRewardsArray_SetPossibleRewardWidgets) == 0x000008, "Wrong alignment on OrionPossibleRewardsArray_SetPossibleRewardWidgets");
static_assert(sizeof(OrionPossibleRewardsArray_SetPossibleRewardWidgets) == 0x000010, "Wrong size on OrionPossibleRewardsArray_SetPossibleRewardWidgets");
static_assert(offsetof(OrionPossibleRewardsArray_SetPossibleRewardWidgets, InPossibleRewardWidgets) == 0x000000, "Member 'OrionPossibleRewardsArray_SetPossibleRewardWidgets::InPossibleRewardWidgets' has a wrong offset!");

// Function OrionUI.OrionCardProgressBar.SetPreviewLevelDisplay
// 0x0001 (0x0001 - 0x0000)
struct OrionCardProgressBar_SetPreviewLevelDisplay final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardProgressBar_SetPreviewLevelDisplay) == 0x000001, "Wrong alignment on OrionCardProgressBar_SetPreviewLevelDisplay");
static_assert(sizeof(OrionCardProgressBar_SetPreviewLevelDisplay) == 0x000001, "Wrong size on OrionCardProgressBar_SetPreviewLevelDisplay");
static_assert(offsetof(OrionCardProgressBar_SetPreviewLevelDisplay, bIsVisible) == 0x000000, "Member 'OrionCardProgressBar_SetPreviewLevelDisplay::bIsVisible' has a wrong offset!");

// Function OrionUI.OrionCardShop.DynamicHandleCanShopChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShop_DynamicHandleCanShopChanged final
{
public:
	bool                                          bCanShop;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_DynamicHandleCanShopChanged) == 0x000001, "Wrong alignment on OrionCardShop_DynamicHandleCanShopChanged");
static_assert(sizeof(OrionCardShop_DynamicHandleCanShopChanged) == 0x000001, "Wrong size on OrionCardShop_DynamicHandleCanShopChanged");
static_assert(offsetof(OrionCardShop_DynamicHandleCanShopChanged, bCanShop) == 0x000000, "Member 'OrionCardShop_DynamicHandleCanShopChanged::bCanShop' has a wrong offset!");

// Function OrionUI.OrionCardShop.DynamicHandleEquipSlotSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionCardShop_DynamicHandleEquipSlotSelected final
{
public:
	class UOrionBaseButton*                       SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCardShop_DynamicHandleEquipSlotSelected) == 0x000008, "Wrong alignment on OrionCardShop_DynamicHandleEquipSlotSelected");
static_assert(sizeof(OrionCardShop_DynamicHandleEquipSlotSelected) == 0x000010, "Wrong size on OrionCardShop_DynamicHandleEquipSlotSelected");
static_assert(offsetof(OrionCardShop_DynamicHandleEquipSlotSelected, SelectedButton) == 0x000000, "Member 'OrionCardShop_DynamicHandleEquipSlotSelected::SelectedButton' has a wrong offset!");
static_assert(offsetof(OrionCardShop_DynamicHandleEquipSlotSelected, ButtonIndex) == 0x000008, "Member 'OrionCardShop_DynamicHandleEquipSlotSelected::ButtonIndex' has a wrong offset!");

// Function OrionUI.OrionCardShop.DynamicHandleHandCardSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionCardShop_DynamicHandleHandCardSelected final
{
public:
	class UOrionBaseButton*                       SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCardShop_DynamicHandleHandCardSelected) == 0x000008, "Wrong alignment on OrionCardShop_DynamicHandleHandCardSelected");
static_assert(sizeof(OrionCardShop_DynamicHandleHandCardSelected) == 0x000010, "Wrong size on OrionCardShop_DynamicHandleHandCardSelected");
static_assert(offsetof(OrionCardShop_DynamicHandleHandCardSelected, SelectedButton) == 0x000000, "Member 'OrionCardShop_DynamicHandleHandCardSelected::SelectedButton' has a wrong offset!");
static_assert(offsetof(OrionCardShop_DynamicHandleHandCardSelected, ButtonIndex) == 0x000008, "Member 'OrionCardShop_DynamicHandleHandCardSelected::ButtonIndex' has a wrong offset!");

// Function OrionUI.OrionCardShop.DynamicHandleIsAtBaseChange
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShop_DynamicHandleIsAtBaseChange final
{
public:
	bool                                          bIsAtBase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_DynamicHandleIsAtBaseChange) == 0x000001, "Wrong alignment on OrionCardShop_DynamicHandleIsAtBaseChange");
static_assert(sizeof(OrionCardShop_DynamicHandleIsAtBaseChange) == 0x000001, "Wrong size on OrionCardShop_DynamicHandleIsAtBaseChange");
static_assert(offsetof(OrionCardShop_DynamicHandleIsAtBaseChange, bIsAtBase) == 0x000000, "Member 'OrionCardShop_DynamicHandleIsAtBaseChange::bIsAtBase' has a wrong offset!");

// Function OrionUI.OrionCardShop.HandleBackboardPressed
// 0x0160 (0x0160 - 0x0000)
struct OrionCardShop_HandleBackboardPressed final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_HandleBackboardPressed) == 0x000008, "Wrong alignment on OrionCardShop_HandleBackboardPressed");
static_assert(sizeof(OrionCardShop_HandleBackboardPressed) == 0x000160, "Wrong size on OrionCardShop_HandleBackboardPressed");
static_assert(offsetof(OrionCardShop_HandleBackboardPressed, MyGeometry) == 0x000000, "Member 'OrionCardShop_HandleBackboardPressed::MyGeometry' has a wrong offset!");
static_assert(offsetof(OrionCardShop_HandleBackboardPressed, MouseEvent) == 0x000038, "Member 'OrionCardShop_HandleBackboardPressed::MouseEvent' has a wrong offset!");
static_assert(offsetof(OrionCardShop_HandleBackboardPressed, ReturnValue) == 0x0000A8, "Member 'OrionCardShop_HandleBackboardPressed::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnCardDiscarded
// 0x0010 (0x0010 - 0x0000)
struct OrionCardShop_OnCardDiscarded final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DexCost;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VitCost;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntCost;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnCardDiscarded) == 0x000004, "Wrong alignment on OrionCardShop_OnCardDiscarded");
static_assert(sizeof(OrionCardShop_OnCardDiscarded) == 0x000010, "Wrong size on OrionCardShop_OnCardDiscarded");
static_assert(offsetof(OrionCardShop_OnCardDiscarded, SlotIndex) == 0x000000, "Member 'OrionCardShop_OnCardDiscarded::SlotIndex' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnCardDiscarded, DexCost) == 0x000004, "Member 'OrionCardShop_OnCardDiscarded::DexCost' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnCardDiscarded, VitCost) == 0x000008, "Member 'OrionCardShop_OnCardDiscarded::VitCost' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnCardDiscarded, IntCost) == 0x00000C, "Member 'OrionCardShop_OnCardDiscarded::IntCost' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnCardEquipped
// 0x0010 (0x0010 - 0x0000)
struct OrionCardShop_OnCardEquipped final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DexCost;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VitCost;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntCost;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnCardEquipped) == 0x000004, "Wrong alignment on OrionCardShop_OnCardEquipped");
static_assert(sizeof(OrionCardShop_OnCardEquipped) == 0x000010, "Wrong size on OrionCardShop_OnCardEquipped");
static_assert(offsetof(OrionCardShop_OnCardEquipped, SlotIndex) == 0x000000, "Member 'OrionCardShop_OnCardEquipped::SlotIndex' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnCardEquipped, DexCost) == 0x000004, "Member 'OrionCardShop_OnCardEquipped::DexCost' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnCardEquipped, VitCost) == 0x000008, "Member 'OrionCardShop_OnCardEquipped::VitCost' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnCardEquipped, IntCost) == 0x00000C, "Member 'OrionCardShop_OnCardEquipped::IntCost' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnCardShopOpened
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShop_OnCardShopOpened final
{
public:
	bool                                          bHasDeck;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnCardShopOpened) == 0x000001, "Wrong alignment on OrionCardShop_OnCardShopOpened");
static_assert(sizeof(OrionCardShop_OnCardShopOpened) == 0x000001, "Wrong size on OrionCardShop_OnCardShopOpened");
static_assert(offsetof(OrionCardShop_OnCardShopOpened, bHasDeck) == 0x000000, "Member 'OrionCardShop_OnCardShopOpened::bHasDeck' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnFloatingCardSet
// 0x0002 (0x0002 - 0x0000)
struct OrionCardShop_OnFloatingCardSet final
{
public:
	EOrionItemRarity                              CardRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromEquipSlot;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnFloatingCardSet) == 0x000001, "Wrong alignment on OrionCardShop_OnFloatingCardSet");
static_assert(sizeof(OrionCardShop_OnFloatingCardSet) == 0x000002, "Wrong size on OrionCardShop_OnFloatingCardSet");
static_assert(offsetof(OrionCardShop_OnFloatingCardSet, CardRarity) == 0x000000, "Member 'OrionCardShop_OnFloatingCardSet::CardRarity' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnFloatingCardSet, bIsFromEquipSlot) == 0x000001, "Member 'OrionCardShop_OnFloatingCardSet::bIsFromEquipSlot' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnFloatingCardVisualChange
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShop_OnFloatingCardVisualChange final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnFloatingCardVisualChange) == 0x000001, "Wrong alignment on OrionCardShop_OnFloatingCardVisualChange");
static_assert(sizeof(OrionCardShop_OnFloatingCardVisualChange) == 0x000001, "Wrong size on OrionCardShop_OnFloatingCardVisualChange");
static_assert(offsetof(OrionCardShop_OnFloatingCardVisualChange, bIsVisible) == 0x000000, "Member 'OrionCardShop_OnFloatingCardVisualChange::bIsVisible' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnHandCardSelected
// 0x0008 (0x0008 - 0x0000)
struct OrionCardShop_OnHandCardSelected final
{
public:
	class UOrionHandEntry*                        SelectedCard;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnHandCardSelected) == 0x000008, "Wrong alignment on OrionCardShop_OnHandCardSelected");
static_assert(sizeof(OrionCardShop_OnHandCardSelected) == 0x000008, "Wrong size on OrionCardShop_OnHandCardSelected");
static_assert(offsetof(OrionCardShop_OnHandCardSelected, SelectedCard) == 0x000000, "Member 'OrionCardShop_OnHandCardSelected::SelectedCard' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnOwnedPointsUpdated
// 0x000C (0x000C - 0x0000)
struct OrionCardShop_OnOwnedPointsUpdated final
{
public:
	EOrionGemBranchType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewOwnedPoints;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldOwnedPoints;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnOwnedPointsUpdated) == 0x000004, "Wrong alignment on OrionCardShop_OnOwnedPointsUpdated");
static_assert(sizeof(OrionCardShop_OnOwnedPointsUpdated) == 0x00000C, "Wrong size on OrionCardShop_OnOwnedPointsUpdated");
static_assert(offsetof(OrionCardShop_OnOwnedPointsUpdated, Type) == 0x000000, "Member 'OrionCardShop_OnOwnedPointsUpdated::Type' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnOwnedPointsUpdated, NewOwnedPoints) == 0x000004, "Member 'OrionCardShop_OnOwnedPointsUpdated::NewOwnedPoints' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnOwnedPointsUpdated, OldOwnedPoints) == 0x000008, "Member 'OrionCardShop_OnOwnedPointsUpdated::OldOwnedPoints' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnReadOnlyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShop_OnReadOnlyStateChanged final
{
public:
	bool                                          bReadOnly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnReadOnlyStateChanged) == 0x000001, "Wrong alignment on OrionCardShop_OnReadOnlyStateChanged");
static_assert(sizeof(OrionCardShop_OnReadOnlyStateChanged) == 0x000001, "Wrong size on OrionCardShop_OnReadOnlyStateChanged");
static_assert(offsetof(OrionCardShop_OnReadOnlyStateChanged, bReadOnly) == 0x000000, "Member 'OrionCardShop_OnReadOnlyStateChanged::bReadOnly' has a wrong offset!");

// Function OrionUI.OrionCardShop.OnShowWarningIcons
// 0x0004 (0x0004 - 0x0000)
struct OrionCardShop_OnShowWarningIcons final
{
public:
	bool                                          bShowGold;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDex;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVit;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInt;                                          // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_OnShowWarningIcons) == 0x000001, "Wrong alignment on OrionCardShop_OnShowWarningIcons");
static_assert(sizeof(OrionCardShop_OnShowWarningIcons) == 0x000004, "Wrong size on OrionCardShop_OnShowWarningIcons");
static_assert(offsetof(OrionCardShop_OnShowWarningIcons, bShowGold) == 0x000000, "Member 'OrionCardShop_OnShowWarningIcons::bShowGold' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnShowWarningIcons, bShowDex) == 0x000001, "Member 'OrionCardShop_OnShowWarningIcons::bShowDex' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnShowWarningIcons, bShowVit) == 0x000002, "Member 'OrionCardShop_OnShowWarningIcons::bShowVit' has a wrong offset!");
static_assert(offsetof(OrionCardShop_OnShowWarningIcons, bShowInt) == 0x000003, "Member 'OrionCardShop_OnShowWarningIcons::bShowInt' has a wrong offset!");

// Function OrionUI.OrionCardShop.PerformCancelRequest
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShop_PerformCancelRequest final
{
public:
	bool                                          bFromBackboard;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShop_PerformCancelRequest) == 0x000001, "Wrong alignment on OrionCardShop_PerformCancelRequest");
static_assert(sizeof(OrionCardShop_PerformCancelRequest) == 0x000001, "Wrong size on OrionCardShop_PerformCancelRequest");
static_assert(offsetof(OrionCardShop_PerformCancelRequest, bFromBackboard) == 0x000000, "Member 'OrionCardShop_PerformCancelRequest::bFromBackboard' has a wrong offset!");

// Function OrionUI.OrionCardShopAttributePip.OnGemAssigned
// 0x0010 (0x0010 - 0x0000)
struct OrionCardShopAttributePip_OnGemAssigned final
{
public:
	class UMaterialInstanceDynamic*               GemMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionGemRank                                 GemRank;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCardShopAttributePip_OnGemAssigned) == 0x000008, "Wrong alignment on OrionCardShopAttributePip_OnGemAssigned");
static_assert(sizeof(OrionCardShopAttributePip_OnGemAssigned) == 0x000010, "Wrong size on OrionCardShopAttributePip_OnGemAssigned");
static_assert(offsetof(OrionCardShopAttributePip_OnGemAssigned, GemMaterial) == 0x000000, "Member 'OrionCardShopAttributePip_OnGemAssigned::GemMaterial' has a wrong offset!");
static_assert(offsetof(OrionCardShopAttributePip_OnGemAssigned, GemRank) == 0x000008, "Member 'OrionCardShopAttributePip_OnGemAssigned::GemRank' has a wrong offset!");

// Function OrionUI.OrionCardShopAttributePip.OnPipSet
// 0x0018 (0x0018 - 0x0000)
struct OrionCardShopAttributePip_OnPipSet final
{
public:
	EOrionGemBranchType                           AttributeType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PipColor;                                          // 0x0004(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMajor;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilled;                                           // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffordable;                                       // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCardShopAttributePip_OnPipSet) == 0x000004, "Wrong alignment on OrionCardShopAttributePip_OnPipSet");
static_assert(sizeof(OrionCardShopAttributePip_OnPipSet) == 0x000018, "Wrong size on OrionCardShopAttributePip_OnPipSet");
static_assert(offsetof(OrionCardShopAttributePip_OnPipSet, AttributeType) == 0x000000, "Member 'OrionCardShopAttributePip_OnPipSet::AttributeType' has a wrong offset!");
static_assert(offsetof(OrionCardShopAttributePip_OnPipSet, PipColor) == 0x000004, "Member 'OrionCardShopAttributePip_OnPipSet::PipColor' has a wrong offset!");
static_assert(offsetof(OrionCardShopAttributePip_OnPipSet, bMajor) == 0x000014, "Member 'OrionCardShopAttributePip_OnPipSet::bMajor' has a wrong offset!");
static_assert(offsetof(OrionCardShopAttributePip_OnPipSet, bFilled) == 0x000015, "Member 'OrionCardShopAttributePip_OnPipSet::bFilled' has a wrong offset!");
static_assert(offsetof(OrionCardShopAttributePip_OnPipSet, bAffordable) == 0x000016, "Member 'OrionCardShopAttributePip_OnPipSet::bAffordable' has a wrong offset!");

// Function OrionUI.OrionCardShopCard.GetCardRarity
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShopCard_GetCardRarity final
{
public:
	EOrionItemRarity                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopCard_GetCardRarity) == 0x000001, "Wrong alignment on OrionCardShopCard_GetCardRarity");
static_assert(sizeof(OrionCardShopCard_GetCardRarity) == 0x000001, "Wrong size on OrionCardShopCard_GetCardRarity");
static_assert(offsetof(OrionCardShopCard_GetCardRarity, ReturnValue) == 0x000000, "Member 'OrionCardShopCard_GetCardRarity::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionCardShopCard.OnCardSet
// 0x0008 (0x0008 - 0x0000)
struct OrionCardShopCard_OnCardSet final
{
public:
	const class UOrionMcpCardItemDefinition*      CardItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopCard_OnCardSet) == 0x000008, "Wrong alignment on OrionCardShopCard_OnCardSet");
static_assert(sizeof(OrionCardShopCard_OnCardSet) == 0x000008, "Wrong size on OrionCardShopCard_OnCardSet");
static_assert(offsetof(OrionCardShopCard_OnCardSet, CardItem) == 0x000000, "Member 'OrionCardShopCard_OnCardSet::CardItem' has a wrong offset!");

// Function OrionUI.OrionCardShopDeckButton.OnDeckSet
// 0x0003 (0x0003 - 0x0000)
struct OrionCardShopDeckButton_OnDeckSet final
{
public:
	bool                                          bIsCuratedDeck;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAffinityType                                 Affinity0;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAffinityType                                 Affinity1;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopDeckButton_OnDeckSet) == 0x000001, "Wrong alignment on OrionCardShopDeckButton_OnDeckSet");
static_assert(sizeof(OrionCardShopDeckButton_OnDeckSet) == 0x000003, "Wrong size on OrionCardShopDeckButton_OnDeckSet");
static_assert(offsetof(OrionCardShopDeckButton_OnDeckSet, bIsCuratedDeck) == 0x000000, "Member 'OrionCardShopDeckButton_OnDeckSet::bIsCuratedDeck' has a wrong offset!");
static_assert(offsetof(OrionCardShopDeckButton_OnDeckSet, Affinity0) == 0x000001, "Member 'OrionCardShopDeckButton_OnDeckSet::Affinity0' has a wrong offset!");
static_assert(offsetof(OrionCardShopDeckButton_OnDeckSet, Affinity1) == 0x000002, "Member 'OrionCardShopDeckButton_OnDeckSet::Affinity1' has a wrong offset!");

// Function OrionUI.OrionCardShopDeckButton.OnSetDistanceFromCenter
// 0x0008 (0x0008 - 0x0000)
struct OrionCardShopDeckButton_OnSetDistanceFromCenter final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopDeckButton_OnSetDistanceFromCenter) == 0x000004, "Wrong alignment on OrionCardShopDeckButton_OnSetDistanceFromCenter");
static_assert(sizeof(OrionCardShopDeckButton_OnSetDistanceFromCenter) == 0x000008, "Wrong size on OrionCardShopDeckButton_OnSetDistanceFromCenter");
static_assert(offsetof(OrionCardShopDeckButton_OnSetDistanceFromCenter, OldValue) == 0x000000, "Member 'OrionCardShopDeckButton_OnSetDistanceFromCenter::OldValue' has a wrong offset!");
static_assert(offsetof(OrionCardShopDeckButton_OnSetDistanceFromCenter, NewValue) == 0x000004, "Member 'OrionCardShopDeckButton_OnSetDistanceFromCenter::NewValue' has a wrong offset!");

// Function OrionUI.OrionCardShopEquipSlot.CanEquipCardIntoSlot
// 0x0010 (0x0010 - 0x0000)
struct OrionCardShopEquipSlot_CanEquipCardIntoSlot final
{
public:
	class UOrionHandEntry*                        EquippingCard;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCardShopEquipSlot_CanEquipCardIntoSlot) == 0x000008, "Wrong alignment on OrionCardShopEquipSlot_CanEquipCardIntoSlot");
static_assert(sizeof(OrionCardShopEquipSlot_CanEquipCardIntoSlot) == 0x000010, "Wrong size on OrionCardShopEquipSlot_CanEquipCardIntoSlot");
static_assert(offsetof(OrionCardShopEquipSlot_CanEquipCardIntoSlot, EquippingCard) == 0x000000, "Member 'OrionCardShopEquipSlot_CanEquipCardIntoSlot::EquippingCard' has a wrong offset!");
static_assert(offsetof(OrionCardShopEquipSlot_CanEquipCardIntoSlot, ReturnValue) == 0x000008, "Member 'OrionCardShopEquipSlot_CanEquipCardIntoSlot::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionCardShopEquipSlot.OnCardSet
// 0x0008 (0x0008 - 0x0000)
struct OrionCardShopEquipSlot_OnCardSet final
{
public:
	const class UOrionMcpCardItemDefinition*      CardItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopEquipSlot_OnCardSet) == 0x000008, "Wrong alignment on OrionCardShopEquipSlot_OnCardSet");
static_assert(sizeof(OrionCardShopEquipSlot_OnCardSet) == 0x000008, "Wrong size on OrionCardShopEquipSlot_OnCardSet");
static_assert(offsetof(OrionCardShopEquipSlot_OnCardSet, CardItem) == 0x000000, "Member 'OrionCardShopEquipSlot_OnCardSet::CardItem' has a wrong offset!");

// Function OrionUI.OrionCardShopEquipSlot.OnGhostCardVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShopEquipSlot_OnGhostCardVisibilityChanged final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopEquipSlot_OnGhostCardVisibilityChanged) == 0x000001, "Wrong alignment on OrionCardShopEquipSlot_OnGhostCardVisibilityChanged");
static_assert(sizeof(OrionCardShopEquipSlot_OnGhostCardVisibilityChanged) == 0x000001, "Wrong size on OrionCardShopEquipSlot_OnGhostCardVisibilityChanged");
static_assert(offsetof(OrionCardShopEquipSlot_OnGhostCardVisibilityChanged, bIsVisible) == 0x000000, "Member 'OrionCardShopEquipSlot_OnGhostCardVisibilityChanged::bIsVisible' has a wrong offset!");

// Function OrionUI.OrionCardShopEquipSlot.OnGlowColorChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionCardShopEquipSlot_OnGlowColorChanged final
{
public:
	bool                                          bIsFromEquipSlot;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopEquipSlot_OnGlowColorChanged) == 0x000001, "Wrong alignment on OrionCardShopEquipSlot_OnGlowColorChanged");
static_assert(sizeof(OrionCardShopEquipSlot_OnGlowColorChanged) == 0x000001, "Wrong size on OrionCardShopEquipSlot_OnGlowColorChanged");
static_assert(offsetof(OrionCardShopEquipSlot_OnGlowColorChanged, bIsFromEquipSlot) == 0x000000, "Member 'OrionCardShopEquipSlot_OnGlowColorChanged::bIsFromEquipSlot' has a wrong offset!");

// Function OrionUI.OrionCardShopInfoPanel.OnCardSet
// 0x0002 (0x0002 - 0x0000)
struct OrionCardShopInfoPanel_OnCardSet final
{
public:
	bool                                          bIsPurchasable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAffordable;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardShopInfoPanel_OnCardSet) == 0x000001, "Wrong alignment on OrionCardShopInfoPanel_OnCardSet");
static_assert(sizeof(OrionCardShopInfoPanel_OnCardSet) == 0x000002, "Wrong size on OrionCardShopInfoPanel_OnCardSet");
static_assert(offsetof(OrionCardShopInfoPanel_OnCardSet, bIsPurchasable) == 0x000000, "Member 'OrionCardShopInfoPanel_OnCardSet::bIsPurchasable' has a wrong offset!");
static_assert(offsetof(OrionCardShopInfoPanel_OnCardSet, bIsAffordable) == 0x000001, "Member 'OrionCardShopInfoPanel_OnCardSet::bIsAffordable' has a wrong offset!");

// Function OrionUI.OrionMatchSummaryMastery.OnXPSimulated
// 0x0001 (0x0001 - 0x0000)
struct OrionMatchSummaryMastery_OnXPSimulated final
{
public:
	bool                                          bIsSimulated;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMatchSummaryMastery_OnXPSimulated) == 0x000001, "Wrong alignment on OrionMatchSummaryMastery_OnXPSimulated");
static_assert(sizeof(OrionMatchSummaryMastery_OnXPSimulated) == 0x000001, "Wrong size on OrionMatchSummaryMastery_OnXPSimulated");
static_assert(offsetof(OrionMatchSummaryMastery_OnXPSimulated, bIsSimulated) == 0x000000, "Member 'OrionMatchSummaryMastery_OnXPSimulated::bIsSimulated' has a wrong offset!");

// Function OrionUI.OrionCardSummaryWidget.OnCardDataSet
// 0x0004 (0x0004 - 0x0000)
struct OrionCardSummaryWidget_OnCardDataSet final
{
public:
	bool                                          bHasGoldCost;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAttackCost;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHealthCost;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEnergyCost;                                    // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCardSummaryWidget_OnCardDataSet) == 0x000001, "Wrong alignment on OrionCardSummaryWidget_OnCardDataSet");
static_assert(sizeof(OrionCardSummaryWidget_OnCardDataSet) == 0x000004, "Wrong size on OrionCardSummaryWidget_OnCardDataSet");
static_assert(offsetof(OrionCardSummaryWidget_OnCardDataSet, bHasGoldCost) == 0x000000, "Member 'OrionCardSummaryWidget_OnCardDataSet::bHasGoldCost' has a wrong offset!");
static_assert(offsetof(OrionCardSummaryWidget_OnCardDataSet, bHasAttackCost) == 0x000001, "Member 'OrionCardSummaryWidget_OnCardDataSet::bHasAttackCost' has a wrong offset!");
static_assert(offsetof(OrionCardSummaryWidget_OnCardDataSet, bHasHealthCost) == 0x000002, "Member 'OrionCardSummaryWidget_OnCardDataSet::bHasHealthCost' has a wrong offset!");
static_assert(offsetof(OrionCardSummaryWidget_OnCardDataSet, bHasEnergyCost) == 0x000003, "Member 'OrionCardSummaryWidget_OnCardDataSet::bHasEnergyCost' has a wrong offset!");

// Function OrionUI.OrionChestSelectionChestItem.OnSetActive
// 0x0002 (0x0002 - 0x0000)
struct OrionChestSelectionChestItem_OnSetActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionChestSelectionChestItem_OnSetActive) == 0x000001, "Wrong alignment on OrionChestSelectionChestItem_OnSetActive");
static_assert(sizeof(OrionChestSelectionChestItem_OnSetActive) == 0x000002, "Wrong size on OrionChestSelectionChestItem_OnSetActive");
static_assert(offsetof(OrionChestSelectionChestItem_OnSetActive, bActive) == 0x000000, "Member 'OrionChestSelectionChestItem_OnSetActive::bActive' has a wrong offset!");
static_assert(offsetof(OrionChestSelectionChestItem_OnSetActive, bInstant) == 0x000001, "Member 'OrionChestSelectionChestItem_OnSetActive::bInstant' has a wrong offset!");

// Function OrionUI.OrionChestSelectionChestItem.OnSetDistanceFromCenter
// 0x000C (0x000C - 0x0000)
struct OrionChestSelectionChestItem_OnSetDistanceFromCenter final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionChestSelectionChestItem_OnSetDistanceFromCenter) == 0x000004, "Wrong alignment on OrionChestSelectionChestItem_OnSetDistanceFromCenter");
static_assert(sizeof(OrionChestSelectionChestItem_OnSetDistanceFromCenter) == 0x00000C, "Wrong size on OrionChestSelectionChestItem_OnSetDistanceFromCenter");
static_assert(offsetof(OrionChestSelectionChestItem_OnSetDistanceFromCenter, OldValue) == 0x000000, "Member 'OrionChestSelectionChestItem_OnSetDistanceFromCenter::OldValue' has a wrong offset!");
static_assert(offsetof(OrionChestSelectionChestItem_OnSetDistanceFromCenter, NewValue) == 0x000004, "Member 'OrionChestSelectionChestItem_OnSetDistanceFromCenter::NewValue' has a wrong offset!");
static_assert(offsetof(OrionChestSelectionChestItem_OnSetDistanceFromCenter, bInstant) == 0x000008, "Member 'OrionChestSelectionChestItem_OnSetDistanceFromCenter::bInstant' has a wrong offset!");

// Function OrionUI.OrionChestSelectionScreen.OnChestsPopulated
// 0x0004 (0x0004 - 0x0000)
struct OrionChestSelectionScreen_OnChestsPopulated final
{
public:
	int32                                         NumChests;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionChestSelectionScreen_OnChestsPopulated) == 0x000004, "Wrong alignment on OrionChestSelectionScreen_OnChestsPopulated");
static_assert(sizeof(OrionChestSelectionScreen_OnChestsPopulated) == 0x000004, "Wrong size on OrionChestSelectionScreen_OnChestsPopulated");
static_assert(offsetof(OrionChestSelectionScreen_OnChestsPopulated, NumChests) == 0x000000, "Member 'OrionChestSelectionScreen_OnChestsPopulated::NumChests' has a wrong offset!");

// Function OrionUI.OrionCMSDisplayWidget.SetOnScreen
// 0x0001 (0x0001 - 0x0000)
struct OrionCMSDisplayWidget_SetOnScreen final
{
public:
	bool                                          InOnScreen;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCMSDisplayWidget_SetOnScreen) == 0x000001, "Wrong alignment on OrionCMSDisplayWidget_SetOnScreen");
static_assert(sizeof(OrionCMSDisplayWidget_SetOnScreen) == 0x000001, "Wrong size on OrionCMSDisplayWidget_SetOnScreen");
static_assert(offsetof(OrionCMSDisplayWidget_SetOnScreen, InOnScreen) == 0x000000, "Member 'OrionCMSDisplayWidget_SetOnScreen::InOnScreen' has a wrong offset!");

// Function OrionUI.PageViewItem.RegisterOnClicked
// 0x0010 (0x0010 - 0x0000)
struct PageViewItem_RegisterOnClicked final
{
public:
	TDelegate<void(class UUserWidget* Widget)>    Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageViewItem_RegisterOnClicked) == 0x000004, "Wrong alignment on PageViewItem_RegisterOnClicked");
static_assert(sizeof(PageViewItem_RegisterOnClicked) == 0x000010, "Wrong size on PageViewItem_RegisterOnClicked");
static_assert(offsetof(PageViewItem_RegisterOnClicked, Callback) == 0x000000, "Member 'PageViewItem_RegisterOnClicked::Callback' has a wrong offset!");

// Function OrionUI.PageViewItem.RegisterOnHover
// 0x0010 (0x0010 - 0x0000)
struct PageViewItem_RegisterOnHover final
{
public:
	TDelegate<void(class UUserWidget* Widget, bool bIsHovered)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageViewItem_RegisterOnHover) == 0x000004, "Wrong alignment on PageViewItem_RegisterOnHover");
static_assert(sizeof(PageViewItem_RegisterOnHover) == 0x000010, "Wrong size on PageViewItem_RegisterOnHover");
static_assert(offsetof(PageViewItem_RegisterOnHover, Callback) == 0x000000, "Member 'PageViewItem_RegisterOnHover::Callback' has a wrong offset!");

// Function OrionUI.PageViewItem.RegisterOnSelected
// 0x0010 (0x0010 - 0x0000)
struct PageViewItem_RegisterOnSelected final
{
public:
	TDelegate<void(class UUserWidget* Widget, bool Selected)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageViewItem_RegisterOnSelected) == 0x000004, "Wrong alignment on PageViewItem_RegisterOnSelected");
static_assert(sizeof(PageViewItem_RegisterOnSelected) == 0x000010, "Wrong size on PageViewItem_RegisterOnSelected");
static_assert(offsetof(PageViewItem_RegisterOnSelected, Callback) == 0x000000, "Member 'PageViewItem_RegisterOnSelected::Callback' has a wrong offset!");

// Function OrionUI.PageViewItem.RegisterOnUnhover
// 0x0010 (0x0010 - 0x0000)
struct PageViewItem_RegisterOnUnhover final
{
public:
	TDelegate<void(class UUserWidget* Widget, bool bIsHovered)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageViewItem_RegisterOnUnhover) == 0x000004, "Wrong alignment on PageViewItem_RegisterOnUnhover");
static_assert(sizeof(PageViewItem_RegisterOnUnhover) == 0x000010, "Wrong size on PageViewItem_RegisterOnUnhover");
static_assert(offsetof(PageViewItem_RegisterOnUnhover, Callback) == 0x000000, "Member 'PageViewItem_RegisterOnUnhover::Callback' has a wrong offset!");

// Function OrionUI.PageViewItem.SetData
// 0x0008 (0x0008 - 0x0000)
struct PageViewItem_SetData final
{
public:
	class UObject*                                SourceData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageViewItem_SetData) == 0x000008, "Wrong alignment on PageViewItem_SetData");
static_assert(sizeof(PageViewItem_SetData) == 0x000008, "Wrong size on PageViewItem_SetData");
static_assert(offsetof(PageViewItem_SetData, SourceData) == 0x000000, "Member 'PageViewItem_SetData::SourceData' has a wrong offset!");

// Function OrionUI.PageViewItem.SetRowColumn
// 0x0008 (0x0008 - 0x0000)
struct PageViewItem_SetRowColumn final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageViewItem_SetRowColumn) == 0x000004, "Wrong alignment on PageViewItem_SetRowColumn");
static_assert(sizeof(PageViewItem_SetRowColumn) == 0x000008, "Wrong size on PageViewItem_SetRowColumn");
static_assert(offsetof(PageViewItem_SetRowColumn, Row) == 0x000000, "Member 'PageViewItem_SetRowColumn::Row' has a wrong offset!");
static_assert(offsetof(PageViewItem_SetRowColumn, Column) == 0x000004, "Member 'PageViewItem_SetRowColumn::Column' has a wrong offset!");

// Function OrionUI.PageViewItem.GetData
// 0x0008 (0x0008 - 0x0000)
struct PageViewItem_GetData final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageViewItem_GetData) == 0x000008, "Wrong alignment on PageViewItem_GetData");
static_assert(sizeof(PageViewItem_GetData) == 0x000008, "Wrong size on PageViewItem_GetData");
static_assert(offsetof(PageViewItem_GetData, ReturnValue) == 0x000000, "Member 'PageViewItem_GetData::ReturnValue' has a wrong offset!");

// Function OrionUI.PlayerActionWidget.SetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerActionWidget_SetSlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerActionWidget_SetSlotIndex) == 0x000004, "Wrong alignment on PlayerActionWidget_SetSlotIndex");
static_assert(sizeof(PlayerActionWidget_SetSlotIndex) == 0x000004, "Wrong size on PlayerActionWidget_SetSlotIndex");
static_assert(offsetof(PlayerActionWidget_SetSlotIndex, SlotIndex) == 0x000000, "Member 'PlayerActionWidget_SetSlotIndex::SlotIndex' has a wrong offset!");

// Function OrionUI.OrionCombatMessageManagerWidget.AddCombatMessageWidget
// 0x0008 (0x0008 - 0x0000)
struct OrionCombatMessageManagerWidget_AddCombatMessageWidget final
{
public:
	class UOrionCombatMessageWidget*              CombatMessageWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageManagerWidget_AddCombatMessageWidget) == 0x000008, "Wrong alignment on OrionCombatMessageManagerWidget_AddCombatMessageWidget");
static_assert(sizeof(OrionCombatMessageManagerWidget_AddCombatMessageWidget) == 0x000008, "Wrong size on OrionCombatMessageManagerWidget_AddCombatMessageWidget");
static_assert(offsetof(OrionCombatMessageManagerWidget_AddCombatMessageWidget, CombatMessageWidget) == 0x000000, "Member 'OrionCombatMessageManagerWidget_AddCombatMessageWidget::CombatMessageWidget' has a wrong offset!");

// Function OrionUI.OrionCombatMessageManagerWidget.OnBuffInfoAdded
// 0x01C0 (0x01C0 - 0x0000)
struct OrionCombatMessageManagerWidget_OnBuffInfoAdded final
{
public:
	struct FOrionJungleBuffInfo                   BuffInfo;                                          // 0x0000(0x01C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageManagerWidget_OnBuffInfoAdded) == 0x000010, "Wrong alignment on OrionCombatMessageManagerWidget_OnBuffInfoAdded");
static_assert(sizeof(OrionCombatMessageManagerWidget_OnBuffInfoAdded) == 0x0001C0, "Wrong size on OrionCombatMessageManagerWidget_OnBuffInfoAdded");
static_assert(offsetof(OrionCombatMessageManagerWidget_OnBuffInfoAdded, BuffInfo) == 0x000000, "Member 'OrionCombatMessageManagerWidget_OnBuffInfoAdded::BuffInfo' has a wrong offset!");

// Function OrionUI.OrionCombatMessageManagerWidget.OnBuffInfoRemoved
// 0x01C0 (0x01C0 - 0x0000)
struct OrionCombatMessageManagerWidget_OnBuffInfoRemoved final
{
public:
	struct FOrionJungleBuffInfo                   BuffInfo;                                          // 0x0000(0x01C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageManagerWidget_OnBuffInfoRemoved) == 0x000010, "Wrong alignment on OrionCombatMessageManagerWidget_OnBuffInfoRemoved");
static_assert(sizeof(OrionCombatMessageManagerWidget_OnBuffInfoRemoved) == 0x0001C0, "Wrong size on OrionCombatMessageManagerWidget_OnBuffInfoRemoved");
static_assert(offsetof(OrionCombatMessageManagerWidget_OnBuffInfoRemoved, BuffInfo) == 0x000000, "Member 'OrionCombatMessageManagerWidget_OnBuffInfoRemoved::BuffInfo' has a wrong offset!");

// Function OrionUI.OrionCombatMessageManagerWidget.OnCanShopChange
// 0x0001 (0x0001 - 0x0000)
struct OrionCombatMessageManagerWidget_OnCanShopChange final
{
public:
	bool                                          bCanShop;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageManagerWidget_OnCanShopChange) == 0x000001, "Wrong alignment on OrionCombatMessageManagerWidget_OnCanShopChange");
static_assert(sizeof(OrionCombatMessageManagerWidget_OnCanShopChange) == 0x000001, "Wrong size on OrionCombatMessageManagerWidget_OnCanShopChange");
static_assert(offsetof(OrionCombatMessageManagerWidget_OnCanShopChange, bCanShop) == 0x000000, "Member 'OrionCombatMessageManagerWidget_OnCanShopChange::bCanShop' has a wrong offset!");

// Function OrionUI.OrionCombatMessageManagerWidget.OnIsInBaseChange
// 0x0001 (0x0001 - 0x0000)
struct OrionCombatMessageManagerWidget_OnIsInBaseChange final
{
public:
	bool                                          bIsInBase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageManagerWidget_OnIsInBaseChange) == 0x000001, "Wrong alignment on OrionCombatMessageManagerWidget_OnIsInBaseChange");
static_assert(sizeof(OrionCombatMessageManagerWidget_OnIsInBaseChange) == 0x000001, "Wrong size on OrionCombatMessageManagerWidget_OnIsInBaseChange");
static_assert(offsetof(OrionCombatMessageManagerWidget_OnIsInBaseChange, bIsInBase) == 0x000000, "Member 'OrionCombatMessageManagerWidget_OnIsInBaseChange::bIsInBase' has a wrong offset!");

// Function OrionUI.OrionCombatMessageManagerWidget.OnShowVictoryScreen
// 0x0002 (0x0002 - 0x0000)
struct OrionCombatMessageManagerWidget_OnShowVictoryScreen final
{
public:
	bool                                          bScreenUp;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionTeam                                    WinningTeam;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageManagerWidget_OnShowVictoryScreen) == 0x000001, "Wrong alignment on OrionCombatMessageManagerWidget_OnShowVictoryScreen");
static_assert(sizeof(OrionCombatMessageManagerWidget_OnShowVictoryScreen) == 0x000002, "Wrong size on OrionCombatMessageManagerWidget_OnShowVictoryScreen");
static_assert(offsetof(OrionCombatMessageManagerWidget_OnShowVictoryScreen, bScreenUp) == 0x000000, "Member 'OrionCombatMessageManagerWidget_OnShowVictoryScreen::bScreenUp' has a wrong offset!");
static_assert(offsetof(OrionCombatMessageManagerWidget_OnShowVictoryScreen, WinningTeam) == 0x000001, "Member 'OrionCombatMessageManagerWidget_OnShowVictoryScreen::WinningTeam' has a wrong offset!");

// Function OrionUI.OrionCombatMessageWidget.SetUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct OrionCombatMessageWidget_SetUsingGamepad final
{
public:
	bool                                          bUsingGamePad;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageWidget_SetUsingGamepad) == 0x000001, "Wrong alignment on OrionCombatMessageWidget_SetUsingGamepad");
static_assert(sizeof(OrionCombatMessageWidget_SetUsingGamepad) == 0x000001, "Wrong size on OrionCombatMessageWidget_SetUsingGamepad");
static_assert(offsetof(OrionCombatMessageWidget_SetUsingGamepad, bUsingGamePad) == 0x000000, "Member 'OrionCombatMessageWidget_SetUsingGamepad::bUsingGamePad' has a wrong offset!");

// Function OrionUI.OrionCombatMessageWidget.GetCombatMessageState
// 0x0001 (0x0001 - 0x0000)
struct OrionCombatMessageWidget_GetCombatMessageState final
{
public:
	EOrionCombatMessageState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageWidget_GetCombatMessageState) == 0x000001, "Wrong alignment on OrionCombatMessageWidget_GetCombatMessageState");
static_assert(sizeof(OrionCombatMessageWidget_GetCombatMessageState) == 0x000001, "Wrong size on OrionCombatMessageWidget_GetCombatMessageState");
static_assert(offsetof(OrionCombatMessageWidget_GetCombatMessageState, ReturnValue) == 0x000000, "Member 'OrionCombatMessageWidget_GetCombatMessageState::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionCombatMessageWidget.GetCombatMessageType
// 0x0001 (0x0001 - 0x0000)
struct OrionCombatMessageWidget_GetCombatMessageType final
{
public:
	EOrionCombatMessageType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageWidget_GetCombatMessageType) == 0x000001, "Wrong alignment on OrionCombatMessageWidget_GetCombatMessageType");
static_assert(sizeof(OrionCombatMessageWidget_GetCombatMessageType) == 0x000001, "Wrong size on OrionCombatMessageWidget_GetCombatMessageType");
static_assert(offsetof(OrionCombatMessageWidget_GetCombatMessageType, ReturnValue) == 0x000000, "Member 'OrionCombatMessageWidget_GetCombatMessageType::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionCombatMessageWidget.IsPersistentMessage
// 0x0001 (0x0001 - 0x0000)
struct OrionCombatMessageWidget_IsPersistentMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCombatMessageWidget_IsPersistentMessage) == 0x000001, "Wrong alignment on OrionCombatMessageWidget_IsPersistentMessage");
static_assert(sizeof(OrionCombatMessageWidget_IsPersistentMessage) == 0x000001, "Wrong size on OrionCombatMessageWidget_IsPersistentMessage");
static_assert(offsetof(OrionCombatMessageWidget_IsPersistentMessage, ReturnValue) == 0x000000, "Member 'OrionCombatMessageWidget_IsPersistentMessage::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionCommunityScreen.OnTabChanged
// 0x0008 (0x0008 - 0x0000)
struct OrionCommunityScreen_OnTabChanged final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionCommunityScreen_OnTabChanged) == 0x000004, "Wrong alignment on OrionCommunityScreen_OnTabChanged");
static_assert(sizeof(OrionCommunityScreen_OnTabChanged) == 0x000008, "Wrong size on OrionCommunityScreen_OnTabChanged");
static_assert(offsetof(OrionCommunityScreen_OnTabChanged, TabId) == 0x000000, "Member 'OrionCommunityScreen_OnTabChanged::TabId' has a wrong offset!");

// Function OrionUI.OrionDailyLoginRewardScreen.OnClaim
// 0x0001 (0x0001 - 0x0000)
struct OrionDailyLoginRewardScreen_OnClaim final
{
public:
	bool                                          bDidPreviewDayChange;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDailyLoginRewardScreen_OnClaim) == 0x000001, "Wrong alignment on OrionDailyLoginRewardScreen_OnClaim");
static_assert(sizeof(OrionDailyLoginRewardScreen_OnClaim) == 0x000001, "Wrong size on OrionDailyLoginRewardScreen_OnClaim");
static_assert(offsetof(OrionDailyLoginRewardScreen_OnClaim, bDidPreviewDayChange) == 0x000000, "Member 'OrionDailyLoginRewardScreen_OnClaim::bDidPreviewDayChange' has a wrong offset!");

// Function OrionUI.OrionDailyLoginRewardScreen.OnDataSet
// 0x0001 (0x0001 - 0x0000)
struct OrionDailyLoginRewardScreen_OnDataSet final
{
public:
	bool                                          bCanClaim;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDailyLoginRewardScreen_OnDataSet) == 0x000001, "Wrong alignment on OrionDailyLoginRewardScreen_OnDataSet");
static_assert(sizeof(OrionDailyLoginRewardScreen_OnDataSet) == 0x000001, "Wrong size on OrionDailyLoginRewardScreen_OnDataSet");
static_assert(offsetof(OrionDailyLoginRewardScreen_OnDataSet, bCanClaim) == 0x000000, "Member 'OrionDailyLoginRewardScreen_OnDataSet::bCanClaim' has a wrong offset!");

// Function OrionUI.OrionDailyLoginRewardScreen.OnPreviewPercentSet
// 0x0008 (0x0008 - 0x0000)
struct OrionDailyLoginRewardScreen_OnPreviewPercentSet final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionDailyRewardPreviewTotalDays             TotalDays;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDailyLoginRewardScreen_OnPreviewPercentSet) == 0x000004, "Wrong alignment on OrionDailyLoginRewardScreen_OnPreviewPercentSet");
static_assert(sizeof(OrionDailyLoginRewardScreen_OnPreviewPercentSet) == 0x000008, "Wrong size on OrionDailyLoginRewardScreen_OnPreviewPercentSet");
static_assert(offsetof(OrionDailyLoginRewardScreen_OnPreviewPercentSet, Percent) == 0x000000, "Member 'OrionDailyLoginRewardScreen_OnPreviewPercentSet::Percent' has a wrong offset!");
static_assert(offsetof(OrionDailyLoginRewardScreen_OnPreviewPercentSet, TotalDays) == 0x000004, "Member 'OrionDailyLoginRewardScreen_OnPreviewPercentSet::TotalDays' has a wrong offset!");

// Function OrionUI.OrionDailyLoginRewardScreen.SetRewardItems
// 0x0010 (0x0010 - 0x0000)
struct OrionDailyLoginRewardScreen_SetRewardItems final
{
public:
	TArray<class UOrionDailyRewardItem*>          DailyRewardItems;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDailyLoginRewardScreen_SetRewardItems) == 0x000008, "Wrong alignment on OrionDailyLoginRewardScreen_SetRewardItems");
static_assert(sizeof(OrionDailyLoginRewardScreen_SetRewardItems) == 0x000010, "Wrong size on OrionDailyLoginRewardScreen_SetRewardItems");
static_assert(offsetof(OrionDailyLoginRewardScreen_SetRewardItems, DailyRewardItems) == 0x000000, "Member 'OrionDailyLoginRewardScreen_SetRewardItems::DailyRewardItems' has a wrong offset!");

// Function OrionUI.OrionDailyQuestMissionProgress.OnQuestDataSet
// 0x0001 (0x0001 - 0x0000)
struct OrionDailyQuestMissionProgress_OnQuestDataSet final
{
public:
	bool                                          bComplete;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDailyQuestMissionProgress_OnQuestDataSet) == 0x000001, "Wrong alignment on OrionDailyQuestMissionProgress_OnQuestDataSet");
static_assert(sizeof(OrionDailyQuestMissionProgress_OnQuestDataSet) == 0x000001, "Wrong size on OrionDailyQuestMissionProgress_OnQuestDataSet");
static_assert(offsetof(OrionDailyQuestMissionProgress_OnQuestDataSet, bComplete) == 0x000000, "Member 'OrionDailyQuestMissionProgress_OnQuestDataSet::bComplete' has a wrong offset!");

// Function OrionUI.OrionDailyRewardItem.OnDataSet
// 0x0001 (0x0001 - 0x0000)
struct OrionDailyRewardItem_OnDataSet final
{
public:
	EOrionDailyRewardDayType                      DayType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDailyRewardItem_OnDataSet) == 0x000001, "Wrong alignment on OrionDailyRewardItem_OnDataSet");
static_assert(sizeof(OrionDailyRewardItem_OnDataSet) == 0x000001, "Wrong size on OrionDailyRewardItem_OnDataSet");
static_assert(offsetof(OrionDailyRewardItem_OnDataSet, DayType) == 0x000000, "Member 'OrionDailyRewardItem_OnDataSet::DayType' has a wrong offset!");

// Function OrionUI.OrionDamageOverlay.OnDamageUpdate
// 0x0030 (0x0030 - 0x0000)
struct OrionDamageOverlay_OnDamageUpdate final
{
public:
	struct FOrionUIDamageEventInfo                UIDamageEventInfo;                                 // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDamageOverlay_OnDamageUpdate) == 0x000008, "Wrong alignment on OrionDamageOverlay_OnDamageUpdate");
static_assert(sizeof(OrionDamageOverlay_OnDamageUpdate) == 0x000030, "Wrong size on OrionDamageOverlay_OnDamageUpdate");
static_assert(offsetof(OrionDamageOverlay_OnDamageUpdate, UIDamageEventInfo) == 0x000000, "Member 'OrionDamageOverlay_OnDamageUpdate::UIDamageEventInfo' has a wrong offset!");

// Function OrionUI.OrionDeathCamWidget.OnLocalHeroDeath
// 0x0068 (0x0068 - 0x0000)
struct OrionDeathCamWidget_OnLocalHeroDeath final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeathCamWidget_OnLocalHeroDeath) == 0x000008, "Wrong alignment on OrionDeathCamWidget_OnLocalHeroDeath");
static_assert(sizeof(OrionDeathCamWidget_OnLocalHeroDeath) == 0x000068, "Wrong size on OrionDeathCamWidget_OnLocalHeroDeath");
static_assert(offsetof(OrionDeathCamWidget_OnLocalHeroDeath, UpdatedTeamInfo) == 0x000000, "Member 'OrionDeathCamWidget_OnLocalHeroDeath::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionDeathCamWidget.OnLocalHeroSpawn
// 0x0068 (0x0068 - 0x0000)
struct OrionDeathCamWidget_OnLocalHeroSpawn final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeathCamWidget_OnLocalHeroSpawn) == 0x000008, "Wrong alignment on OrionDeathCamWidget_OnLocalHeroSpawn");
static_assert(sizeof(OrionDeathCamWidget_OnLocalHeroSpawn) == 0x000068, "Wrong size on OrionDeathCamWidget_OnLocalHeroSpawn");
static_assert(offsetof(OrionDeathCamWidget_OnLocalHeroSpawn, UpdatedTeamInfo) == 0x000000, "Member 'OrionDeathCamWidget_OnLocalHeroSpawn::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionDeathCamWidget.PlayReplay
// 0x0010 (0x0010 - 0x0000)
struct OrionDeathCamWidget_PlayReplay final
{
public:
	TDelegate<void(bool bWasSuccessful)>          OnPlayReplayComplete;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeathCamWidget_PlayReplay) == 0x000004, "Wrong alignment on OrionDeathCamWidget_PlayReplay");
static_assert(sizeof(OrionDeathCamWidget_PlayReplay) == 0x000010, "Wrong size on OrionDeathCamWidget_PlayReplay");
static_assert(offsetof(OrionDeathCamWidget_PlayReplay, OnPlayReplayComplete) == 0x000000, "Member 'OrionDeathCamWidget_PlayReplay::OnPlayReplayComplete' has a wrong offset!");

// Function OrionUI.OrionDeathRecapPanel.OnLocalHeroDeath
// 0x0068 (0x0068 - 0x0000)
struct OrionDeathRecapPanel_OnLocalHeroDeath final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeathRecapPanel_OnLocalHeroDeath) == 0x000008, "Wrong alignment on OrionDeathRecapPanel_OnLocalHeroDeath");
static_assert(sizeof(OrionDeathRecapPanel_OnLocalHeroDeath) == 0x000068, "Wrong size on OrionDeathRecapPanel_OnLocalHeroDeath");
static_assert(offsetof(OrionDeathRecapPanel_OnLocalHeroDeath, UpdatedTeamInfo) == 0x000000, "Member 'OrionDeathRecapPanel_OnLocalHeroDeath::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionDeathRecapPanel.OnLocalHeroSpawn
// 0x0068 (0x0068 - 0x0000)
struct OrionDeathRecapPanel_OnLocalHeroSpawn final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeathRecapPanel_OnLocalHeroSpawn) == 0x000008, "Wrong alignment on OrionDeathRecapPanel_OnLocalHeroSpawn");
static_assert(sizeof(OrionDeathRecapPanel_OnLocalHeroSpawn) == 0x000068, "Wrong size on OrionDeathRecapPanel_OnLocalHeroSpawn");
static_assert(offsetof(OrionDeathRecapPanel_OnLocalHeroSpawn, UpdatedTeamInfo) == 0x000000, "Member 'OrionDeathRecapPanel_OnLocalHeroSpawn::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionDebugHeroSelect.HandleHeroSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionDebugHeroSelect_HandleHeroSelected final
{
public:
	class UObject*                                SelectedHero;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDebugHeroSelect_HandleHeroSelected) == 0x000008, "Wrong alignment on OrionDebugHeroSelect_HandleHeroSelected");
static_assert(sizeof(OrionDebugHeroSelect_HandleHeroSelected) == 0x000010, "Wrong size on OrionDebugHeroSelect_HandleHeroSelected");
static_assert(offsetof(OrionDebugHeroSelect_HandleHeroSelected, SelectedHero) == 0x000000, "Member 'OrionDebugHeroSelect_HandleHeroSelected::SelectedHero' has a wrong offset!");
static_assert(offsetof(OrionDebugHeroSelect_HandleHeroSelected, bSelected) == 0x000008, "Member 'OrionDebugHeroSelect_HandleHeroSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionDebugHeroSelect.HandleSkinSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionDebugHeroSelect_HandleSkinSelected final
{
public:
	class UObject*                                SelectedSkin;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDebugHeroSelect_HandleSkinSelected) == 0x000008, "Wrong alignment on OrionDebugHeroSelect_HandleSkinSelected");
static_assert(sizeof(OrionDebugHeroSelect_HandleSkinSelected) == 0x000010, "Wrong size on OrionDebugHeroSelect_HandleSkinSelected");
static_assert(offsetof(OrionDebugHeroSelect_HandleSkinSelected, SelectedSkin) == 0x000000, "Member 'OrionDebugHeroSelect_HandleSkinSelected::SelectedSkin' has a wrong offset!");
static_assert(offsetof(OrionDebugHeroSelect_HandleSkinSelected, bSelected) == 0x000008, "Member 'OrionDebugHeroSelect_HandleSkinSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionDebugHeroSelect.HandleVariantSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionDebugHeroSelect_HandleVariantSelected final
{
public:
	class UObject*                                SelectedVariant;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDebugHeroSelect_HandleVariantSelected) == 0x000008, "Wrong alignment on OrionDebugHeroSelect_HandleVariantSelected");
static_assert(sizeof(OrionDebugHeroSelect_HandleVariantSelected) == 0x000010, "Wrong size on OrionDebugHeroSelect_HandleVariantSelected");
static_assert(offsetof(OrionDebugHeroSelect_HandleVariantSelected, SelectedVariant) == 0x000000, "Member 'OrionDebugHeroSelect_HandleVariantSelected::SelectedVariant' has a wrong offset!");
static_assert(offsetof(OrionDebugHeroSelect_HandleVariantSelected, bSelected) == 0x000008, "Member 'OrionDebugHeroSelect_HandleVariantSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderPip.GetGemMaterial
// 0x0008 (0x0008 - 0x0000)
struct OrionDeckBuilderPip_GetGemMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderPip_GetGemMaterial) == 0x000008, "Wrong alignment on OrionDeckBuilderPip_GetGemMaterial");
static_assert(sizeof(OrionDeckBuilderPip_GetGemMaterial) == 0x000008, "Wrong size on OrionDeckBuilderPip_GetGemMaterial");
static_assert(offsetof(OrionDeckBuilderPip_GetGemMaterial, ReturnValue) == 0x000000, "Member 'OrionDeckBuilderPip_GetGemMaterial::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionMcpTypeRewardImage.SetImageWithDefinition
// 0x0008 (0x0008 - 0x0000)
struct OrionMcpTypeRewardImage_SetImageWithDefinition final
{
public:
	const class UOrionMcpItemDefinition*          ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMcpTypeRewardImage_SetImageWithDefinition) == 0x000008, "Wrong alignment on OrionMcpTypeRewardImage_SetImageWithDefinition");
static_assert(sizeof(OrionMcpTypeRewardImage_SetImageWithDefinition) == 0x000008, "Wrong size on OrionMcpTypeRewardImage_SetImageWithDefinition");
static_assert(offsetof(OrionMcpTypeRewardImage_SetImageWithDefinition, ItemDefinition) == 0x000000, "Member 'OrionMcpTypeRewardImage_SetImageWithDefinition::ItemDefinition' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_Cards.DynamicSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct OrionDeckBuilderTab_Cards_DynamicSearchTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderTab_Cards_DynamicSearchTextChanged) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_Cards_DynamicSearchTextChanged");
static_assert(sizeof(OrionDeckBuilderTab_Cards_DynamicSearchTextChanged) == 0x000018, "Wrong size on OrionDeckBuilderTab_Cards_DynamicSearchTextChanged");
static_assert(offsetof(OrionDeckBuilderTab_Cards_DynamicSearchTextChanged, NewText) == 0x000000, "Member 'OrionDeckBuilderTab_Cards_DynamicSearchTextChanged::NewText' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_Cards.DynamicSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted");
static_assert(sizeof(OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted) == 0x000020, "Wrong size on OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted");
static_assert(offsetof(OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted, NewText) == 0x000000, "Member 'OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted::NewText' has a wrong offset!");
static_assert(offsetof(OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted, CommitMethod) == 0x000018, "Member 'OrionDeckBuilderTab_Cards_DynamicSearchTextCommitted::CommitMethod' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_Cards.HandleCardHovered
// 0x0010 (0x0010 - 0x0000)
struct OrionDeckBuilderTab_Cards_HandleCardHovered final
{
public:
	class UObject*                                HoveredItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDeckBuilderTab_Cards_HandleCardHovered) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_Cards_HandleCardHovered");
static_assert(sizeof(OrionDeckBuilderTab_Cards_HandleCardHovered) == 0x000010, "Wrong size on OrionDeckBuilderTab_Cards_HandleCardHovered");
static_assert(offsetof(OrionDeckBuilderTab_Cards_HandleCardHovered, HoveredItem) == 0x000000, "Member 'OrionDeckBuilderTab_Cards_HandleCardHovered::HoveredItem' has a wrong offset!");
static_assert(offsetof(OrionDeckBuilderTab_Cards_HandleCardHovered, bIsHovered) == 0x000008, "Member 'OrionDeckBuilderTab_Cards_HandleCardHovered::bIsHovered' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_Cards.HandleNewCardSelected
// 0x0008 (0x0008 - 0x0000)
struct OrionDeckBuilderTab_Cards_HandleNewCardSelected final
{
public:
	class UObject*                                SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderTab_Cards_HandleNewCardSelected) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_Cards_HandleNewCardSelected");
static_assert(sizeof(OrionDeckBuilderTab_Cards_HandleNewCardSelected) == 0x000008, "Wrong size on OrionDeckBuilderTab_Cards_HandleNewCardSelected");
static_assert(offsetof(OrionDeckBuilderTab_Cards_HandleNewCardSelected, SelectedItem) == 0x000000, "Member 'OrionDeckBuilderTab_Cards_HandleNewCardSelected::SelectedItem' has a wrong offset!");

// Function OrionUI.OrionObjectListItem.SetData
// 0x0008 (0x0008 - 0x0000)
struct OrionObjectListItem_SetData final
{
public:
	class UObject*                                InData;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionObjectListItem_SetData) == 0x000008, "Wrong alignment on OrionObjectListItem_SetData");
static_assert(sizeof(OrionObjectListItem_SetData) == 0x000008, "Wrong size on OrionObjectListItem_SetData");
static_assert(offsetof(OrionObjectListItem_SetData, InData) == 0x000000, "Member 'OrionObjectListItem_SetData::InData' has a wrong offset!");

// Function OrionUI.OrionObjectListItem.GetData
// 0x0008 (0x0008 - 0x0000)
struct OrionObjectListItem_GetData final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionObjectListItem_GetData) == 0x000008, "Wrong alignment on OrionObjectListItem_GetData");
static_assert(sizeof(OrionObjectListItem_GetData) == 0x000008, "Wrong size on OrionObjectListItem_GetData");
static_assert(offsetof(OrionObjectListItem_GetData, ReturnValue) == 0x000000, "Member 'OrionObjectListItem_GetData::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_DeckCustomize.DynamicNameChanged
// 0x0018 (0x0018 - 0x0000)
struct OrionDeckBuilderTab_DeckCustomize_DynamicNameChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderTab_DeckCustomize_DynamicNameChanged) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_DeckCustomize_DynamicNameChanged");
static_assert(sizeof(OrionDeckBuilderTab_DeckCustomize_DynamicNameChanged) == 0x000018, "Wrong size on OrionDeckBuilderTab_DeckCustomize_DynamicNameChanged");
static_assert(offsetof(OrionDeckBuilderTab_DeckCustomize_DynamicNameChanged, NewText) == 0x000000, "Member 'OrionDeckBuilderTab_DeckCustomize_DynamicNameChanged::NewText' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_DeckCustomize.DynamicNameCommitted
// 0x0020 (0x0020 - 0x0000)
struct OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted");
static_assert(sizeof(OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted) == 0x000020, "Wrong size on OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted");
static_assert(offsetof(OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted, NewText) == 0x000000, "Member 'OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted::NewText' has a wrong offset!");
static_assert(offsetof(OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted, CommitMethod) == 0x000018, "Member 'OrionDeckBuilderTab_DeckCustomize_DynamicNameCommitted::CommitMethod' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_Gems.DynamicSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct OrionDeckBuilderTab_Gems_DynamicSearchTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderTab_Gems_DynamicSearchTextChanged) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_Gems_DynamicSearchTextChanged");
static_assert(sizeof(OrionDeckBuilderTab_Gems_DynamicSearchTextChanged) == 0x000018, "Wrong size on OrionDeckBuilderTab_Gems_DynamicSearchTextChanged");
static_assert(offsetof(OrionDeckBuilderTab_Gems_DynamicSearchTextChanged, NewText) == 0x000000, "Member 'OrionDeckBuilderTab_Gems_DynamicSearchTextChanged::NewText' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_Gems.DynamicSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted");
static_assert(sizeof(OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted) == 0x000020, "Wrong size on OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted");
static_assert(offsetof(OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted, NewText) == 0x000000, "Member 'OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted::NewText' has a wrong offset!");
static_assert(offsetof(OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted, CommitMethod) == 0x000018, "Member 'OrionDeckBuilderTab_Gems_DynamicSearchTextCommitted::CommitMethod' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderTab_Gems.OnGemRecount
// 0x0010 (0x0010 - 0x0000)
struct OrionDeckBuilderTab_Gems_OnGemRecount final
{
public:
	TArray<class UOrionMcpGemItem*>               NewGems;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderTab_Gems_OnGemRecount) == 0x000008, "Wrong alignment on OrionDeckBuilderTab_Gems_OnGemRecount");
static_assert(sizeof(OrionDeckBuilderTab_Gems_OnGemRecount) == 0x000010, "Wrong size on OrionDeckBuilderTab_Gems_OnGemRecount");
static_assert(offsetof(OrionDeckBuilderTab_Gems_OnGemRecount, NewGems) == 0x000000, "Member 'OrionDeckBuilderTab_Gems_OnGemRecount::NewGems' has a wrong offset!");

// Function OrionUI.OrionRecipeCostDisplay.OnCanAffordLargeIcon
// 0x0001 (0x0001 - 0x0000)
struct OrionRecipeCostDisplay_OnCanAffordLargeIcon final
{
public:
	bool                                          bCanAfford;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRecipeCostDisplay_OnCanAffordLargeIcon) == 0x000001, "Wrong alignment on OrionRecipeCostDisplay_OnCanAffordLargeIcon");
static_assert(sizeof(OrionRecipeCostDisplay_OnCanAffordLargeIcon) == 0x000001, "Wrong size on OrionRecipeCostDisplay_OnCanAffordLargeIcon");
static_assert(offsetof(OrionRecipeCostDisplay_OnCanAffordLargeIcon, bCanAfford) == 0x000000, "Member 'OrionRecipeCostDisplay_OnCanAffordLargeIcon::bCanAfford' has a wrong offset!");

// Function OrionUI.OrionRecipeCostDisplay.OnCanAffordPrimary
// 0x0001 (0x0001 - 0x0000)
struct OrionRecipeCostDisplay_OnCanAffordPrimary final
{
public:
	bool                                          bCanAfford;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRecipeCostDisplay_OnCanAffordPrimary) == 0x000001, "Wrong alignment on OrionRecipeCostDisplay_OnCanAffordPrimary");
static_assert(sizeof(OrionRecipeCostDisplay_OnCanAffordPrimary) == 0x000001, "Wrong size on OrionRecipeCostDisplay_OnCanAffordPrimary");
static_assert(offsetof(OrionRecipeCostDisplay_OnCanAffordPrimary, bCanAfford) == 0x000000, "Member 'OrionRecipeCostDisplay_OnCanAffordPrimary::bCanAfford' has a wrong offset!");

// Function OrionUI.OrionTabButton.OnSetListType
// 0x0001 (0x0001 - 0x0000)
struct OrionTabButton_OnSetListType final
{
public:
	EOrionTabListType                             ListType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabButton_OnSetListType) == 0x000001, "Wrong alignment on OrionTabButton_OnSetListType");
static_assert(sizeof(OrionTabButton_OnSetListType) == 0x000001, "Wrong size on OrionTabButton_OnSetListType");
static_assert(offsetof(OrionTabButton_OnSetListType, ListType) == 0x000000, "Member 'OrionTabButton_OnSetListType::ListType' has a wrong offset!");

// Function OrionUI.OrionTabButton.SetTabTitle
// 0x0018 (0x0018 - 0x0000)
struct OrionTabButton_SetTabTitle final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabButton_SetTabTitle) == 0x000008, "Wrong alignment on OrionTabButton_SetTabTitle");
static_assert(sizeof(OrionTabButton_SetTabTitle) == 0x000018, "Wrong size on OrionTabButton_SetTabTitle");
static_assert(offsetof(OrionTabButton_SetTabTitle, TitleText) == 0x000000, "Member 'OrionTabButton_SetTabTitle::TitleText' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderWidget.SetActiveDeck
// 0x0008 (0x0008 - 0x0000)
struct OrionDeckBuilderWidget_SetActiveDeck final
{
public:
	class UOrionMcpDeckItem*                      DeckItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderWidget_SetActiveDeck) == 0x000008, "Wrong alignment on OrionDeckBuilderWidget_SetActiveDeck");
static_assert(sizeof(OrionDeckBuilderWidget_SetActiveDeck) == 0x000008, "Wrong size on OrionDeckBuilderWidget_SetActiveDeck");
static_assert(offsetof(OrionDeckBuilderWidget_SetActiveDeck, DeckItem) == 0x000000, "Member 'OrionDeckBuilderWidget_SetActiveDeck::DeckItem' has a wrong offset!");

// Function OrionUI.OrionDeckBuilderWidget.SetSavingText
// 0x0001 (0x0001 - 0x0000)
struct OrionDeckBuilderWidget_SetSavingText final
{
public:
	bool                                          bIsSaving;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckBuilderWidget_SetSavingText) == 0x000001, "Wrong alignment on OrionDeckBuilderWidget_SetSavingText");
static_assert(sizeof(OrionDeckBuilderWidget_SetSavingText) == 0x000001, "Wrong size on OrionDeckBuilderWidget_SetSavingText");
static_assert(offsetof(OrionDeckBuilderWidget_SetSavingText, bIsSaving) == 0x000000, "Member 'OrionDeckBuilderWidget_SetSavingText::bIsSaving' has a wrong offset!");

// Function OrionUI.OrionDeckCollection.DeckEntryClicked
// 0x0010 (0x0010 - 0x0000)
struct OrionDeckCollection_DeckEntryClicked final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDeckCollection_DeckEntryClicked) == 0x000008, "Wrong alignment on OrionDeckCollection_DeckEntryClicked");
static_assert(sizeof(OrionDeckCollection_DeckEntryClicked) == 0x000010, "Wrong size on OrionDeckCollection_DeckEntryClicked");
static_assert(offsetof(OrionDeckCollection_DeckEntryClicked, Item) == 0x000000, "Member 'OrionDeckCollection_DeckEntryClicked::Item' has a wrong offset!");
static_assert(offsetof(OrionDeckCollection_DeckEntryClicked, bIsSelected) == 0x000008, "Member 'OrionDeckCollection_DeckEntryClicked::bIsSelected' has a wrong offset!");

// Function OrionUI.OrionMiniMap.OnTeamChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionMiniMap_OnTeamChanged final
{
public:
	EOrionTeam                                    NewTeamNum;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMiniMap_OnTeamChanged) == 0x000001, "Wrong alignment on OrionMiniMap_OnTeamChanged");
static_assert(sizeof(OrionMiniMap_OnTeamChanged) == 0x000001, "Wrong size on OrionMiniMap_OnTeamChanged");
static_assert(offsetof(OrionMiniMap_OnTeamChanged, NewTeamNum) == 0x000000, "Member 'OrionMiniMap_OnTeamChanged::NewTeamNum' has a wrong offset!");

// Function OrionUI.OrionMiniMap.SetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct OrionMiniMap_SetLocalPlayerController final
{
public:
	class APlayerController*                      LocalPlayerController;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMiniMap_SetLocalPlayerController) == 0x000008, "Wrong alignment on OrionMiniMap_SetLocalPlayerController");
static_assert(sizeof(OrionMiniMap_SetLocalPlayerController) == 0x000008, "Wrong size on OrionMiniMap_SetLocalPlayerController");
static_assert(offsetof(OrionMiniMap_SetLocalPlayerController, LocalPlayerController) == 0x000000, "Member 'OrionMiniMap_SetLocalPlayerController::LocalPlayerController' has a wrong offset!");

// Function OrionUI.OrionMiniMap.SetMapModeIsLarge
// 0x0001 (0x0001 - 0x0000)
struct OrionMiniMap_SetMapModeIsLarge final
{
public:
	bool                                          bIsLargeMap;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMiniMap_SetMapModeIsLarge) == 0x000001, "Wrong alignment on OrionMiniMap_SetMapModeIsLarge");
static_assert(sizeof(OrionMiniMap_SetMapModeIsLarge) == 0x000001, "Wrong size on OrionMiniMap_SetMapModeIsLarge");
static_assert(offsetof(OrionMiniMap_SetMapModeIsLarge, bIsLargeMap) == 0x000000, "Member 'OrionMiniMap_SetMapModeIsLarge::bIsLargeMap' has a wrong offset!");

// Function OrionUI.OrionMiniMap.GetMapModeIsLarge
// 0x0001 (0x0001 - 0x0000)
struct OrionMiniMap_GetMapModeIsLarge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMiniMap_GetMapModeIsLarge) == 0x000001, "Wrong alignment on OrionMiniMap_GetMapModeIsLarge");
static_assert(sizeof(OrionMiniMap_GetMapModeIsLarge) == 0x000001, "Wrong size on OrionMiniMap_GetMapModeIsLarge");
static_assert(offsetof(OrionMiniMap_GetMapModeIsLarge, ReturnValue) == 0x000000, "Member 'OrionMiniMap_GetMapModeIsLarge::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionDeckListEntry.OnDeckSet
// 0x0002 (0x0002 - 0x0000)
struct OrionDeckListEntry_OnDeckSet final
{
public:
	EAffinityType                                 Affinity0;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAffinityType                                 Affinity1;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDeckListEntry_OnDeckSet) == 0x000001, "Wrong alignment on OrionDeckListEntry_OnDeckSet");
static_assert(sizeof(OrionDeckListEntry_OnDeckSet) == 0x000002, "Wrong size on OrionDeckListEntry_OnDeckSet");
static_assert(offsetof(OrionDeckListEntry_OnDeckSet, Affinity0) == 0x000000, "Member 'OrionDeckListEntry_OnDeckSet::Affinity0' has a wrong offset!");
static_assert(offsetof(OrionDeckListEntry_OnDeckSet, Affinity1) == 0x000001, "Member 'OrionDeckListEntry_OnDeckSet::Affinity1' has a wrong offset!");

// Function OrionUI.OrionSinglePlayerRating.RecordNewRating
// 0x0001 (0x0001 - 0x0000)
struct OrionSinglePlayerRating_RecordNewRating final
{
public:
	EPlayerRatingResult                           InRatingValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSinglePlayerRating_RecordNewRating) == 0x000001, "Wrong alignment on OrionSinglePlayerRating_RecordNewRating");
static_assert(sizeof(OrionSinglePlayerRating_RecordNewRating) == 0x000001, "Wrong size on OrionSinglePlayerRating_RecordNewRating");
static_assert(offsetof(OrionSinglePlayerRating_RecordNewRating, InRatingValue) == 0x000000, "Member 'OrionSinglePlayerRating_RecordNewRating::InRatingValue' has a wrong offset!");

// Function OrionUI.OrionSinglePlayerRating.RecordRatingInternal
// 0x0001 (0x0001 - 0x0000)
struct OrionSinglePlayerRating_RecordRatingInternal final
{
public:
	EPlayerRatingResult                           Rating;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSinglePlayerRating_RecordRatingInternal) == 0x000001, "Wrong alignment on OrionSinglePlayerRating_RecordRatingInternal");
static_assert(sizeof(OrionSinglePlayerRating_RecordRatingInternal) == 0x000001, "Wrong size on OrionSinglePlayerRating_RecordRatingInternal");
static_assert(offsetof(OrionSinglePlayerRating_RecordRatingInternal, Rating) == 0x000000, "Member 'OrionSinglePlayerRating_RecordRatingInternal::Rating' has a wrong offset!");

// Function OrionUI.OrionSinglePlayerRating.UpdateButtonText
// 0x0018 (0x0018 - 0x0000)
struct OrionSinglePlayerRating_UpdateButtonText final
{
public:
	class FText                                   _Text;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSinglePlayerRating_UpdateButtonText) == 0x000008, "Wrong alignment on OrionSinglePlayerRating_UpdateButtonText");
static_assert(sizeof(OrionSinglePlayerRating_UpdateButtonText) == 0x000018, "Wrong size on OrionSinglePlayerRating_UpdateButtonText");
static_assert(offsetof(OrionSinglePlayerRating_UpdateButtonText, _Text) == 0x000000, "Member 'OrionSinglePlayerRating_UpdateButtonText::_Text' has a wrong offset!");

// Function OrionUI.OrionDefaultButton.SetHoveredContentColor
// 0x0001 (0x0001 - 0x0000)
struct OrionDefaultButton_SetHoveredContentColor final
{
public:
	EOrionTextColor                               InHoveredTextColor;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDefaultButton_SetHoveredContentColor) == 0x000001, "Wrong alignment on OrionDefaultButton_SetHoveredContentColor");
static_assert(sizeof(OrionDefaultButton_SetHoveredContentColor) == 0x000001, "Wrong size on OrionDefaultButton_SetHoveredContentColor");
static_assert(offsetof(OrionDefaultButton_SetHoveredContentColor, InHoveredTextColor) == 0x000000, "Member 'OrionDefaultButton_SetHoveredContentColor::InHoveredTextColor' has a wrong offset!");

// Function OrionUI.OrionDefaultButton.SetNormalContentColor
// 0x0001 (0x0001 - 0x0000)
struct OrionDefaultButton_SetNormalContentColor final
{
public:
	EOrionTextColor                               InNormalTextColor;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDefaultButton_SetNormalContentColor) == 0x000001, "Wrong alignment on OrionDefaultButton_SetNormalContentColor");
static_assert(sizeof(OrionDefaultButton_SetNormalContentColor) == 0x000001, "Wrong size on OrionDefaultButton_SetNormalContentColor");
static_assert(offsetof(OrionDefaultButton_SetNormalContentColor, InNormalTextColor) == 0x000000, "Member 'OrionDefaultButton_SetNormalContentColor::InNormalTextColor' has a wrong offset!");

// Function OrionUI.OrionDefaultButton.UpdateIcon
// 0x0080 (0x0080 - 0x0000)
struct OrionDefaultButton_UpdateIcon final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRetainBrushImageSize;                             // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionDefaultButton_UpdateIcon) == 0x000008, "Wrong alignment on OrionDefaultButton_UpdateIcon");
static_assert(sizeof(OrionDefaultButton_UpdateIcon) == 0x000080, "Wrong size on OrionDefaultButton_UpdateIcon");
static_assert(offsetof(OrionDefaultButton_UpdateIcon, Brush) == 0x000000, "Member 'OrionDefaultButton_UpdateIcon::Brush' has a wrong offset!");
static_assert(offsetof(OrionDefaultButton_UpdateIcon, bRetainBrushImageSize) == 0x000078, "Member 'OrionDefaultButton_UpdateIcon::bRetainBrushImageSize' has a wrong offset!");

// Function OrionUI.OrionDefaultButton.UpdateIconFromTexture
// 0x0008 (0x0008 - 0x0000)
struct OrionDefaultButton_UpdateIconFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDefaultButton_UpdateIconFromTexture) == 0x000008, "Wrong alignment on OrionDefaultButton_UpdateIconFromTexture");
static_assert(sizeof(OrionDefaultButton_UpdateIconFromTexture) == 0x000008, "Wrong size on OrionDefaultButton_UpdateIconFromTexture");
static_assert(offsetof(OrionDefaultButton_UpdateIconFromTexture, Texture) == 0x000000, "Member 'OrionDefaultButton_UpdateIconFromTexture::Texture' has a wrong offset!");

// Function OrionUI.OrionDefaultButton.UpdateSpecificImageSize
// 0x0008 (0x0008 - 0x0000)
struct OrionDefaultButton_UpdateSpecificImageSize final
{
public:
	EOrionWidgetStyleSize                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSize;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDefaultButton_UpdateSpecificImageSize) == 0x000004, "Wrong alignment on OrionDefaultButton_UpdateSpecificImageSize");
static_assert(sizeof(OrionDefaultButton_UpdateSpecificImageSize) == 0x000008, "Wrong size on OrionDefaultButton_UpdateSpecificImageSize");
static_assert(offsetof(OrionDefaultButton_UpdateSpecificImageSize, Type) == 0x000000, "Member 'OrionDefaultButton_UpdateSpecificImageSize::Type' has a wrong offset!");
static_assert(offsetof(OrionDefaultButton_UpdateSpecificImageSize, InSize) == 0x000004, "Member 'OrionDefaultButton_UpdateSpecificImageSize::InSize' has a wrong offset!");

// Function OrionUI.OrionDefaultButton.UpdateText
// 0x0018 (0x0018 - 0x0000)
struct OrionDefaultButton_UpdateText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDefaultButton_UpdateText) == 0x000008, "Wrong alignment on OrionDefaultButton_UpdateText");
static_assert(sizeof(OrionDefaultButton_UpdateText) == 0x000018, "Wrong size on OrionDefaultButton_UpdateText");
static_assert(offsetof(OrionDefaultButton_UpdateText, InText) == 0x000000, "Member 'OrionDefaultButton_UpdateText::InText' has a wrong offset!");

// Function OrionUI.OrionMasteryRankDisplay.OnRankSet
// 0x000C (0x000C - 0x0000)
struct OrionMasteryRankDisplay_OnRankSet final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressPercent;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionHeroRankTier                            RankTier;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionMasteryRankDisplay_OnRankSet) == 0x000004, "Wrong alignment on OrionMasteryRankDisplay_OnRankSet");
static_assert(sizeof(OrionMasteryRankDisplay_OnRankSet) == 0x00000C, "Wrong size on OrionMasteryRankDisplay_OnRankSet");
static_assert(offsetof(OrionMasteryRankDisplay_OnRankSet, Rank) == 0x000000, "Member 'OrionMasteryRankDisplay_OnRankSet::Rank' has a wrong offset!");
static_assert(offsetof(OrionMasteryRankDisplay_OnRankSet, ProgressPercent) == 0x000004, "Member 'OrionMasteryRankDisplay_OnRankSet::ProgressPercent' has a wrong offset!");
static_assert(offsetof(OrionMasteryRankDisplay_OnRankSet, RankTier) == 0x000008, "Member 'OrionMasteryRankDisplay_OnRankSet::RankTier' has a wrong offset!");

// Function OrionUI.OrionDigitalFlameWidget.InitInHUD
// 0x0008 (0x0008 - 0x0000)
struct OrionDigitalFlameWidget_InitInHUD final
{
public:
	class UOrionBaseHUDWidget*                    InHUDWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDigitalFlameWidget_InitInHUD) == 0x000008, "Wrong alignment on OrionDigitalFlameWidget_InitInHUD");
static_assert(sizeof(OrionDigitalFlameWidget_InitInHUD) == 0x000008, "Wrong size on OrionDigitalFlameWidget_InitInHUD");
static_assert(offsetof(OrionDigitalFlameWidget_InitInHUD, InHUDWidget) == 0x000000, "Member 'OrionDigitalFlameWidget_InitInHUD::InHUDWidget' has a wrong offset!");

// Function OrionUI.OrionSkinVariationListItem.OnSkinVariationDefinitionSet
// 0x0008 (0x0008 - 0x0000)
struct OrionSkinVariationListItem_OnSkinVariationDefinitionSet final
{
public:
	class UOrionSkinVariationItemDefinition*      SkinVariation;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSkinVariationListItem_OnSkinVariationDefinitionSet) == 0x000008, "Wrong alignment on OrionSkinVariationListItem_OnSkinVariationDefinitionSet");
static_assert(sizeof(OrionSkinVariationListItem_OnSkinVariationDefinitionSet) == 0x000008, "Wrong size on OrionSkinVariationListItem_OnSkinVariationDefinitionSet");
static_assert(offsetof(OrionSkinVariationListItem_OnSkinVariationDefinitionSet, SkinVariation) == 0x000000, "Member 'OrionSkinVariationListItem_OnSkinVariationDefinitionSet::SkinVariation' has a wrong offset!");

// Function OrionUI.OrionSkinVariationListItem.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct OrionSkinVariationListItem_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSkinVariationListItem_IsOwned) == 0x000001, "Wrong alignment on OrionSkinVariationListItem_IsOwned");
static_assert(sizeof(OrionSkinVariationListItem_IsOwned) == 0x000001, "Wrong size on OrionSkinVariationListItem_IsOwned");
static_assert(offsetof(OrionSkinVariationListItem_IsOwned, ReturnValue) == 0x000000, "Member 'OrionSkinVariationListItem_IsOwned::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionDraftHeroCustomization.OnSkinChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftHeroCustomization_OnSkinChanged final
{
public:
	bool                                          bSkinHasVariants;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftHeroCustomization_OnSkinChanged) == 0x000001, "Wrong alignment on OrionDraftHeroCustomization_OnSkinChanged");
static_assert(sizeof(OrionDraftHeroCustomization_OnSkinChanged) == 0x000001, "Wrong size on OrionDraftHeroCustomization_OnSkinChanged");
static_assert(offsetof(OrionDraftHeroCustomization_OnSkinChanged, bSkinHasVariants) == 0x000000, "Member 'OrionDraftHeroCustomization_OnSkinChanged::bSkinHasVariants' has a wrong offset!");

// Function OrionUI.OrionDraftMinimap.OnShowPosition
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftMinimap_OnShowPosition final
{
public:
	EOrionPosition                                NewPosition;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftMinimap_OnShowPosition) == 0x000001, "Wrong alignment on OrionDraftMinimap_OnShowPosition");
static_assert(sizeof(OrionDraftMinimap_OnShowPosition) == 0x000001, "Wrong size on OrionDraftMinimap_OnShowPosition");
static_assert(offsetof(OrionDraftMinimap_OnShowPosition, NewPosition) == 0x000000, "Member 'OrionDraftMinimap_OnShowPosition::NewPosition' has a wrong offset!");

// Function OrionUI.OrionChestReward.OnReveal
// 0x0004 (0x0004 - 0x0000)
struct OrionChestReward_OnReveal final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionChestReward_OnReveal) == 0x000004, "Wrong alignment on OrionChestReward_OnReveal");
static_assert(sizeof(OrionChestReward_OnReveal) == 0x000004, "Wrong size on OrionChestReward_OnReveal");
static_assert(offsetof(OrionChestReward_OnReveal, Index_0) == 0x000000, "Member 'OrionChestReward_OnReveal::Index_0' has a wrong offset!");

// Function OrionUI.OrionChestReward.OnRewardSet
// 0x0004 (0x0004 - 0x0000)
struct OrionChestReward_OnRewardSet final
{
public:
	EOrionItemRarity                              ItemRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNice;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionItemFlyLocation                         ItemFlyLocation;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionItemType                                ItemType;                                          // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionChestReward_OnRewardSet) == 0x000001, "Wrong alignment on OrionChestReward_OnRewardSet");
static_assert(sizeof(OrionChestReward_OnRewardSet) == 0x000004, "Wrong size on OrionChestReward_OnRewardSet");
static_assert(offsetof(OrionChestReward_OnRewardSet, ItemRarity) == 0x000000, "Member 'OrionChestReward_OnRewardSet::ItemRarity' has a wrong offset!");
static_assert(offsetof(OrionChestReward_OnRewardSet, bIsNice) == 0x000001, "Member 'OrionChestReward_OnRewardSet::bIsNice' has a wrong offset!");
static_assert(offsetof(OrionChestReward_OnRewardSet, ItemFlyLocation) == 0x000002, "Member 'OrionChestReward_OnRewardSet::ItemFlyLocation' has a wrong offset!");
static_assert(offsetof(OrionChestReward_OnRewardSet, ItemType) == 0x000003, "Member 'OrionChestReward_OnRewardSet::ItemType' has a wrong offset!");

// Function OrionUI.OrionSprintIndicator.OnSprintStartFill
// 0x0004 (0x0004 - 0x0000)
struct OrionSprintIndicator_OnSprintStartFill final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSprintIndicator_OnSprintStartFill) == 0x000004, "Wrong alignment on OrionSprintIndicator_OnSprintStartFill");
static_assert(sizeof(OrionSprintIndicator_OnSprintStartFill) == 0x000004, "Wrong size on OrionSprintIndicator_OnSprintStartFill");
static_assert(offsetof(OrionSprintIndicator_OnSprintStartFill, Duration) == 0x000000, "Member 'OrionSprintIndicator_OnSprintStartFill::Duration' has a wrong offset!");

// Function OrionUI.OrionDraftTeamMember.OnMemberSet
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTeamMember_OnMemberSet final
{
public:
	bool                                          bIsLocalPlayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTeamMember_OnMemberSet) == 0x000001, "Wrong alignment on OrionDraftTeamMember_OnMemberSet");
static_assert(sizeof(OrionDraftTeamMember_OnMemberSet) == 0x000001, "Wrong size on OrionDraftTeamMember_OnMemberSet");
static_assert(offsetof(OrionDraftTeamMember_OnMemberSet, bIsLocalPlayer) == 0x000000, "Member 'OrionDraftTeamMember_OnMemberSet::bIsLocalPlayer' has a wrong offset!");

// Function OrionUI.OrionDraftTeamMember.OnPickStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTeamMember_OnPickStatusChanged final
{
public:
	EOrionDraftPickStatus                         PickStatus;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTeamMember_OnPickStatusChanged) == 0x000001, "Wrong alignment on OrionDraftTeamMember_OnPickStatusChanged");
static_assert(sizeof(OrionDraftTeamMember_OnPickStatusChanged) == 0x000001, "Wrong size on OrionDraftTeamMember_OnPickStatusChanged");
static_assert(offsetof(OrionDraftTeamMember_OnPickStatusChanged, PickStatus) == 0x000000, "Member 'OrionDraftTeamMember_OnPickStatusChanged::PickStatus' has a wrong offset!");

// Function OrionUI.OrionCarouselRadioButtons.UpdateActivePip
// 0x0008 (0x0008 - 0x0000)
struct OrionCarouselRadioButtons_UpdateActivePip final
{
public:
	int32                                         PipIdx;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcast;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionCarouselRadioButtons_UpdateActivePip) == 0x000004, "Wrong alignment on OrionCarouselRadioButtons_UpdateActivePip");
static_assert(sizeof(OrionCarouselRadioButtons_UpdateActivePip) == 0x000008, "Wrong size on OrionCarouselRadioButtons_UpdateActivePip");
static_assert(offsetof(OrionCarouselRadioButtons_UpdateActivePip, PipIdx) == 0x000000, "Member 'OrionCarouselRadioButtons_UpdateActivePip::PipIdx' has a wrong offset!");
static_assert(offsetof(OrionCarouselRadioButtons_UpdateActivePip, bBroadcast) == 0x000004, "Member 'OrionCarouselRadioButtons_UpdateActivePip::bBroadcast' has a wrong offset!");

// Function OrionUI.OrionDraftTurnPlayerIcon.InitPlayerIcon
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTurnPlayerIcon_InitPlayerIcon final
{
public:
	bool                                          bIsFriendly;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTurnPlayerIcon_InitPlayerIcon) == 0x000001, "Wrong alignment on OrionDraftTurnPlayerIcon_InitPlayerIcon");
static_assert(sizeof(OrionDraftTurnPlayerIcon_InitPlayerIcon) == 0x000001, "Wrong size on OrionDraftTurnPlayerIcon_InitPlayerIcon");
static_assert(offsetof(OrionDraftTurnPlayerIcon_InitPlayerIcon, bIsFriendly) == 0x000000, "Member 'OrionDraftTurnPlayerIcon_InitPlayerIcon::bIsFriendly' has a wrong offset!");

// Function OrionUI.OrionDraftTurnPlayerIcon.OnPlayerPickStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTurnPlayerIcon_OnPlayerPickStatusChanged final
{
public:
	EOrionDraftPickStatus                         PickStatus;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTurnPlayerIcon_OnPlayerPickStatusChanged) == 0x000001, "Wrong alignment on OrionDraftTurnPlayerIcon_OnPlayerPickStatusChanged");
static_assert(sizeof(OrionDraftTurnPlayerIcon_OnPlayerPickStatusChanged) == 0x000001, "Wrong size on OrionDraftTurnPlayerIcon_OnPlayerPickStatusChanged");
static_assert(offsetof(OrionDraftTurnPlayerIcon_OnPlayerPickStatusChanged, PickStatus) == 0x000000, "Member 'OrionDraftTurnPlayerIcon_OnPlayerPickStatusChanged::PickStatus' has a wrong offset!");

// Function OrionUI.OrionStateWidget_UpdateBase.OnUpdateHotfixFileProcessed
// 0x0020 (0x0020 - 0x0000)
struct OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed final
{
public:
	class FString                                 FriendlyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CachedName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed) == 0x000008, "Wrong alignment on OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed");
static_assert(sizeof(OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed) == 0x000020, "Wrong size on OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed");
static_assert(offsetof(OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed, FriendlyName) == 0x000000, "Member 'OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed::FriendlyName' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed, CachedName) == 0x000010, "Member 'OrionStateWidget_UpdateBase_OnUpdateHotfixFileProcessed::CachedName' has a wrong offset!");

// Function OrionUI.OrionStateWidget_UpdateBase.OnUpdateHotfixProgress
// 0x0010 (0x0010 - 0x0000)
struct OrionStateWidget_UpdateBase_OnUpdateHotfixProgress final
{
public:
	int32                                         NumDownloaded;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFiles;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBytes;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalBytes;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_UpdateBase_OnUpdateHotfixProgress) == 0x000004, "Wrong alignment on OrionStateWidget_UpdateBase_OnUpdateHotfixProgress");
static_assert(sizeof(OrionStateWidget_UpdateBase_OnUpdateHotfixProgress) == 0x000010, "Wrong size on OrionStateWidget_UpdateBase_OnUpdateHotfixProgress");
static_assert(offsetof(OrionStateWidget_UpdateBase_OnUpdateHotfixProgress, NumDownloaded) == 0x000000, "Member 'OrionStateWidget_UpdateBase_OnUpdateHotfixProgress::NumDownloaded' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_UpdateBase_OnUpdateHotfixProgress, TotalFiles) == 0x000004, "Member 'OrionStateWidget_UpdateBase_OnUpdateHotfixProgress::TotalFiles' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_UpdateBase_OnUpdateHotfixProgress, NumBytes) == 0x000008, "Member 'OrionStateWidget_UpdateBase_OnUpdateHotfixProgress::NumBytes' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_UpdateBase_OnUpdateHotfixProgress, TotalBytes) == 0x00000C, "Member 'OrionStateWidget_UpdateBase_OnUpdateHotfixProgress::TotalBytes' has a wrong offset!");

// Function OrionUI.OrionStateWidget_UpdateBase.OnUpdateStateChange
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_UpdateBase_OnUpdateStateChange final
{
public:
	EUpdateState                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_UpdateBase_OnUpdateStateChange) == 0x000001, "Wrong alignment on OrionStateWidget_UpdateBase_OnUpdateStateChange");
static_assert(sizeof(OrionStateWidget_UpdateBase_OnUpdateStateChange) == 0x000001, "Wrong size on OrionStateWidget_UpdateBase_OnUpdateStateChange");
static_assert(offsetof(OrionStateWidget_UpdateBase_OnUpdateStateChange, NewState) == 0x000000, "Member 'OrionStateWidget_UpdateBase_OnUpdateStateChange::NewState' has a wrong offset!");

// Function OrionUI.OrionStateWidget_UpdateBase.GetLoadProgress
// 0x0004 (0x0004 - 0x0000)
struct OrionStateWidget_UpdateBase_GetLoadProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_UpdateBase_GetLoadProgress) == 0x000004, "Wrong alignment on OrionStateWidget_UpdateBase_GetLoadProgress");
static_assert(sizeof(OrionStateWidget_UpdateBase_GetLoadProgress) == 0x000004, "Wrong size on OrionStateWidget_UpdateBase_GetLoadProgress");
static_assert(offsetof(OrionStateWidget_UpdateBase_GetLoadProgress, ReturnValue) == 0x000000, "Member 'OrionStateWidget_UpdateBase_GetLoadProgress::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionStateWidget_UpdateBase.GetUpdateState
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_UpdateBase_GetUpdateState final
{
public:
	EUpdateState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_UpdateBase_GetUpdateState) == 0x000001, "Wrong alignment on OrionStateWidget_UpdateBase_GetUpdateState");
static_assert(sizeof(OrionStateWidget_UpdateBase_GetUpdateState) == 0x000001, "Wrong size on OrionStateWidget_UpdateBase_GetUpdateState");
static_assert(offsetof(OrionStateWidget_UpdateBase_GetUpdateState, ReturnValue) == 0x000000, "Member 'OrionStateWidget_UpdateBase_GetUpdateState::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionStateWidget_UpdateBase.IsBlockingForInitialLoadEnabled
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_UpdateBase_IsBlockingForInitialLoadEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_UpdateBase_IsBlockingForInitialLoadEnabled) == 0x000001, "Wrong alignment on OrionStateWidget_UpdateBase_IsBlockingForInitialLoadEnabled");
static_assert(sizeof(OrionStateWidget_UpdateBase_IsBlockingForInitialLoadEnabled) == 0x000001, "Wrong size on OrionStateWidget_UpdateBase_IsBlockingForInitialLoadEnabled");
static_assert(offsetof(OrionStateWidget_UpdateBase_IsBlockingForInitialLoadEnabled, ReturnValue) == 0x000000, "Member 'OrionStateWidget_UpdateBase_IsBlockingForInitialLoadEnabled::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionStateWidget_UpdateBase.IsUpdatingEnabled
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_UpdateBase_IsUpdatingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_UpdateBase_IsUpdatingEnabled) == 0x000001, "Wrong alignment on OrionStateWidget_UpdateBase_IsUpdatingEnabled");
static_assert(sizeof(OrionStateWidget_UpdateBase_IsUpdatingEnabled) == 0x000001, "Wrong size on OrionStateWidget_UpdateBase_IsUpdatingEnabled");
static_assert(offsetof(OrionStateWidget_UpdateBase_IsUpdatingEnabled, ReturnValue) == 0x000000, "Member 'OrionStateWidget_UpdateBase_IsUpdatingEnabled::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionDraftTimer.OnDraftComplete
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTimer_OnDraftComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTimer_OnDraftComplete) == 0x000001, "Wrong alignment on OrionDraftTimer_OnDraftComplete");
static_assert(sizeof(OrionDraftTimer_OnDraftComplete) == 0x000001, "Wrong size on OrionDraftTimer_OnDraftComplete");
static_assert(offsetof(OrionDraftTimer_OnDraftComplete, bSuccess) == 0x000000, "Member 'OrionDraftTimer_OnDraftComplete::bSuccess' has a wrong offset!");

// Function OrionUI.OrionDraftTimer.OnDraftStarted
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTimer_OnDraftStarted final
{
public:
	EOrionTeamMemberType                          FirstPickerType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTimer_OnDraftStarted) == 0x000001, "Wrong alignment on OrionDraftTimer_OnDraftStarted");
static_assert(sizeof(OrionDraftTimer_OnDraftStarted) == 0x000001, "Wrong size on OrionDraftTimer_OnDraftStarted");
static_assert(offsetof(OrionDraftTimer_OnDraftStarted, FirstPickerType) == 0x000000, "Member 'OrionDraftTimer_OnDraftStarted::FirstPickerType' has a wrong offset!");

// Function OrionUI.OrionDraftTimer.OnTimerUpdated
// 0x0008 (0x0008 - 0x0000)
struct OrionDraftTimer_OnTimerUpdated final
{
public:
	bool                                          bIsPlayerTurn;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLeftRatio;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTimer_OnTimerUpdated) == 0x000004, "Wrong alignment on OrionDraftTimer_OnTimerUpdated");
static_assert(sizeof(OrionDraftTimer_OnTimerUpdated) == 0x000008, "Wrong size on OrionDraftTimer_OnTimerUpdated");
static_assert(offsetof(OrionDraftTimer_OnTimerUpdated, bIsPlayerTurn) == 0x000000, "Member 'OrionDraftTimer_OnTimerUpdated::bIsPlayerTurn' has a wrong offset!");
static_assert(offsetof(OrionDraftTimer_OnTimerUpdated, TimeLeftRatio) == 0x000004, "Member 'OrionDraftTimer_OnTimerUpdated::TimeLeftRatio' has a wrong offset!");

// Function OrionUI.OrionDraftTimer.OnTurnComplete
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTimer_OnTurnComplete final
{
public:
	EOrionTeamMemberType                          FinishedMemberType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTimer_OnTurnComplete) == 0x000001, "Wrong alignment on OrionDraftTimer_OnTurnComplete");
static_assert(sizeof(OrionDraftTimer_OnTurnComplete) == 0x000001, "Wrong size on OrionDraftTimer_OnTurnComplete");
static_assert(offsetof(OrionDraftTimer_OnTurnComplete, FinishedMemberType) == 0x000000, "Member 'OrionDraftTimer_OnTurnComplete::FinishedMemberType' has a wrong offset!");

// Function OrionUI.OrionDraftTimer.OnTurnStarted
// 0x0001 (0x0001 - 0x0000)
struct OrionDraftTimer_OnTurnStarted final
{
public:
	EOrionTeamMemberType                          PickingMemberType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDraftTimer_OnTurnStarted) == 0x000001, "Wrong alignment on OrionDraftTimer_OnTurnStarted");
static_assert(sizeof(OrionDraftTimer_OnTurnStarted) == 0x000001, "Wrong size on OrionDraftTimer_OnTurnStarted");
static_assert(offsetof(OrionDraftTimer_OnTurnStarted, PickingMemberType) == 0x000000, "Member 'OrionDraftTimer_OnTurnStarted::PickingMemberType' has a wrong offset!");

// Function OrionUI.OrionPlayerStatusWidget.InitInHUD
// 0x0008 (0x0008 - 0x0000)
struct OrionPlayerStatusWidget_InitInHUD final
{
public:
	class UOrionBaseHUDWidget*                    InHUDWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPlayerStatusWidget_InitInHUD) == 0x000008, "Wrong alignment on OrionPlayerStatusWidget_InitInHUD");
static_assert(sizeof(OrionPlayerStatusWidget_InitInHUD) == 0x000008, "Wrong size on OrionPlayerStatusWidget_InitInHUD");
static_assert(offsetof(OrionPlayerStatusWidget_InitInHUD, InHUDWidget) == 0x000000, "Member 'OrionPlayerStatusWidget_InitInHUD::InHUDWidget' has a wrong offset!");

// Function OrionUI.OrionPlayerStatusWidget.OnShowNumbersSettingChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionPlayerStatusWidget_OnShowNumbersSettingChanged final
{
public:
	bool                                          bWantsNumbers;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPlayerStatusWidget_OnShowNumbersSettingChanged) == 0x000001, "Wrong alignment on OrionPlayerStatusWidget_OnShowNumbersSettingChanged");
static_assert(sizeof(OrionPlayerStatusWidget_OnShowNumbersSettingChanged) == 0x000001, "Wrong size on OrionPlayerStatusWidget_OnShowNumbersSettingChanged");
static_assert(offsetof(OrionPlayerStatusWidget_OnShowNumbersSettingChanged, bWantsNumbers) == 0x000000, "Member 'OrionPlayerStatusWidget_OnShowNumbersSettingChanged::bWantsNumbers' has a wrong offset!");

// Function OrionUI.OrionDynamicEntryBox.BP_CreateEntry
// 0x0008 (0x0008 - 0x0000)
struct OrionDynamicEntryBox_BP_CreateEntry final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDynamicEntryBox_BP_CreateEntry) == 0x000008, "Wrong alignment on OrionDynamicEntryBox_BP_CreateEntry");
static_assert(sizeof(OrionDynamicEntryBox_BP_CreateEntry) == 0x000008, "Wrong size on OrionDynamicEntryBox_BP_CreateEntry");
static_assert(offsetof(OrionDynamicEntryBox_BP_CreateEntry, ReturnValue) == 0x000000, "Member 'OrionDynamicEntryBox_BP_CreateEntry::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionDynamicEntryBox.RemoveEntry
// 0x0008 (0x0008 - 0x0000)
struct OrionDynamicEntryBox_RemoveEntry final
{
public:
	class UUserWidget*                            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDynamicEntryBox_RemoveEntry) == 0x000008, "Wrong alignment on OrionDynamicEntryBox_RemoveEntry");
static_assert(sizeof(OrionDynamicEntryBox_RemoveEntry) == 0x000008, "Wrong size on OrionDynamicEntryBox_RemoveEntry");
static_assert(offsetof(OrionDynamicEntryBox_RemoveEntry, EntryWidget) == 0x000000, "Member 'OrionDynamicEntryBox_RemoveEntry::EntryWidget' has a wrong offset!");

// Function OrionUI.OrionDynamicEntryBox.Reset
// 0x0001 (0x0001 - 0x0000)
struct OrionDynamicEntryBox_Reset final
{
public:
	bool                                          bDeleteWidgets;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDynamicEntryBox_Reset) == 0x000001, "Wrong alignment on OrionDynamicEntryBox_Reset");
static_assert(sizeof(OrionDynamicEntryBox_Reset) == 0x000001, "Wrong size on OrionDynamicEntryBox_Reset");
static_assert(offsetof(OrionDynamicEntryBox_Reset, bDeleteWidgets) == 0x000000, "Member 'OrionDynamicEntryBox_Reset::bDeleteWidgets' has a wrong offset!");

// Function OrionUI.OrionDynamicEntryBox.SetEntrySpacing
// 0x0008 (0x0008 - 0x0000)
struct OrionDynamicEntryBox_SetEntrySpacing final
{
public:
	struct FVector2D                              InEntrySpacing;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDynamicEntryBox_SetEntrySpacing) == 0x000004, "Wrong alignment on OrionDynamicEntryBox_SetEntrySpacing");
static_assert(sizeof(OrionDynamicEntryBox_SetEntrySpacing) == 0x000008, "Wrong size on OrionDynamicEntryBox_SetEntrySpacing");
static_assert(offsetof(OrionDynamicEntryBox_SetEntrySpacing, InEntrySpacing) == 0x000000, "Member 'OrionDynamicEntryBox_SetEntrySpacing::InEntrySpacing' has a wrong offset!");

// Function OrionUI.OrionDynamicEntryBox.GetAllEntries
// 0x0010 (0x0010 - 0x0000)
struct OrionDynamicEntryBox_GetAllEntries final
{
public:
	TArray<class UUserWidget*>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDynamicEntryBox_GetAllEntries) == 0x000008, "Wrong alignment on OrionDynamicEntryBox_GetAllEntries");
static_assert(sizeof(OrionDynamicEntryBox_GetAllEntries) == 0x000010, "Wrong size on OrionDynamicEntryBox_GetAllEntries");
static_assert(offsetof(OrionDynamicEntryBox_GetAllEntries, ReturnValue) == 0x000000, "Member 'OrionDynamicEntryBox_GetAllEntries::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionDynamicEntryBox.GetNumEntries
// 0x0004 (0x0004 - 0x0000)
struct OrionDynamicEntryBox_GetNumEntries final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionDynamicEntryBox_GetNumEntries) == 0x000004, "Wrong alignment on OrionDynamicEntryBox_GetNumEntries");
static_assert(sizeof(OrionDynamicEntryBox_GetNumEntries) == 0x000004, "Wrong size on OrionDynamicEntryBox_GetNumEntries");
static_assert(offsetof(OrionDynamicEntryBox_GetNumEntries, ReturnValue) == 0x000000, "Member 'OrionDynamicEntryBox_GetNumEntries::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionEditableTextPopup.CommitText
// 0x0018 (0x0018 - 0x0000)
struct OrionEditableTextPopup_CommitText final
{
public:
	class FText                                   TextToCommit;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionEditableTextPopup_CommitText) == 0x000008, "Wrong alignment on OrionEditableTextPopup_CommitText");
static_assert(sizeof(OrionEditableTextPopup_CommitText) == 0x000018, "Wrong size on OrionEditableTextPopup_CommitText");
static_assert(offsetof(OrionEditableTextPopup_CommitText, TextToCommit) == 0x000000, "Member 'OrionEditableTextPopup_CommitText::TextToCommit' has a wrong offset!");

// Function OrionUI.OrionEditableTextPopup.HidePopup
// 0x0001 (0x0001 - 0x0000)
struct OrionEditableTextPopup_HidePopup final
{
public:
	bool                                          bCommitText;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionEditableTextPopup_HidePopup) == 0x000001, "Wrong alignment on OrionEditableTextPopup_HidePopup");
static_assert(sizeof(OrionEditableTextPopup_HidePopup) == 0x000001, "Wrong size on OrionEditableTextPopup_HidePopup");
static_assert(offsetof(OrionEditableTextPopup_HidePopup, bCommitText) == 0x000000, "Member 'OrionEditableTextPopup_HidePopup::bCommitText' has a wrong offset!");

// Function OrionUI.OrionEditableTextPopup.OnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct OrionEditableTextPopup_OnTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionEditableTextPopup_OnTextCommitted) == 0x000008, "Wrong alignment on OrionEditableTextPopup_OnTextCommitted");
static_assert(sizeof(OrionEditableTextPopup_OnTextCommitted) == 0x000020, "Wrong size on OrionEditableTextPopup_OnTextCommitted");
static_assert(offsetof(OrionEditableTextPopup_OnTextCommitted, Text) == 0x000000, "Member 'OrionEditableTextPopup_OnTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(OrionEditableTextPopup_OnTextCommitted, CommitMethod) == 0x000018, "Member 'OrionEditableTextPopup_OnTextCommitted::CommitMethod' has a wrong offset!");

// Function OrionUI.OrionEULAText.SetText
// 0x0018 (0x0018 - 0x0000)
struct OrionEULAText_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionEULAText_SetText) == 0x000008, "Wrong alignment on OrionEULAText_SetText");
static_assert(sizeof(OrionEULAText_SetText) == 0x000018, "Wrong size on OrionEULAText_SetText");
static_assert(offsetof(OrionEULAText_SetText, InText) == 0x000000, "Member 'OrionEULAText_SetText::InText' has a wrong offset!");

// Function OrionUI.OrionNotificationList.PopNotification
// 0x0008 (0x0008 - 0x0000)
struct OrionNotificationList_PopNotification final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionNotificationList_PopNotification) == 0x000008, "Wrong alignment on OrionNotificationList_PopNotification");
static_assert(sizeof(OrionNotificationList_PopNotification) == 0x000008, "Wrong size on OrionNotificationList_PopNotification");
static_assert(offsetof(OrionNotificationList_PopNotification, UserWidget) == 0x000000, "Member 'OrionNotificationList_PopNotification::UserWidget' has a wrong offset!");

// Function OrionUI.OrionNotificationList.PushNotification
// 0x0008 (0x0008 - 0x0000)
struct OrionNotificationList_PushNotification final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionNotificationList_PushNotification) == 0x000008, "Wrong alignment on OrionNotificationList_PushNotification");
static_assert(sizeof(OrionNotificationList_PushNotification) == 0x000008, "Wrong size on OrionNotificationList_PushNotification");
static_assert(offsetof(OrionNotificationList_PushNotification, UserWidget) == 0x000000, "Member 'OrionNotificationList_PushNotification::UserWidget' has a wrong offset!");

// Function OrionUI.OrionNotificationList.FindUserWidget
// 0x0190 (0x0190 - 0x0000)
struct OrionNotificationList_FindUserWidget final
{
public:
	struct FOrionNotification                     Notification;                                      // 0x0000(0x0180)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0180(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionNotificationList_FindUserWidget) == 0x000010, "Wrong alignment on OrionNotificationList_FindUserWidget");
static_assert(sizeof(OrionNotificationList_FindUserWidget) == 0x000190, "Wrong size on OrionNotificationList_FindUserWidget");
static_assert(offsetof(OrionNotificationList_FindUserWidget, Notification) == 0x000000, "Member 'OrionNotificationList_FindUserWidget::Notification' has a wrong offset!");
static_assert(offsetof(OrionNotificationList_FindUserWidget, ReturnValue) == 0x000180, "Member 'OrionNotificationList_FindUserWidget::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionNotificationList.NumNotifications
// 0x0004 (0x0004 - 0x0000)
struct OrionNotificationList_NumNotifications final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionNotificationList_NumNotifications) == 0x000004, "Wrong alignment on OrionNotificationList_NumNotifications");
static_assert(sizeof(OrionNotificationList_NumNotifications) == 0x000004, "Wrong size on OrionNotificationList_NumNotifications");
static_assert(offsetof(OrionNotificationList_NumNotifications, ReturnValue) == 0x000000, "Member 'OrionNotificationList_NumNotifications::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionFeaturedHeroWidget.OnActionStateSet
// 0x0001 (0x0001 - 0x0000)
struct OrionFeaturedHeroWidget_OnActionStateSet final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFeaturedHeroWidget_OnActionStateSet) == 0x000001, "Wrong alignment on OrionFeaturedHeroWidget_OnActionStateSet");
static_assert(sizeof(OrionFeaturedHeroWidget_OnActionStateSet) == 0x000001, "Wrong size on OrionFeaturedHeroWidget_OnActionStateSet");
static_assert(offsetof(OrionFeaturedHeroWidget_OnActionStateSet, bShow) == 0x000000, "Member 'OrionFeaturedHeroWidget_OnActionStateSet::bShow' has a wrong offset!");

// Function OrionUI.OrionFeaturedHeroWidget.OnFeaturedHeroSet
// 0x0001 (0x0001 - 0x0000)
struct OrionFeaturedHeroWidget_OnFeaturedHeroSet final
{
public:
	bool                                          bShowSubtitle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFeaturedHeroWidget_OnFeaturedHeroSet) == 0x000001, "Wrong alignment on OrionFeaturedHeroWidget_OnFeaturedHeroSet");
static_assert(sizeof(OrionFeaturedHeroWidget_OnFeaturedHeroSet) == 0x000001, "Wrong size on OrionFeaturedHeroWidget_OnFeaturedHeroSet");
static_assert(offsetof(OrionFeaturedHeroWidget_OnFeaturedHeroSet, bShowSubtitle) == 0x000000, "Member 'OrionFeaturedHeroWidget_OnFeaturedHeroSet::bShowSubtitle' has a wrong offset!");

// Function OrionUI.OrionFilterToggleButton.HandleAnchorOpening
// 0x0008 (0x0008 - 0x0000)
struct OrionFilterToggleButton_HandleAnchorOpening final
{
public:
	class UOrionFilterSelectorMenu*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFilterToggleButton_HandleAnchorOpening) == 0x000008, "Wrong alignment on OrionFilterToggleButton_HandleAnchorOpening");
static_assert(sizeof(OrionFilterToggleButton_HandleAnchorOpening) == 0x000008, "Wrong size on OrionFilterToggleButton_HandleAnchorOpening");
static_assert(offsetof(OrionFilterToggleButton_HandleAnchorOpening, ReturnValue) == 0x000000, "Member 'OrionFilterToggleButton_HandleAnchorOpening::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionFilterToggleButton.OnFilterSelectorButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct OrionFilterToggleButton_OnFilterSelectorButtonClicked final
{
public:
	uint8                                         ActiveToggleIndex;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFilterToggleButton_OnFilterSelectorButtonClicked) == 0x000001, "Wrong alignment on OrionFilterToggleButton_OnFilterSelectorButtonClicked");
static_assert(sizeof(OrionFilterToggleButton_OnFilterSelectorButtonClicked) == 0x000001, "Wrong size on OrionFilterToggleButton_OnFilterSelectorButtonClicked");
static_assert(offsetof(OrionFilterToggleButton_OnFilterSelectorButtonClicked, ActiveToggleIndex) == 0x000000, "Member 'OrionFilterToggleButton_OnFilterSelectorButtonClicked::ActiveToggleIndex' has a wrong offset!");

// Function OrionUI.OrionFilterToggleButton.OnFilterSelectorReady
// 0x0008 (0x0008 - 0x0000)
struct OrionFilterToggleButton_OnFilterSelectorReady final
{
public:
	class UOrionFilterSelectorMenu*               FilterSelectorMenuWidget;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFilterToggleButton_OnFilterSelectorReady) == 0x000008, "Wrong alignment on OrionFilterToggleButton_OnFilterSelectorReady");
static_assert(sizeof(OrionFilterToggleButton_OnFilterSelectorReady) == 0x000008, "Wrong size on OrionFilterToggleButton_OnFilterSelectorReady");
static_assert(offsetof(OrionFilterToggleButton_OnFilterSelectorReady, FilterSelectorMenuWidget) == 0x000000, "Member 'OrionFilterToggleButton_OnFilterSelectorReady::FilterSelectorMenuWidget' has a wrong offset!");

// Function OrionUI.OrionFilterToggleButton.OnGamePadChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionFilterToggleButton_OnGamePadChanged final
{
public:
	bool                                          bUsingGamePad;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFilterToggleButton_OnGamePadChanged) == 0x000001, "Wrong alignment on OrionFilterToggleButton_OnGamePadChanged");
static_assert(sizeof(OrionFilterToggleButton_OnGamePadChanged) == 0x000001, "Wrong size on OrionFilterToggleButton_OnGamePadChanged");
static_assert(offsetof(OrionFilterToggleButton_OnGamePadChanged, bUsingGamePad) == 0x000000, "Member 'OrionFilterToggleButton_OnGamePadChanged::bUsingGamePad' has a wrong offset!");

// Function OrionUI.OrionFilterToggleButton.IsDropDownMode
// 0x0001 (0x0001 - 0x0000)
struct OrionFilterToggleButton_IsDropDownMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFilterToggleButton_IsDropDownMode) == 0x000001, "Wrong alignment on OrionFilterToggleButton_IsDropDownMode");
static_assert(sizeof(OrionFilterToggleButton_IsDropDownMode) == 0x000001, "Wrong size on OrionFilterToggleButton_IsDropDownMode");
static_assert(offsetof(OrionFilterToggleButton_IsDropDownMode, ReturnValue) == 0x000000, "Member 'OrionFilterToggleButton_IsDropDownMode::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionQuestAlert.ShowAlert
// 0x0030 (0x0030 - 0x0000)
struct OrionQuestAlert_ShowAlert final
{
public:
	struct FOrionQuestAlertInfo                   NewQuestAlert;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionQuestAlert_ShowAlert) == 0x000008, "Wrong alignment on OrionQuestAlert_ShowAlert");
static_assert(sizeof(OrionQuestAlert_ShowAlert) == 0x000030, "Wrong size on OrionQuestAlert_ShowAlert");
static_assert(offsetof(OrionQuestAlert_ShowAlert, NewQuestAlert) == 0x000000, "Member 'OrionQuestAlert_ShowAlert::NewQuestAlert' has a wrong offset!");

// Function OrionUI.OrionFPSAndPing.SetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct OrionFPSAndPing_SetPlayerController final
{
public:
	class APlayerController*                      InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFPSAndPing_SetPlayerController) == 0x000008, "Wrong alignment on OrionFPSAndPing_SetPlayerController");
static_assert(sizeof(OrionFPSAndPing_SetPlayerController) == 0x000008, "Wrong size on OrionFPSAndPing_SetPlayerController");
static_assert(offsetof(OrionFPSAndPing_SetPlayerController, InController) == 0x000000, "Member 'OrionFPSAndPing_SetPlayerController::InController' has a wrong offset!");

// Function OrionUI.OrionFrontEndCard.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct OrionFrontEndCard_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFrontEndCard_IsOwned) == 0x000001, "Wrong alignment on OrionFrontEndCard_IsOwned");
static_assert(sizeof(OrionFrontEndCard_IsOwned) == 0x000001, "Wrong size on OrionFrontEndCard_IsOwned");
static_assert(offsetof(OrionFrontEndCard_IsOwned, ReturnValue) == 0x000000, "Member 'OrionFrontEndCard_IsOwned::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionFrontEndCard.SetCustomScale
// 0x0004 (0x0004 - 0x0000)
struct OrionFrontEndCard_SetCustomScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFrontEndCard_SetCustomScale) == 0x000004, "Wrong alignment on OrionFrontEndCard_SetCustomScale");
static_assert(sizeof(OrionFrontEndCard_SetCustomScale) == 0x000004, "Wrong size on OrionFrontEndCard_SetCustomScale");
static_assert(offsetof(OrionFrontEndCard_SetCustomScale, InScale) == 0x000000, "Member 'OrionFrontEndCard_SetCustomScale::InScale' has a wrong offset!");

// Function OrionUI.OrionFrontEndCard.SetShowProgressBar
// 0x0001 (0x0001 - 0x0000)
struct OrionFrontEndCard_SetShowProgressBar final
{
public:
	bool                                          InShowProgessBar;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFrontEndCard_SetShowProgressBar) == 0x000001, "Wrong alignment on OrionFrontEndCard_SetShowProgressBar");
static_assert(sizeof(OrionFrontEndCard_SetShowProgressBar) == 0x000001, "Wrong size on OrionFrontEndCard_SetShowProgressBar");
static_assert(offsetof(OrionFrontEndCard_SetShowProgressBar, InShowProgessBar) == 0x000000, "Member 'OrionFrontEndCard_SetShowProgressBar::InShowProgessBar' has a wrong offset!");

// Function OrionUI.OrionFrontEndCard.GetCardRarity
// 0x0001 (0x0001 - 0x0000)
struct OrionFrontEndCard_GetCardRarity final
{
public:
	EOrionItemRarity                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionFrontEndCard_GetCardRarity) == 0x000001, "Wrong alignment on OrionFrontEndCard_GetCardRarity");
static_assert(sizeof(OrionFrontEndCard_GetCardRarity) == 0x000001, "Wrong size on OrionFrontEndCard_GetCardRarity");
static_assert(offsetof(OrionFrontEndCard_GetCardRarity, ReturnValue) == 0x000000, "Member 'OrionFrontEndCard_GetCardRarity::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGamepadButtonLabel.GetSelectedKey
// 0x0018 (0x0018 - 0x0000)
struct OrionGamepadButtonLabel_GetSelectedKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGamepadButtonLabel_GetSelectedKey) == 0x000008, "Wrong alignment on OrionGamepadButtonLabel_GetSelectedKey");
static_assert(sizeof(OrionGamepadButtonLabel_GetSelectedKey) == 0x000018, "Wrong size on OrionGamepadButtonLabel_GetSelectedKey");
static_assert(offsetof(OrionGamepadButtonLabel_GetSelectedKey, ReturnValue) == 0x000000, "Member 'OrionGamepadButtonLabel_GetSelectedKey::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGamepadButtonLabel.SetSelectedKey
// 0x0018 (0x0018 - 0x0000)
struct OrionGamepadButtonLabel_SetSelectedKey final
{
public:
	struct FKey                                   NewValue;                                          // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGamepadButtonLabel_SetSelectedKey) == 0x000008, "Wrong alignment on OrionGamepadButtonLabel_SetSelectedKey");
static_assert(sizeof(OrionGamepadButtonLabel_SetSelectedKey) == 0x000018, "Wrong size on OrionGamepadButtonLabel_SetSelectedKey");
static_assert(offsetof(OrionGamepadButtonLabel_SetSelectedKey, NewValue) == 0x000000, "Member 'OrionGamepadButtonLabel_SetSelectedKey::NewValue' has a wrong offset!");

// Function OrionUI.OrionGamepadLayoutWidget.BP_OnGamepadTypeChange
// 0x0001 (0x0001 - 0x0000)
struct OrionGamepadLayoutWidget_BP_OnGamepadTypeChange final
{
public:
	EOrionGamepadType                             NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGamepadLayoutWidget_BP_OnGamepadTypeChange) == 0x000001, "Wrong alignment on OrionGamepadLayoutWidget_BP_OnGamepadTypeChange");
static_assert(sizeof(OrionGamepadLayoutWidget_BP_OnGamepadTypeChange) == 0x000001, "Wrong size on OrionGamepadLayoutWidget_BP_OnGamepadTypeChange");
static_assert(offsetof(OrionGamepadLayoutWidget_BP_OnGamepadTypeChange, NewType) == 0x000000, "Member 'OrionGamepadLayoutWidget_BP_OnGamepadTypeChange::NewType' has a wrong offset!");

// Function OrionUI.OrionGamepadLayoutWidget.OnConfigChange
// 0x0004 (0x0004 - 0x0000)
struct OrionGamepadLayoutWidget_OnConfigChange final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGamepadLayoutWidget_OnConfigChange) == 0x000004, "Wrong alignment on OrionGamepadLayoutWidget_OnConfigChange");
static_assert(sizeof(OrionGamepadLayoutWidget_OnConfigChange) == 0x000004, "Wrong size on OrionGamepadLayoutWidget_OnConfigChange");
static_assert(offsetof(OrionGamepadLayoutWidget_OnConfigChange, Index_0) == 0x000000, "Member 'OrionGamepadLayoutWidget_OnConfigChange::Index_0' has a wrong offset!");

// Function OrionUI.OrionGameProgressBar.SetBarFillType
// 0x0001 (0x0001 - 0x0000)
struct OrionGameProgressBar_SetBarFillType final
{
public:
	EProgressBarFillType                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameProgressBar_SetBarFillType) == 0x000001, "Wrong alignment on OrionGameProgressBar_SetBarFillType");
static_assert(sizeof(OrionGameProgressBar_SetBarFillType) == 0x000001, "Wrong size on OrionGameProgressBar_SetBarFillType");
static_assert(offsetof(OrionGameProgressBar_SetBarFillType, InType) == 0x000000, "Member 'OrionGameProgressBar_SetBarFillType::InType' has a wrong offset!");

// Function OrionUI.OrionPostGameTab_Summary.OnMasteryProgressLocked
// 0x0001 (0x0001 - 0x0000)
struct OrionPostGameTab_Summary_OnMasteryProgressLocked final
{
public:
	bool                                          bProgressLocked;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPostGameTab_Summary_OnMasteryProgressLocked) == 0x000001, "Wrong alignment on OrionPostGameTab_Summary_OnMasteryProgressLocked");
static_assert(sizeof(OrionPostGameTab_Summary_OnMasteryProgressLocked) == 0x000001, "Wrong size on OrionPostGameTab_Summary_OnMasteryProgressLocked");
static_assert(offsetof(OrionPostGameTab_Summary_OnMasteryProgressLocked, bProgressLocked) == 0x000000, "Member 'OrionPostGameTab_Summary_OnMasteryProgressLocked::bProgressLocked' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.OnActivePlaylistChanged
// 0x0004 (0x0004 - 0x0000)
struct OrionGameTypeWidget_OnActivePlaylistChanged final
{
public:
	int32                                         Playlist;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_OnActivePlaylistChanged) == 0x000004, "Wrong alignment on OrionGameTypeWidget_OnActivePlaylistChanged");
static_assert(sizeof(OrionGameTypeWidget_OnActivePlaylistChanged) == 0x000004, "Wrong size on OrionGameTypeWidget_OnActivePlaylistChanged");
static_assert(offsetof(OrionGameTypeWidget_OnActivePlaylistChanged, Playlist) == 0x000000, "Member 'OrionGameTypeWidget_OnActivePlaylistChanged::Playlist' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.OnDifficultyChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionGameTypeWidget_OnDifficultyChanged final
{
public:
	EAIBotDifficulty                              InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_OnDifficultyChanged) == 0x000001, "Wrong alignment on OrionGameTypeWidget_OnDifficultyChanged");
static_assert(sizeof(OrionGameTypeWidget_OnDifficultyChanged) == 0x000001, "Wrong size on OrionGameTypeWidget_OnDifficultyChanged");
static_assert(offsetof(OrionGameTypeWidget_OnDifficultyChanged, InType) == 0x000000, "Member 'OrionGameTypeWidget_OnDifficultyChanged::InType' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.OnDisableOptions
// 0x0001 (0x0001 - 0x0000)
struct OrionGameTypeWidget_OnDisableOptions final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_OnDisableOptions) == 0x000001, "Wrong alignment on OrionGameTypeWidget_OnDisableOptions");
static_assert(sizeof(OrionGameTypeWidget_OnDisableOptions) == 0x000001, "Wrong size on OrionGameTypeWidget_OnDisableOptions");
static_assert(offsetof(OrionGameTypeWidget_OnDisableOptions, bDisable) == 0x000000, "Member 'OrionGameTypeWidget_OnDisableOptions::bDisable' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.SetDesiredPlaylist
// 0x0004 (0x0004 - 0x0000)
struct OrionGameTypeWidget_SetDesiredPlaylist final
{
public:
	int32                                         Playlist;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_SetDesiredPlaylist) == 0x000004, "Wrong alignment on OrionGameTypeWidget_SetDesiredPlaylist");
static_assert(sizeof(OrionGameTypeWidget_SetDesiredPlaylist) == 0x000004, "Wrong size on OrionGameTypeWidget_SetDesiredPlaylist");
static_assert(offsetof(OrionGameTypeWidget_SetDesiredPlaylist, Playlist) == 0x000000, "Member 'OrionGameTypeWidget_SetDesiredPlaylist::Playlist' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.SetDifficultySelectorEntriesText
// 0x0028 (0x0028 - 0x0000)
struct OrionGameTypeWidget_SetDifficultySelectorEntriesText final
{
public:
	TArray<class UOrionDefaultButton*>            DifficultyButtons;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   CurrentDifficultyText;                             // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_SetDifficultySelectorEntriesText) == 0x000008, "Wrong alignment on OrionGameTypeWidget_SetDifficultySelectorEntriesText");
static_assert(sizeof(OrionGameTypeWidget_SetDifficultySelectorEntriesText) == 0x000028, "Wrong size on OrionGameTypeWidget_SetDifficultySelectorEntriesText");
static_assert(offsetof(OrionGameTypeWidget_SetDifficultySelectorEntriesText, DifficultyButtons) == 0x000000, "Member 'OrionGameTypeWidget_SetDifficultySelectorEntriesText::DifficultyButtons' has a wrong offset!");
static_assert(offsetof(OrionGameTypeWidget_SetDifficultySelectorEntriesText, CurrentDifficultyText) == 0x000010, "Member 'OrionGameTypeWidget_SetDifficultySelectorEntriesText::CurrentDifficultyText' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.SetSelectedDifficulty
// 0x0001 (0x0001 - 0x0000)
struct OrionGameTypeWidget_SetSelectedDifficulty final
{
public:
	EAIBotDifficulty                              InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_SetSelectedDifficulty) == 0x000001, "Wrong alignment on OrionGameTypeWidget_SetSelectedDifficulty");
static_assert(sizeof(OrionGameTypeWidget_SetSelectedDifficulty) == 0x000001, "Wrong size on OrionGameTypeWidget_SetSelectedDifficulty");
static_assert(offsetof(OrionGameTypeWidget_SetSelectedDifficulty, InType) == 0x000000, "Member 'OrionGameTypeWidget_SetSelectedDifficulty::InType' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.FindEnumFromDifficultySelectorText
// 0x0020 (0x0020 - 0x0000)
struct OrionGameTypeWidget_FindEnumFromDifficultySelectorText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAIBotDifficulty                              ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionGameTypeWidget_FindEnumFromDifficultySelectorText) == 0x000008, "Wrong alignment on OrionGameTypeWidget_FindEnumFromDifficultySelectorText");
static_assert(sizeof(OrionGameTypeWidget_FindEnumFromDifficultySelectorText) == 0x000020, "Wrong size on OrionGameTypeWidget_FindEnumFromDifficultySelectorText");
static_assert(offsetof(OrionGameTypeWidget_FindEnumFromDifficultySelectorText, InText) == 0x000000, "Member 'OrionGameTypeWidget_FindEnumFromDifficultySelectorText::InText' has a wrong offset!");
static_assert(offsetof(OrionGameTypeWidget_FindEnumFromDifficultySelectorText, ReturnValue) == 0x000018, "Member 'OrionGameTypeWidget_FindEnumFromDifficultySelectorText::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.GetDifficultyDisplayEntry
// 0x0038 (0x0038 - 0x0000)
struct OrionGameTypeWidget_GetDifficultyDisplayEntry final
{
public:
	EAIBotDifficulty                              InDifficulty;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIBotDifficultyDisplayEntry           ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_GetDifficultyDisplayEntry) == 0x000008, "Wrong alignment on OrionGameTypeWidget_GetDifficultyDisplayEntry");
static_assert(sizeof(OrionGameTypeWidget_GetDifficultyDisplayEntry) == 0x000038, "Wrong size on OrionGameTypeWidget_GetDifficultyDisplayEntry");
static_assert(offsetof(OrionGameTypeWidget_GetDifficultyDisplayEntry, InDifficulty) == 0x000000, "Member 'OrionGameTypeWidget_GetDifficultyDisplayEntry::InDifficulty' has a wrong offset!");
static_assert(offsetof(OrionGameTypeWidget_GetDifficultyDisplayEntry, ReturnValue) == 0x000008, "Member 'OrionGameTypeWidget_GetDifficultyDisplayEntry::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.ShouldEnableDifficultySelector
// 0x0001 (0x0001 - 0x0000)
struct OrionGameTypeWidget_ShouldEnableDifficultySelector final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_ShouldEnableDifficultySelector) == 0x000001, "Wrong alignment on OrionGameTypeWidget_ShouldEnableDifficultySelector");
static_assert(sizeof(OrionGameTypeWidget_ShouldEnableDifficultySelector) == 0x000001, "Wrong size on OrionGameTypeWidget_ShouldEnableDifficultySelector");
static_assert(offsetof(OrionGameTypeWidget_ShouldEnableDifficultySelector, ReturnValue) == 0x000000, "Member 'OrionGameTypeWidget_ShouldEnableDifficultySelector::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGameTypeWidget.ShouldShowDifficultySelector
// 0x0001 (0x0001 - 0x0000)
struct OrionGameTypeWidget_ShouldShowDifficultySelector final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGameTypeWidget_ShouldShowDifficultySelector) == 0x000001, "Wrong alignment on OrionGameTypeWidget_ShouldShowDifficultySelector");
static_assert(sizeof(OrionGameTypeWidget_ShouldShowDifficultySelector) == 0x000001, "Wrong size on OrionGameTypeWidget_ShouldShowDifficultySelector");
static_assert(offsetof(OrionGameTypeWidget_ShouldShowDifficultySelector, ReturnValue) == 0x000000, "Member 'OrionGameTypeWidget_ShouldShowDifficultySelector::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGemCollectionScreen.DynamicGemClicked
// 0x0008 (0x0008 - 0x0000)
struct OrionGemCollectionScreen_DynamicGemClicked final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemCollectionScreen_DynamicGemClicked) == 0x000008, "Wrong alignment on OrionGemCollectionScreen_DynamicGemClicked");
static_assert(sizeof(OrionGemCollectionScreen_DynamicGemClicked) == 0x000008, "Wrong size on OrionGemCollectionScreen_DynamicGemClicked");
static_assert(offsetof(OrionGemCollectionScreen_DynamicGemClicked, Obj) == 0x000000, "Member 'OrionGemCollectionScreen_DynamicGemClicked::Obj' has a wrong offset!");

// Function OrionUI.OrionGemFilterHeader.DynamicSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct OrionGemFilterHeader_DynamicSearchTextChanged final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemFilterHeader_DynamicSearchTextChanged) == 0x000008, "Wrong alignment on OrionGemFilterHeader_DynamicSearchTextChanged");
static_assert(sizeof(OrionGemFilterHeader_DynamicSearchTextChanged) == 0x000018, "Wrong size on OrionGemFilterHeader_DynamicSearchTextChanged");
static_assert(offsetof(OrionGemFilterHeader_DynamicSearchTextChanged, NewText) == 0x000000, "Member 'OrionGemFilterHeader_DynamicSearchTextChanged::NewText' has a wrong offset!");

// Function OrionUI.OrionGemFilterHeader.DynamicSearchTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct OrionGemFilterHeader_DynamicSearchTextCommitted final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionGemFilterHeader_DynamicSearchTextCommitted) == 0x000008, "Wrong alignment on OrionGemFilterHeader_DynamicSearchTextCommitted");
static_assert(sizeof(OrionGemFilterHeader_DynamicSearchTextCommitted) == 0x000020, "Wrong size on OrionGemFilterHeader_DynamicSearchTextCommitted");
static_assert(offsetof(OrionGemFilterHeader_DynamicSearchTextCommitted, NewText) == 0x000000, "Member 'OrionGemFilterHeader_DynamicSearchTextCommitted::NewText' has a wrong offset!");
static_assert(offsetof(OrionGemFilterHeader_DynamicSearchTextCommitted, CommitMethod) == 0x000018, "Member 'OrionGemFilterHeader_DynamicSearchTextCommitted::CommitMethod' has a wrong offset!");

// Function OrionUI.OrionGemFilterHeader.OnFilterFiveSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionGemFilterHeader_OnFilterFiveSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemFilterHeader_OnFilterFiveSelected) == 0x000001, "Wrong alignment on OrionGemFilterHeader_OnFilterFiveSelected");
static_assert(sizeof(OrionGemFilterHeader_OnFilterFiveSelected) == 0x000001, "Wrong size on OrionGemFilterHeader_OnFilterFiveSelected");
static_assert(offsetof(OrionGemFilterHeader_OnFilterFiveSelected, bSelected) == 0x000000, "Member 'OrionGemFilterHeader_OnFilterFiveSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionGemFilterHeader.OnFilterFourSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionGemFilterHeader_OnFilterFourSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemFilterHeader_OnFilterFourSelected) == 0x000001, "Wrong alignment on OrionGemFilterHeader_OnFilterFourSelected");
static_assert(sizeof(OrionGemFilterHeader_OnFilterFourSelected) == 0x000001, "Wrong size on OrionGemFilterHeader_OnFilterFourSelected");
static_assert(offsetof(OrionGemFilterHeader_OnFilterFourSelected, bSelected) == 0x000000, "Member 'OrionGemFilterHeader_OnFilterFourSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionGemFilterHeader.OnFilterOneSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionGemFilterHeader_OnFilterOneSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemFilterHeader_OnFilterOneSelected) == 0x000001, "Wrong alignment on OrionGemFilterHeader_OnFilterOneSelected");
static_assert(sizeof(OrionGemFilterHeader_OnFilterOneSelected) == 0x000001, "Wrong size on OrionGemFilterHeader_OnFilterOneSelected");
static_assert(offsetof(OrionGemFilterHeader_OnFilterOneSelected, bSelected) == 0x000000, "Member 'OrionGemFilterHeader_OnFilterOneSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionGemFilterHeader.OnFilterThreeSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionGemFilterHeader_OnFilterThreeSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemFilterHeader_OnFilterThreeSelected) == 0x000001, "Wrong alignment on OrionGemFilterHeader_OnFilterThreeSelected");
static_assert(sizeof(OrionGemFilterHeader_OnFilterThreeSelected) == 0x000001, "Wrong size on OrionGemFilterHeader_OnFilterThreeSelected");
static_assert(offsetof(OrionGemFilterHeader_OnFilterThreeSelected, bSelected) == 0x000000, "Member 'OrionGemFilterHeader_OnFilterThreeSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionGemFilterHeader.OnFilterTwoSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionGemFilterHeader_OnFilterTwoSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemFilterHeader_OnFilterTwoSelected) == 0x000001, "Wrong alignment on OrionGemFilterHeader_OnFilterTwoSelected");
static_assert(sizeof(OrionGemFilterHeader_OnFilterTwoSelected) == 0x000001, "Wrong size on OrionGemFilterHeader_OnFilterTwoSelected");
static_assert(offsetof(OrionGemFilterHeader_OnFilterTwoSelected, bSelected) == 0x000000, "Member 'OrionGemFilterHeader_OnFilterTwoSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionGemListItem.OnGemSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionGemListItem_OnGemSelected final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemListItem_OnGemSelected) == 0x000001, "Wrong alignment on OrionGemListItem_OnGemSelected");
static_assert(sizeof(OrionGemListItem_OnGemSelected) == 0x000001, "Wrong size on OrionGemListItem_OnGemSelected");
static_assert(offsetof(OrionGemListItem_OnGemSelected, bIsSelected) == 0x000000, "Member 'OrionGemListItem_OnGemSelected::bIsSelected' has a wrong offset!");

// Function OrionUI.OrionGemListItem.OnGemSet
// 0x0008 (0x0008 - 0x0000)
struct OrionGemListItem_OnGemSet final
{
public:
	const class UOrionMcpGemItem*                 Gem;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemListItem_OnGemSet) == 0x000008, "Wrong alignment on OrionGemListItem_OnGemSet");
static_assert(sizeof(OrionGemListItem_OnGemSet) == 0x000008, "Wrong size on OrionGemListItem_OnGemSet");
static_assert(offsetof(OrionGemListItem_OnGemSet, Gem) == 0x000000, "Member 'OrionGemListItem_OnGemSet::Gem' has a wrong offset!");

// Function OrionUI.OrionGemSelectionDisplay.DynamicHandleAffinityClicked
// 0x0010 (0x0010 - 0x0000)
struct OrionGemSelectionDisplay_DynamicHandleAffinityClicked final
{
public:
	class UOrionBaseButton*                       SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionGemSelectionDisplay_DynamicHandleAffinityClicked) == 0x000008, "Wrong alignment on OrionGemSelectionDisplay_DynamicHandleAffinityClicked");
static_assert(sizeof(OrionGemSelectionDisplay_DynamicHandleAffinityClicked) == 0x000010, "Wrong size on OrionGemSelectionDisplay_DynamicHandleAffinityClicked");
static_assert(offsetof(OrionGemSelectionDisplay_DynamicHandleAffinityClicked, SelectedButton) == 0x000000, "Member 'OrionGemSelectionDisplay_DynamicHandleAffinityClicked::SelectedButton' has a wrong offset!");
static_assert(offsetof(OrionGemSelectionDisplay_DynamicHandleAffinityClicked, ButtonIndex) == 0x000008, "Member 'OrionGemSelectionDisplay_DynamicHandleAffinityClicked::ButtonIndex' has a wrong offset!");

// Function OrionUI.OrionGemSelectionDisplay.OnGemPicked
// 0x0008 (0x0008 - 0x0000)
struct OrionGemSelectionDisplay_OnGemPicked final
{
public:
	class UOrionMcpGemItem*                       GemPicked;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemSelectionDisplay_OnGemPicked) == 0x000008, "Wrong alignment on OrionGemSelectionDisplay_OnGemPicked");
static_assert(sizeof(OrionGemSelectionDisplay_OnGemPicked) == 0x000008, "Wrong size on OrionGemSelectionDisplay_OnGemPicked");
static_assert(offsetof(OrionGemSelectionDisplay_OnGemPicked, GemPicked) == 0x000000, "Member 'OrionGemSelectionDisplay_OnGemPicked::GemPicked' has a wrong offset!");

// Function OrionUI.OrionGemSelector.OnGemChosen
// 0x0008 (0x0008 - 0x0000)
struct OrionGemSelector_OnGemChosen final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemSelector_OnGemChosen) == 0x000008, "Wrong alignment on OrionGemSelector_OnGemChosen");
static_assert(sizeof(OrionGemSelector_OnGemChosen) == 0x000008, "Wrong size on OrionGemSelector_OnGemChosen");
static_assert(offsetof(OrionGemSelector_OnGemChosen, Item) == 0x000000, "Member 'OrionGemSelector_OnGemChosen::Item' has a wrong offset!");

// Function OrionUI.OrionGemSummaryWidget.OnDataSet
// 0x0001 (0x0001 - 0x0000)
struct OrionGemSummaryWidget_OnDataSet final
{
public:
	EOrionItemRarity                              GemRarity;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGemSummaryWidget_OnDataSet) == 0x000001, "Wrong alignment on OrionGemSummaryWidget_OnDataSet");
static_assert(sizeof(OrionGemSummaryWidget_OnDataSet) == 0x000001, "Wrong size on OrionGemSummaryWidget_OnDataSet");
static_assert(offsetof(OrionGemSummaryWidget_OnDataSet, GemRarity) == 0x000000, "Member 'OrionGemSummaryWidget_OnDataSet::GemRarity' has a wrong offset!");

// Function OrionUI.OrionGenericMarkingMenuNodeWidget.ShowNode
// 0x0001 (0x0001 - 0x0000)
struct OrionGenericMarkingMenuNodeWidget_ShowNode final
{
public:
	bool                                          bUsingGamePad;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGenericMarkingMenuNodeWidget_ShowNode) == 0x000001, "Wrong alignment on OrionGenericMarkingMenuNodeWidget_ShowNode");
static_assert(sizeof(OrionGenericMarkingMenuNodeWidget_ShowNode) == 0x000001, "Wrong size on OrionGenericMarkingMenuNodeWidget_ShowNode");
static_assert(offsetof(OrionGenericMarkingMenuNodeWidget_ShowNode, bUsingGamePad) == 0x000000, "Member 'OrionGenericMarkingMenuNodeWidget_ShowNode::bUsingGamePad' has a wrong offset!");

// Function OrionUI.OrionMarkingMenuLayerWidget.ShowWidget
// 0x0001 (0x0001 - 0x0000)
struct OrionMarkingMenuLayerWidget_ShowWidget final
{
public:
	bool                                          bUsingGamePad;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMarkingMenuLayerWidget_ShowWidget) == 0x000001, "Wrong alignment on OrionMarkingMenuLayerWidget_ShowWidget");
static_assert(sizeof(OrionMarkingMenuLayerWidget_ShowWidget) == 0x000001, "Wrong size on OrionMarkingMenuLayerWidget_ShowWidget");
static_assert(offsetof(OrionMarkingMenuLayerWidget_ShowWidget, bUsingGamePad) == 0x000000, "Member 'OrionMarkingMenuLayerWidget_ShowWidget::bUsingGamePad' has a wrong offset!");

// Function OrionUI.OrionMarkingMenuLayerWidget_TeamComms.SetInEmoteMode
// 0x0001 (0x0001 - 0x0000)
struct OrionMarkingMenuLayerWidget_TeamComms_SetInEmoteMode final
{
public:
	bool                                          bInEmoteMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMarkingMenuLayerWidget_TeamComms_SetInEmoteMode) == 0x000001, "Wrong alignment on OrionMarkingMenuLayerWidget_TeamComms_SetInEmoteMode");
static_assert(sizeof(OrionMarkingMenuLayerWidget_TeamComms_SetInEmoteMode) == 0x000001, "Wrong size on OrionMarkingMenuLayerWidget_TeamComms_SetInEmoteMode");
static_assert(offsetof(OrionMarkingMenuLayerWidget_TeamComms_SetInEmoteMode, bInEmoteMode) == 0x000000, "Member 'OrionMarkingMenuLayerWidget_TeamComms_SetInEmoteMode::bInEmoteMode' has a wrong offset!");

// Function OrionUI.OrionMarkingMenuLayerWidget_TeamComms.ShowEmoteTogglePrompt
// 0x0001 (0x0001 - 0x0000)
struct OrionMarkingMenuLayerWidget_TeamComms_ShowEmoteTogglePrompt final
{
public:
	bool                                          bShowPrompt;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMarkingMenuLayerWidget_TeamComms_ShowEmoteTogglePrompt) == 0x000001, "Wrong alignment on OrionMarkingMenuLayerWidget_TeamComms_ShowEmoteTogglePrompt");
static_assert(sizeof(OrionMarkingMenuLayerWidget_TeamComms_ShowEmoteTogglePrompt) == 0x000001, "Wrong size on OrionMarkingMenuLayerWidget_TeamComms_ShowEmoteTogglePrompt");
static_assert(offsetof(OrionMarkingMenuLayerWidget_TeamComms_ShowEmoteTogglePrompt, bShowPrompt) == 0x000000, "Member 'OrionMarkingMenuLayerWidget_TeamComms_ShowEmoteTogglePrompt::bShowPrompt' has a wrong offset!");

// Function OrionUI.OrionMeshWidget.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct OrionMeshWidget_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMeshWidget_GetDynamicMaterial) == 0x000008, "Wrong alignment on OrionMeshWidget_GetDynamicMaterial");
static_assert(sizeof(OrionMeshWidget_GetDynamicMaterial) == 0x000008, "Wrong size on OrionMeshWidget_GetDynamicMaterial");
static_assert(offsetof(OrionMeshWidget_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'OrionMeshWidget_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionMeshWidget.SetDesiredSize
// 0x0008 (0x0008 - 0x0000)
struct OrionMeshWidget_SetDesiredSize final
{
public:
	struct FVector2D                              InDesiredSize;                                     // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMeshWidget_SetDesiredSize) == 0x000004, "Wrong alignment on OrionMeshWidget_SetDesiredSize");
static_assert(sizeof(OrionMeshWidget_SetDesiredSize) == 0x000008, "Wrong size on OrionMeshWidget_SetDesiredSize");
static_assert(offsetof(OrionMeshWidget_SetDesiredSize, InDesiredSize) == 0x000000, "Member 'OrionMeshWidget_SetDesiredSize::InDesiredSize' has a wrong offset!");

// Function OrionUI.OrionMeshWidget.SetMeshHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct OrionMeshWidget_SetMeshHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMeshWidget_SetMeshHorizontalAlignment) == 0x000001, "Wrong alignment on OrionMeshWidget_SetMeshHorizontalAlignment");
static_assert(sizeof(OrionMeshWidget_SetMeshHorizontalAlignment) == 0x000001, "Wrong size on OrionMeshWidget_SetMeshHorizontalAlignment");
static_assert(offsetof(OrionMeshWidget_SetMeshHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'OrionMeshWidget_SetMeshHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function OrionUI.OrionMeshWidget.SetMeshMargin
// 0x0010 (0x0010 - 0x0000)
struct OrionMeshWidget_SetMeshMargin final
{
public:
	struct FMargin                                InMargin;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMeshWidget_SetMeshMargin) == 0x000004, "Wrong alignment on OrionMeshWidget_SetMeshMargin");
static_assert(sizeof(OrionMeshWidget_SetMeshMargin) == 0x000010, "Wrong size on OrionMeshWidget_SetMeshMargin");
static_assert(offsetof(OrionMeshWidget_SetMeshMargin, InMargin) == 0x000000, "Member 'OrionMeshWidget_SetMeshMargin::InMargin' has a wrong offset!");

// Function OrionUI.OrionMeshWidget.SetMeshScale
// 0x0004 (0x0004 - 0x0000)
struct OrionMeshWidget_SetMeshScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMeshWidget_SetMeshScale) == 0x000004, "Wrong alignment on OrionMeshWidget_SetMeshScale");
static_assert(sizeof(OrionMeshWidget_SetMeshScale) == 0x000004, "Wrong size on OrionMeshWidget_SetMeshScale");
static_assert(offsetof(OrionMeshWidget_SetMeshScale, InScale) == 0x000000, "Member 'OrionMeshWidget_SetMeshScale::InScale' has a wrong offset!");

// Function OrionUI.OrionMeshWidget.SetMeshVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct OrionMeshWidget_SetMeshVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMeshWidget_SetMeshVerticalAlignment) == 0x000001, "Wrong alignment on OrionMeshWidget_SetMeshVerticalAlignment");
static_assert(sizeof(OrionMeshWidget_SetMeshVerticalAlignment) == 0x000001, "Wrong size on OrionMeshWidget_SetMeshVerticalAlignment");
static_assert(offsetof(OrionMeshWidget_SetMeshVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'OrionMeshWidget_SetMeshVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function OrionUI.OrionGenericMarkingMenuWidget.OnFaceButtonPressed
// 0x0001 (0x0001 - 0x0000)
struct OrionGenericMarkingMenuWidget_OnFaceButtonPressed final
{
public:
	EOrionGestureDirection                        Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGenericMarkingMenuWidget_OnFaceButtonPressed) == 0x000001, "Wrong alignment on OrionGenericMarkingMenuWidget_OnFaceButtonPressed");
static_assert(sizeof(OrionGenericMarkingMenuWidget_OnFaceButtonPressed) == 0x000001, "Wrong size on OrionGenericMarkingMenuWidget_OnFaceButtonPressed");
static_assert(offsetof(OrionGenericMarkingMenuWidget_OnFaceButtonPressed, Direction) == 0x000000, "Member 'OrionGenericMarkingMenuWidget_OnFaceButtonPressed::Direction' has a wrong offset!");

// Function OrionUI.OrionGenericMarkingMenu_TeamComms.SetEmoteMode
// 0x0001 (0x0001 - 0x0000)
struct OrionGenericMarkingMenu_TeamComms_SetEmoteMode final
{
public:
	bool                                          bNewInEmoteMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGenericMarkingMenu_TeamComms_SetEmoteMode) == 0x000001, "Wrong alignment on OrionGenericMarkingMenu_TeamComms_SetEmoteMode");
static_assert(sizeof(OrionGenericMarkingMenu_TeamComms_SetEmoteMode) == 0x000001, "Wrong size on OrionGenericMarkingMenu_TeamComms_SetEmoteMode");
static_assert(offsetof(OrionGenericMarkingMenu_TeamComms_SetEmoteMode, bNewInEmoteMode) == 0x000000, "Member 'OrionGenericMarkingMenu_TeamComms_SetEmoteMode::bNewInEmoteMode' has a wrong offset!");

// Function OrionUI.OrionGenericMarkingMenu_TeamComms.EmotesAvailable
// 0x0001 (0x0001 - 0x0000)
struct OrionGenericMarkingMenu_TeamComms_EmotesAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGenericMarkingMenu_TeamComms_EmotesAvailable) == 0x000001, "Wrong alignment on OrionGenericMarkingMenu_TeamComms_EmotesAvailable");
static_assert(sizeof(OrionGenericMarkingMenu_TeamComms_EmotesAvailable) == 0x000001, "Wrong size on OrionGenericMarkingMenu_TeamComms_EmotesAvailable");
static_assert(offsetof(OrionGenericMarkingMenu_TeamComms_EmotesAvailable, ReturnValue) == 0x000000, "Member 'OrionGenericMarkingMenu_TeamComms_EmotesAvailable::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGenericMarkingMenu_TeamComms.GetInEmoteMode
// 0x0001 (0x0001 - 0x0000)
struct OrionGenericMarkingMenu_TeamComms_GetInEmoteMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGenericMarkingMenu_TeamComms_GetInEmoteMode) == 0x000001, "Wrong alignment on OrionGenericMarkingMenu_TeamComms_GetInEmoteMode");
static_assert(sizeof(OrionGenericMarkingMenu_TeamComms_GetInEmoteMode) == 0x000001, "Wrong size on OrionGenericMarkingMenu_TeamComms_GetInEmoteMode");
static_assert(offsetof(OrionGenericMarkingMenu_TeamComms_GetInEmoteMode, ReturnValue) == 0x000000, "Member 'OrionGenericMarkingMenu_TeamComms_GetInEmoteMode::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionGlowingRarityText.SetRarityBP
// 0x0002 (0x0002 - 0x0000)
struct OrionGlowingRarityText_SetRarityBP final
{
public:
	EOrionItemRarity                              ItemRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideGlowingText;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionGlowingRarityText_SetRarityBP) == 0x000001, "Wrong alignment on OrionGlowingRarityText_SetRarityBP");
static_assert(sizeof(OrionGlowingRarityText_SetRarityBP) == 0x000002, "Wrong size on OrionGlowingRarityText_SetRarityBP");
static_assert(offsetof(OrionGlowingRarityText_SetRarityBP, ItemRarity) == 0x000000, "Member 'OrionGlowingRarityText_SetRarityBP::ItemRarity' has a wrong offset!");
static_assert(offsetof(OrionGlowingRarityText_SetRarityBP, bHideGlowingText) == 0x000001, "Member 'OrionGlowingRarityText_SetRarityBP::bHideGlowingText' has a wrong offset!");

// Function OrionUI.OrionMilestoneRewardProgress.OnNextChestReached
// 0x0008 (0x0008 - 0x0000)
struct OrionMilestoneRewardProgress_OnNextChestReached final
{
public:
	const class UOrionRewardProgressBar*          ActiveProgressBar_0;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMilestoneRewardProgress_OnNextChestReached) == 0x000008, "Wrong alignment on OrionMilestoneRewardProgress_OnNextChestReached");
static_assert(sizeof(OrionMilestoneRewardProgress_OnNextChestReached) == 0x000008, "Wrong size on OrionMilestoneRewardProgress_OnNextChestReached");
static_assert(offsetof(OrionMilestoneRewardProgress_OnNextChestReached, ActiveProgressBar_0) == 0x000000, "Member 'OrionMilestoneRewardProgress_OnNextChestReached::ActiveProgressBar_0' has a wrong offset!");

// Function OrionUI.OrionHandEntry.GetCurrentVisualState
// 0x0001 (0x0001 - 0x0000)
struct OrionHandEntry_GetCurrentVisualState final
{
public:
	EHandEntryVisualState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHandEntry_GetCurrentVisualState) == 0x000001, "Wrong alignment on OrionHandEntry_GetCurrentVisualState");
static_assert(sizeof(OrionHandEntry_GetCurrentVisualState) == 0x000001, "Wrong size on OrionHandEntry_GetCurrentVisualState");
static_assert(offsetof(OrionHandEntry_GetCurrentVisualState, ReturnValue) == 0x000000, "Member 'OrionHandEntry_GetCurrentVisualState::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionHandEntry.OnIsAffordableChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionHandEntry_OnIsAffordableChanged final
{
public:
	bool                                          bIsAffordable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHandEntry_OnIsAffordableChanged) == 0x000001, "Wrong alignment on OrionHandEntry_OnIsAffordableChanged");
static_assert(sizeof(OrionHandEntry_OnIsAffordableChanged) == 0x000001, "Wrong size on OrionHandEntry_OnIsAffordableChanged");
static_assert(offsetof(OrionHandEntry_OnIsAffordableChanged, bIsAffordable) == 0x000000, "Member 'OrionHandEntry_OnIsAffordableChanged::bIsAffordable' has a wrong offset!");

// Function OrionUI.OrionHandEntry.OnIsPurchasableChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionHandEntry_OnIsPurchasableChanged final
{
public:
	bool                                          bIsPurchasable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHandEntry_OnIsPurchasableChanged) == 0x000001, "Wrong alignment on OrionHandEntry_OnIsPurchasableChanged");
static_assert(sizeof(OrionHandEntry_OnIsPurchasableChanged) == 0x000001, "Wrong size on OrionHandEntry_OnIsPurchasableChanged");
static_assert(offsetof(OrionHandEntry_OnIsPurchasableChanged, bIsPurchasable) == 0x000000, "Member 'OrionHandEntry_OnIsPurchasableChanged::bIsPurchasable' has a wrong offset!");

// Function OrionUI.OrionHandEntry.OnUnequipTargetStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionHandEntry_OnUnequipTargetStateChanged final
{
public:
	bool                                          bIsUnequipTarget;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHandEntry_OnUnequipTargetStateChanged) == 0x000001, "Wrong alignment on OrionHandEntry_OnUnequipTargetStateChanged");
static_assert(sizeof(OrionHandEntry_OnUnequipTargetStateChanged) == 0x000001, "Wrong size on OrionHandEntry_OnUnequipTargetStateChanged");
static_assert(offsetof(OrionHandEntry_OnUnequipTargetStateChanged, bIsUnequipTarget) == 0x000000, "Member 'OrionHandEntry_OnUnequipTargetStateChanged::bIsUnequipTarget' has a wrong offset!");

// Function OrionUI.OrionHandEntry.GetIsPurchasable
// 0x0001 (0x0001 - 0x0000)
struct OrionHandEntry_GetIsPurchasable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHandEntry_GetIsPurchasable) == 0x000001, "Wrong alignment on OrionHandEntry_GetIsPurchasable");
static_assert(sizeof(OrionHandEntry_GetIsPurchasable) == 0x000001, "Wrong size on OrionHandEntry_GetIsPurchasable");
static_assert(offsetof(OrionHandEntry_GetIsPurchasable, ReturnValue) == 0x000000, "Member 'OrionHandEntry_GetIsPurchasable::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionHandEntryTooltip.OnPurchasabilityChanged
// 0x0002 (0x0002 - 0x0000)
struct OrionHandEntryTooltip_OnPurchasabilityChanged final
{
public:
	bool                                          bIsPurchasable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAffordable;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHandEntryTooltip_OnPurchasabilityChanged) == 0x000001, "Wrong alignment on OrionHandEntryTooltip_OnPurchasabilityChanged");
static_assert(sizeof(OrionHandEntryTooltip_OnPurchasabilityChanged) == 0x000002, "Wrong size on OrionHandEntryTooltip_OnPurchasabilityChanged");
static_assert(offsetof(OrionHandEntryTooltip_OnPurchasabilityChanged, bIsPurchasable) == 0x000000, "Member 'OrionHandEntryTooltip_OnPurchasabilityChanged::bIsPurchasable' has a wrong offset!");
static_assert(offsetof(OrionHandEntryTooltip_OnPurchasabilityChanged, bIsAffordable) == 0x000001, "Member 'OrionHandEntryTooltip_OnPurchasabilityChanged::bIsAffordable' has a wrong offset!");

// Function OrionUI.OrionHeroAbilityDisplay.SetHero
// 0x0008 (0x0008 - 0x0000)
struct OrionHeroAbilityDisplay_SetHero final
{
public:
	class UOrionHeroData*                         HeroData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroAbilityDisplay_SetHero) == 0x000008, "Wrong alignment on OrionHeroAbilityDisplay_SetHero");
static_assert(sizeof(OrionHeroAbilityDisplay_SetHero) == 0x000008, "Wrong size on OrionHeroAbilityDisplay_SetHero");
static_assert(offsetof(OrionHeroAbilityDisplay_SetHero, HeroData) == 0x000000, "Member 'OrionHeroAbilityDisplay_SetHero::HeroData' has a wrong offset!");

// Function OrionUI.OrionRewardWidget.BP_SetRewardInfo
// 0x0010 (0x0010 - 0x0000)
struct OrionRewardWidget_BP_SetRewardInfo final
{
public:
	const class UOrionMcpItemDefinition*          ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEarned;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionRewardWidget_BP_SetRewardInfo) == 0x000008, "Wrong alignment on OrionRewardWidget_BP_SetRewardInfo");
static_assert(sizeof(OrionRewardWidget_BP_SetRewardInfo) == 0x000010, "Wrong size on OrionRewardWidget_BP_SetRewardInfo");
static_assert(offsetof(OrionRewardWidget_BP_SetRewardInfo, ItemDefinition) == 0x000000, "Member 'OrionRewardWidget_BP_SetRewardInfo::ItemDefinition' has a wrong offset!");
static_assert(offsetof(OrionRewardWidget_BP_SetRewardInfo, Quantity) == 0x000008, "Member 'OrionRewardWidget_BP_SetRewardInfo::Quantity' has a wrong offset!");
static_assert(offsetof(OrionRewardWidget_BP_SetRewardInfo, bIsEarned) == 0x00000C, "Member 'OrionRewardWidget_BP_SetRewardInfo::bIsEarned' has a wrong offset!");

// Function OrionUI.OrionRewardWidget.OnActiveStateSet
// 0x0001 (0x0001 - 0x0000)
struct OrionRewardWidget_OnActiveStateSet final
{
public:
	EOrionRewardWidgetState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardWidget_OnActiveStateSet) == 0x000001, "Wrong alignment on OrionRewardWidget_OnActiveStateSet");
static_assert(sizeof(OrionRewardWidget_OnActiveStateSet) == 0x000001, "Wrong size on OrionRewardWidget_OnActiveStateSet");
static_assert(offsetof(OrionRewardWidget_OnActiveStateSet, State) == 0x000000, "Member 'OrionRewardWidget_OnActiveStateSet::State' has a wrong offset!");

// Function OrionUI.OrionRewardWidget.OnDataSet
// 0x0002 (0x0002 - 0x0000)
struct OrionRewardWidget_OnDataSet final
{
public:
	EOrionItemRarity                              ItemRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionItemType                                ItemType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardWidget_OnDataSet) == 0x000001, "Wrong alignment on OrionRewardWidget_OnDataSet");
static_assert(sizeof(OrionRewardWidget_OnDataSet) == 0x000002, "Wrong size on OrionRewardWidget_OnDataSet");
static_assert(offsetof(OrionRewardWidget_OnDataSet, ItemRarity) == 0x000000, "Member 'OrionRewardWidget_OnDataSet::ItemRarity' has a wrong offset!");
static_assert(offsetof(OrionRewardWidget_OnDataSet, ItemType) == 0x000001, "Member 'OrionRewardWidget_OnDataSet::ItemType' has a wrong offset!");

// Function OrionUI.OrionRewardWidget.OnVaultFlash
// 0x0004 (0x0004 - 0x0000)
struct OrionRewardWidget_OnVaultFlash final
{
public:
	int32                                         RoundsRemaining;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardWidget_OnVaultFlash) == 0x000004, "Wrong alignment on OrionRewardWidget_OnVaultFlash");
static_assert(sizeof(OrionRewardWidget_OnVaultFlash) == 0x000004, "Wrong size on OrionRewardWidget_OnVaultFlash");
static_assert(offsetof(OrionRewardWidget_OnVaultFlash, RoundsRemaining) == 0x000000, "Member 'OrionRewardWidget_OnVaultFlash::RoundsRemaining' has a wrong offset!");

// Function OrionUI.OrionRewardWidget.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct OrionRewardWidget_SetActiveState final
{
public:
	EOrionRewardWidgetState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardWidget_SetActiveState) == 0x000001, "Wrong alignment on OrionRewardWidget_SetActiveState");
static_assert(sizeof(OrionRewardWidget_SetActiveState) == 0x000001, "Wrong size on OrionRewardWidget_SetActiveState");
static_assert(offsetof(OrionRewardWidget_SetActiveState, State) == 0x000000, "Member 'OrionRewardWidget_SetActiveState::State' has a wrong offset!");

// Function OrionUI.OrionRewardWidget.SetRewardScale
// 0x0004 (0x0004 - 0x0000)
struct OrionRewardWidget_SetRewardScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardWidget_SetRewardScale) == 0x000004, "Wrong alignment on OrionRewardWidget_SetRewardScale");
static_assert(sizeof(OrionRewardWidget_SetRewardScale) == 0x000004, "Wrong size on OrionRewardWidget_SetRewardScale");
static_assert(offsetof(OrionRewardWidget_SetRewardScale, InScale) == 0x000000, "Member 'OrionRewardWidget_SetRewardScale::InScale' has a wrong offset!");

// Function OrionUI.OrionRewardWidget.ShowStinger
// 0x0001 (0x0001 - 0x0000)
struct OrionRewardWidget_ShowStinger final
{
public:
	bool                                          bShowStinger;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardWidget_ShowStinger) == 0x000001, "Wrong alignment on OrionRewardWidget_ShowStinger");
static_assert(sizeof(OrionRewardWidget_ShowStinger) == 0x000001, "Wrong size on OrionRewardWidget_ShowStinger");
static_assert(offsetof(OrionRewardWidget_ShowStinger, bShowStinger) == 0x000000, "Member 'OrionRewardWidget_ShowStinger::bShowStinger' has a wrong offset!");

// Function OrionUI.OrionHeroCollectionScreen.DynamicHandleItemSelected
// 0x0008 (0x0008 - 0x0000)
struct OrionHeroCollectionScreen_DynamicHandleItemSelected final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroCollectionScreen_DynamicHandleItemSelected) == 0x000008, "Wrong alignment on OrionHeroCollectionScreen_DynamicHandleItemSelected");
static_assert(sizeof(OrionHeroCollectionScreen_DynamicHandleItemSelected) == 0x000008, "Wrong size on OrionHeroCollectionScreen_DynamicHandleItemSelected");
static_assert(offsetof(OrionHeroCollectionScreen_DynamicHandleItemSelected, Item) == 0x000000, "Member 'OrionHeroCollectionScreen_DynamicHandleItemSelected::Item' has a wrong offset!");

// Function OrionUI.OrionHeroDetails_Mastery.OnShowHeroLocked
// 0x0001 (0x0001 - 0x0000)
struct OrionHeroDetails_Mastery_OnShowHeroLocked final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetails_Mastery_OnShowHeroLocked) == 0x000001, "Wrong alignment on OrionHeroDetails_Mastery_OnShowHeroLocked");
static_assert(sizeof(OrionHeroDetails_Mastery_OnShowHeroLocked) == 0x000001, "Wrong size on OrionHeroDetails_Mastery_OnShowHeroLocked");
static_assert(offsetof(OrionHeroDetails_Mastery_OnShowHeroLocked, bLocked) == 0x000000, "Member 'OrionHeroDetails_Mastery_OnShowHeroLocked::bLocked' has a wrong offset!");

// Function OrionUI.OrionHeroDetails_Mastery.SetHero
// 0x0008 (0x0008 - 0x0000)
struct OrionHeroDetails_Mastery_SetHero final
{
public:
	class UOrionMcpHeroItem*                      HeroItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetails_Mastery_SetHero) == 0x000008, "Wrong alignment on OrionHeroDetails_Mastery_SetHero");
static_assert(sizeof(OrionHeroDetails_Mastery_SetHero) == 0x000008, "Wrong size on OrionHeroDetails_Mastery_SetHero");
static_assert(offsetof(OrionHeroDetails_Mastery_SetHero, HeroItem) == 0x000000, "Member 'OrionHeroDetails_Mastery_SetHero::HeroItem' has a wrong offset!");

// Function OrionUI.OrionHeroDetailsMasteryLevelDisplay.OnLevelSet
// 0x0001 (0x0001 - 0x0000)
struct OrionHeroDetailsMasteryLevelDisplay_OnLevelSet final
{
public:
	bool                                          bProgressLocked;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetailsMasteryLevelDisplay_OnLevelSet) == 0x000001, "Wrong alignment on OrionHeroDetailsMasteryLevelDisplay_OnLevelSet");
static_assert(sizeof(OrionHeroDetailsMasteryLevelDisplay_OnLevelSet) == 0x000001, "Wrong size on OrionHeroDetailsMasteryLevelDisplay_OnLevelSet");
static_assert(offsetof(OrionHeroDetailsMasteryLevelDisplay_OnLevelSet, bProgressLocked) == 0x000000, "Member 'OrionHeroDetailsMasteryLevelDisplay_OnLevelSet::bProgressLocked' has a wrong offset!");

// Function OrionUI.OrionInfoFeedEntryBase.OnRemoveEntry
// 0x0001 (0x0001 - 0x0000)
struct OrionInfoFeedEntryBase_OnRemoveEntry final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionInfoFeedEntryBase_OnRemoveEntry) == 0x000001, "Wrong alignment on OrionInfoFeedEntryBase_OnRemoveEntry");
static_assert(sizeof(OrionInfoFeedEntryBase_OnRemoveEntry) == 0x000001, "Wrong size on OrionInfoFeedEntryBase_OnRemoveEntry");
static_assert(offsetof(OrionInfoFeedEntryBase_OnRemoveEntry, bImmediate) == 0x000000, "Member 'OrionInfoFeedEntryBase_OnRemoveEntry::bImmediate' has a wrong offset!");

// Function OrionUI.OrionHeroDetailsMasteryRewardTimeline.OnRankTierSet
// 0x0001 (0x0001 - 0x0000)
struct OrionHeroDetailsMasteryRewardTimeline_OnRankTierSet final
{
public:
	EOrionHeroRankTier                            RankTier;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetailsMasteryRewardTimeline_OnRankTierSet) == 0x000001, "Wrong alignment on OrionHeroDetailsMasteryRewardTimeline_OnRankTierSet");
static_assert(sizeof(OrionHeroDetailsMasteryRewardTimeline_OnRankTierSet) == 0x000001, "Wrong size on OrionHeroDetailsMasteryRewardTimeline_OnRankTierSet");
static_assert(offsetof(OrionHeroDetailsMasteryRewardTimeline_OnRankTierSet, RankTier) == 0x000000, "Member 'OrionHeroDetailsMasteryRewardTimeline_OnRankTierSet::RankTier' has a wrong offset!");

// Function OrionUI.OrionHeroDetailsMasteryRewardTimelineEntry.OnFirstRank
// 0x0001 (0x0001 - 0x0000)
struct OrionHeroDetailsMasteryRewardTimelineEntry_OnFirstRank final
{
public:
	bool                                          bIsFirst;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetailsMasteryRewardTimelineEntry_OnFirstRank) == 0x000001, "Wrong alignment on OrionHeroDetailsMasteryRewardTimelineEntry_OnFirstRank");
static_assert(sizeof(OrionHeroDetailsMasteryRewardTimelineEntry_OnFirstRank) == 0x000001, "Wrong size on OrionHeroDetailsMasteryRewardTimelineEntry_OnFirstRank");
static_assert(offsetof(OrionHeroDetailsMasteryRewardTimelineEntry_OnFirstRank, bIsFirst) == 0x000000, "Member 'OrionHeroDetailsMasteryRewardTimelineEntry_OnFirstRank::bIsFirst' has a wrong offset!");

// Function OrionUI.OrionHeroDetailsMasteryRewardTimelineEntry.OnRewardLocked
// 0x0001 (0x0001 - 0x0000)
struct OrionHeroDetailsMasteryRewardTimelineEntry_OnRewardLocked final
{
public:
	bool                                          bIsLocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetailsMasteryRewardTimelineEntry_OnRewardLocked) == 0x000001, "Wrong alignment on OrionHeroDetailsMasteryRewardTimelineEntry_OnRewardLocked");
static_assert(sizeof(OrionHeroDetailsMasteryRewardTimelineEntry_OnRewardLocked) == 0x000001, "Wrong size on OrionHeroDetailsMasteryRewardTimelineEntry_OnRewardLocked");
static_assert(offsetof(OrionHeroDetailsMasteryRewardTimelineEntry_OnRewardLocked, bIsLocked) == 0x000000, "Member 'OrionHeroDetailsMasteryRewardTimelineEntry_OnRewardLocked::bIsLocked' has a wrong offset!");

// Function OrionUI.OrionHeroDetailsMasteryRewardTimelineEntry.SetRewardRenderTransformPivot
// 0x0008 (0x0008 - 0x0000)
struct OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot) == 0x000004, "Wrong alignment on OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot");
static_assert(sizeof(OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot) == 0x000008, "Wrong size on OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot");
static_assert(offsetof(OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot, X) == 0x000000, "Member 'OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot::X' has a wrong offset!");
static_assert(offsetof(OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot, Y) == 0x000004, "Member 'OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardRenderTransformPivot::Y' has a wrong offset!");

// Function OrionUI.OrionHeroDetailsMasteryRewardTimelineEntry.SetRewardScaleTooltipSafe
// 0x0004 (0x0004 - 0x0000)
struct OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardScaleTooltipSafe final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardScaleTooltipSafe) == 0x000004, "Wrong alignment on OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardScaleTooltipSafe");
static_assert(sizeof(OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardScaleTooltipSafe) == 0x000004, "Wrong size on OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardScaleTooltipSafe");
static_assert(offsetof(OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardScaleTooltipSafe, ScaleValue) == 0x000000, "Member 'OrionHeroDetailsMasteryRewardTimelineEntry_SetRewardScaleTooltipSafe::ScaleValue' has a wrong offset!");

// Function OrionUI.OrionHeroRewardTooltip.OnUpdateLock
// 0x0001 (0x0001 - 0x0000)
struct OrionHeroRewardTooltip_OnUpdateLock final
{
public:
	bool                                          bIsOwned;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroRewardTooltip_OnUpdateLock) == 0x000001, "Wrong alignment on OrionHeroRewardTooltip_OnUpdateLock");
static_assert(sizeof(OrionHeroRewardTooltip_OnUpdateLock) == 0x000001, "Wrong size on OrionHeroRewardTooltip_OnUpdateLock");
static_assert(offsetof(OrionHeroRewardTooltip_OnUpdateLock, bIsOwned) == 0x000000, "Member 'OrionHeroRewardTooltip_OnUpdateLock::bIsOwned' has a wrong offset!");

// Function OrionUI.OrionHeroRewardTooltip.OnUpdateXPBonuses
// 0x0008 (0x0008 - 0x0000)
struct OrionHeroRewardTooltip_OnUpdateXPBonuses final
{
public:
	float                                         SelfBonus;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeammateBonus;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroRewardTooltip_OnUpdateXPBonuses) == 0x000004, "Wrong alignment on OrionHeroRewardTooltip_OnUpdateXPBonuses");
static_assert(sizeof(OrionHeroRewardTooltip_OnUpdateXPBonuses) == 0x000008, "Wrong size on OrionHeroRewardTooltip_OnUpdateXPBonuses");
static_assert(offsetof(OrionHeroRewardTooltip_OnUpdateXPBonuses, SelfBonus) == 0x000000, "Member 'OrionHeroRewardTooltip_OnUpdateXPBonuses::SelfBonus' has a wrong offset!");
static_assert(offsetof(OrionHeroRewardTooltip_OnUpdateXPBonuses, TeammateBonus) == 0x000004, "Member 'OrionHeroRewardTooltip_OnUpdateXPBonuses::TeammateBonus' has a wrong offset!");

// Function OrionUI.OrionHeroDetails_Skins.DynamicHandleSkinSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionHeroDetails_Skins_DynamicHandleSkinSelected final
{
public:
	class UObject*                                SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionHeroDetails_Skins_DynamicHandleSkinSelected) == 0x000008, "Wrong alignment on OrionHeroDetails_Skins_DynamicHandleSkinSelected");
static_assert(sizeof(OrionHeroDetails_Skins_DynamicHandleSkinSelected) == 0x000010, "Wrong size on OrionHeroDetails_Skins_DynamicHandleSkinSelected");
static_assert(offsetof(OrionHeroDetails_Skins_DynamicHandleSkinSelected, SelectedItem) == 0x000000, "Member 'OrionHeroDetails_Skins_DynamicHandleSkinSelected::SelectedItem' has a wrong offset!");
static_assert(offsetof(OrionHeroDetails_Skins_DynamicHandleSkinSelected, bSelected) == 0x000008, "Member 'OrionHeroDetails_Skins_DynamicHandleSkinSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionHeroDetails_Skins.DynamicHandleSkinVariationSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected final
{
public:
	class UObject*                                SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected) == 0x000008, "Wrong alignment on OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected");
static_assert(sizeof(OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected) == 0x000010, "Wrong size on OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected");
static_assert(offsetof(OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected, SelectedItem) == 0x000000, "Member 'OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected::SelectedItem' has a wrong offset!");
static_assert(offsetof(OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected, bSelected) == 0x000008, "Member 'OrionHeroDetails_Skins_DynamicHandleSkinVariationSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionHeroDetails_Skins.SetHero
// 0x0008 (0x0008 - 0x0000)
struct OrionHeroDetails_Skins_SetHero final
{
public:
	class UOrionMcpHeroItem*                      HeroItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetails_Skins_SetHero) == 0x000008, "Wrong alignment on OrionHeroDetails_Skins_SetHero");
static_assert(sizeof(OrionHeroDetails_Skins_SetHero) == 0x000008, "Wrong size on OrionHeroDetails_Skins_SetHero");
static_assert(offsetof(OrionHeroDetails_Skins_SetHero, HeroItem) == 0x000000, "Member 'OrionHeroDetails_Skins_SetHero::HeroItem' has a wrong offset!");

// Function OrionUI.OrionHeroDetailsRoot.NativeSetHero
// 0x0008 (0x0008 - 0x0000)
struct OrionHeroDetailsRoot_NativeSetHero final
{
public:
	const class UOrionHeroData*                   NewHero;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroDetailsRoot_NativeSetHero) == 0x000008, "Wrong alignment on OrionHeroDetailsRoot_NativeSetHero");
static_assert(sizeof(OrionHeroDetailsRoot_NativeSetHero) == 0x000008, "Wrong size on OrionHeroDetailsRoot_NativeSetHero");
static_assert(offsetof(OrionHeroDetailsRoot_NativeSetHero, NewHero) == 0x000000, "Member 'OrionHeroDetailsRoot_NativeSetHero::NewHero' has a wrong offset!");

// Function OrionUI.OrionHeroListItem.OnHeroDataSet
// 0x0002 (0x0002 - 0x0000)
struct OrionHeroListItem_OnHeroDataSet final
{
public:
	EOrionHeroRankTier                            RankTier;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecommended;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroListItem_OnHeroDataSet) == 0x000001, "Wrong alignment on OrionHeroListItem_OnHeroDataSet");
static_assert(sizeof(OrionHeroListItem_OnHeroDataSet) == 0x000002, "Wrong size on OrionHeroListItem_OnHeroDataSet");
static_assert(offsetof(OrionHeroListItem_OnHeroDataSet, RankTier) == 0x000000, "Member 'OrionHeroListItem_OnHeroDataSet::RankTier' has a wrong offset!");
static_assert(offsetof(OrionHeroListItem_OnHeroDataSet, bRecommended) == 0x000001, "Member 'OrionHeroListItem_OnHeroDataSet::bRecommended' has a wrong offset!");

// Function OrionUI.OrionReplayWidget.OnDetailStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionReplayWidget_OnDetailStateChanged final
{
public:
	EReplayDetailsState                           NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReplayWidget_OnDetailStateChanged) == 0x000001, "Wrong alignment on OrionReplayWidget_OnDetailStateChanged");
static_assert(sizeof(OrionReplayWidget_OnDetailStateChanged) == 0x000001, "Wrong size on OrionReplayWidget_OnDetailStateChanged");
static_assert(offsetof(OrionReplayWidget_OnDetailStateChanged, NewState) == 0x000000, "Member 'OrionReplayWidget_OnDetailStateChanged::NewState' has a wrong offset!");

// Function OrionUI.OrionReplayWidget.SetReplayStream
// 0x0008 (0x0008 - 0x0000)
struct OrionReplayWidget_SetReplayStream final
{
public:
	class UOrionReplayStreamInfo*                 InStream;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReplayWidget_SetReplayStream) == 0x000008, "Wrong alignment on OrionReplayWidget_SetReplayStream");
static_assert(sizeof(OrionReplayWidget_SetReplayStream) == 0x000008, "Wrong size on OrionReplayWidget_SetReplayStream");
static_assert(offsetof(OrionReplayWidget_SetReplayStream, InStream) == 0x000000, "Member 'OrionReplayWidget_SetReplayStream::InStream' has a wrong offset!");

// Function OrionUI.OrionReplayWidget.SetShowSpoilers
// 0x0001 (0x0001 - 0x0000)
struct OrionReplayWidget_SetShowSpoilers final
{
public:
	bool                                          InShowSpoilers;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReplayWidget_SetShowSpoilers) == 0x000001, "Wrong alignment on OrionReplayWidget_SetShowSpoilers");
static_assert(sizeof(OrionReplayWidget_SetShowSpoilers) == 0x000001, "Wrong size on OrionReplayWidget_SetShowSpoilers");
static_assert(offsetof(OrionReplayWidget_SetShowSpoilers, InShowSpoilers) == 0x000000, "Member 'OrionReplayWidget_SetShowSpoilers::InShowSpoilers' has a wrong offset!");

// Function OrionUI.OrionReplayWidget.GetHeroData
// 0x0010 (0x0010 - 0x0000)
struct OrionReplayWidget_GetHeroData final
{
public:
	EOrionTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionHeroData*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReplayWidget_GetHeroData) == 0x000008, "Wrong alignment on OrionReplayWidget_GetHeroData");
static_assert(sizeof(OrionReplayWidget_GetHeroData) == 0x000010, "Wrong size on OrionReplayWidget_GetHeroData");
static_assert(offsetof(OrionReplayWidget_GetHeroData, Team) == 0x000000, "Member 'OrionReplayWidget_GetHeroData::Team' has a wrong offset!");
static_assert(offsetof(OrionReplayWidget_GetHeroData, SlotIndex) == 0x000004, "Member 'OrionReplayWidget_GetHeroData::SlotIndex' has a wrong offset!");
static_assert(offsetof(OrionReplayWidget_GetHeroData, ReturnValue) == 0x000008, "Member 'OrionReplayWidget_GetHeroData::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionReplayWidget.GetKDA
// 0x0020 (0x0020 - 0x0000)
struct OrionReplayWidget_GetKDA final
{
public:
	EOrionTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReplayWidget_GetKDA) == 0x000008, "Wrong alignment on OrionReplayWidget_GetKDA");
static_assert(sizeof(OrionReplayWidget_GetKDA) == 0x000020, "Wrong size on OrionReplayWidget_GetKDA");
static_assert(offsetof(OrionReplayWidget_GetKDA, Team) == 0x000000, "Member 'OrionReplayWidget_GetKDA::Team' has a wrong offset!");
static_assert(offsetof(OrionReplayWidget_GetKDA, SlotIndex) == 0x000004, "Member 'OrionReplayWidget_GetKDA::SlotIndex' has a wrong offset!");
static_assert(offsetof(OrionReplayWidget_GetKDA, ReturnValue) == 0x000008, "Member 'OrionReplayWidget_GetKDA::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionReplayWidget.GetName
// 0x0010 (0x0010 - 0x0000)
struct OrionReplayWidget_GetName final
{
public:
	class FString                                 ResultString;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReplayWidget_GetName) == 0x000008, "Wrong alignment on OrionReplayWidget_GetName");
static_assert(sizeof(OrionReplayWidget_GetName) == 0x000010, "Wrong size on OrionReplayWidget_GetName");
static_assert(offsetof(OrionReplayWidget_GetName, ResultString) == 0x000000, "Member 'OrionReplayWidget_GetName::ResultString' has a wrong offset!");

// Function OrionUI.OrionReplayWidget.GetPlayerName
// 0x0020 (0x0020 - 0x0000)
struct OrionReplayWidget_GetPlayerName final
{
public:
	EOrionTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReplayWidget_GetPlayerName) == 0x000008, "Wrong alignment on OrionReplayWidget_GetPlayerName");
static_assert(sizeof(OrionReplayWidget_GetPlayerName) == 0x000020, "Wrong size on OrionReplayWidget_GetPlayerName");
static_assert(offsetof(OrionReplayWidget_GetPlayerName, Team) == 0x000000, "Member 'OrionReplayWidget_GetPlayerName::Team' has a wrong offset!");
static_assert(offsetof(OrionReplayWidget_GetPlayerName, SlotIndex) == 0x000004, "Member 'OrionReplayWidget_GetPlayerName::SlotIndex' has a wrong offset!");
static_assert(offsetof(OrionReplayWidget_GetPlayerName, ReturnValue) == 0x000008, "Member 'OrionReplayWidget_GetPlayerName::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionHeroListItem_Matchmaking.OnPositionPreferenceChanged
// 0x0002 (0x0002 - 0x0000)
struct OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged final
{
public:
	bool                                          bHasPreference;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreferred;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged) == 0x000001, "Wrong alignment on OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged");
static_assert(sizeof(OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged) == 0x000002, "Wrong size on OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged");
static_assert(offsetof(OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged, bHasPreference) == 0x000000, "Member 'OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged::bHasPreference' has a wrong offset!");
static_assert(offsetof(OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged, bIsPreferred) == 0x000001, "Member 'OrionHeroListItem_Matchmaking_OnPositionPreferenceChanged::bIsPreferred' has a wrong offset!");

// Function OrionUI.OrionHeroStatBar.OnStatEmphasized
// 0x0001 (0x0001 - 0x0000)
struct OrionHeroStatBar_OnStatEmphasized final
{
public:
	bool                                          bEmphasize;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroStatBar_OnStatEmphasized) == 0x000001, "Wrong alignment on OrionHeroStatBar_OnStatEmphasized");
static_assert(sizeof(OrionHeroStatBar_OnStatEmphasized) == 0x000001, "Wrong size on OrionHeroStatBar_OnStatEmphasized");
static_assert(offsetof(OrionHeroStatBar_OnStatEmphasized, bEmphasize) == 0x000000, "Member 'OrionHeroStatBar_OnStatEmphasized::bEmphasize' has a wrong offset!");

// Function OrionUI.OrionHeroTooltip.OnHeroDataSet
// 0x0002 (0x0002 - 0x0000)
struct OrionHeroTooltip_OnHeroDataSet final
{
public:
	EOrionHeroRankTier                            RankTier;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionHeroTooltipStatus                       Status;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHeroTooltip_OnHeroDataSet) == 0x000001, "Wrong alignment on OrionHeroTooltip_OnHeroDataSet");
static_assert(sizeof(OrionHeroTooltip_OnHeroDataSet) == 0x000002, "Wrong size on OrionHeroTooltip_OnHeroDataSet");
static_assert(offsetof(OrionHeroTooltip_OnHeroDataSet, RankTier) == 0x000000, "Member 'OrionHeroTooltip_OnHeroDataSet::RankTier' has a wrong offset!");
static_assert(offsetof(OrionHeroTooltip_OnHeroDataSet, Status) == 0x000001, "Member 'OrionHeroTooltip_OnHeroDataSet::Status' has a wrong offset!");

// Function OrionUI.OrionScoreboardItemizationSummary.OnPlayerInfoSet
// 0x0001 (0x0001 - 0x0000)
struct OrionScoreboardItemizationSummary_OnPlayerInfoSet final
{
public:
	bool                                          bIsLocalPlayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreboardItemizationSummary_OnPlayerInfoSet) == 0x000001, "Wrong alignment on OrionScoreboardItemizationSummary_OnPlayerInfoSet");
static_assert(sizeof(OrionScoreboardItemizationSummary_OnPlayerInfoSet) == 0x000001, "Wrong size on OrionScoreboardItemizationSummary_OnPlayerInfoSet");
static_assert(offsetof(OrionScoreboardItemizationSummary_OnPlayerInfoSet, bIsLocalPlayer) == 0x000000, "Member 'OrionScoreboardItemizationSummary_OnPlayerInfoSet::bIsLocalPlayer' has a wrong offset!");

// Function OrionUI.OrionHUDCard.OnCardEquipped
// 0x0001 (0x0001 - 0x0000)
struct OrionHUDCard_OnCardEquipped final
{
public:
	bool                                          bIsActivatable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDCard_OnCardEquipped) == 0x000001, "Wrong alignment on OrionHUDCard_OnCardEquipped");
static_assert(sizeof(OrionHUDCard_OnCardEquipped) == 0x000001, "Wrong size on OrionHUDCard_OnCardEquipped");
static_assert(offsetof(OrionHUDCard_OnCardEquipped, bIsActivatable) == 0x000000, "Member 'OrionHUDCard_OnCardEquipped::bIsActivatable' has a wrong offset!");

// Function OrionUI.OrionHUDCard.OnEffectStackCountChanged
// 0x0004 (0x0004 - 0x0000)
struct OrionHUDCard_OnEffectStackCountChanged final
{
public:
	int32                                         NumStacks;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDCard_OnEffectStackCountChanged) == 0x000004, "Wrong alignment on OrionHUDCard_OnEffectStackCountChanged");
static_assert(sizeof(OrionHUDCard_OnEffectStackCountChanged) == 0x000004, "Wrong size on OrionHUDCard_OnEffectStackCountChanged");
static_assert(offsetof(OrionHUDCard_OnEffectStackCountChanged, NumStacks) == 0x000000, "Member 'OrionHUDCard_OnEffectStackCountChanged::NumStacks' has a wrong offset!");

// Function OrionUI.OrionRewardProgressBar.OnBarFilled
// 0x0001 (0x0001 - 0x0000)
struct OrionRewardProgressBar_OnBarFilled final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardProgressBar_OnBarFilled) == 0x000001, "Wrong alignment on OrionRewardProgressBar_OnBarFilled");
static_assert(sizeof(OrionRewardProgressBar_OnBarFilled) == 0x000001, "Wrong size on OrionRewardProgressBar_OnBarFilled");
static_assert(offsetof(OrionRewardProgressBar_OnBarFilled, bImmediate) == 0x000000, "Member 'OrionRewardProgressBar_OnBarFilled::bImmediate' has a wrong offset!");

// Function OrionUI.OrionRewardProgressBar.OnFanfaresCompleted
// 0x0002 (0x0002 - 0x0000)
struct OrionRewardProgressBar_OnFanfaresCompleted final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasProgressReset;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardProgressBar_OnFanfaresCompleted) == 0x000001, "Wrong alignment on OrionRewardProgressBar_OnFanfaresCompleted");
static_assert(sizeof(OrionRewardProgressBar_OnFanfaresCompleted) == 0x000002, "Wrong size on OrionRewardProgressBar_OnFanfaresCompleted");
static_assert(offsetof(OrionRewardProgressBar_OnFanfaresCompleted, bImmediate) == 0x000000, "Member 'OrionRewardProgressBar_OnFanfaresCompleted::bImmediate' has a wrong offset!");
static_assert(offsetof(OrionRewardProgressBar_OnFanfaresCompleted, bWasProgressReset) == 0x000001, "Member 'OrionRewardProgressBar_OnFanfaresCompleted::bWasProgressReset' has a wrong offset!");

// Function OrionUI.OrionRewardProgressBar.SetProgressBarColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct OrionRewardProgressBar_SetProgressBarColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardProgressBar_SetProgressBarColorAndOpacity) == 0x000004, "Wrong alignment on OrionRewardProgressBar_SetProgressBarColorAndOpacity");
static_assert(sizeof(OrionRewardProgressBar_SetProgressBarColorAndOpacity) == 0x000010, "Wrong size on OrionRewardProgressBar_SetProgressBarColorAndOpacity");
static_assert(offsetof(OrionRewardProgressBar_SetProgressBarColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'OrionRewardProgressBar_SetProgressBarColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function OrionUI.OrionHUDGold.HandleCardXPUpdate
// 0x0008 (0x0008 - 0x0000)
struct OrionHUDGold_HandleCardXPUpdate final
{
public:
	float                                         NewGold;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGold;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDGold_HandleCardXPUpdate) == 0x000004, "Wrong alignment on OrionHUDGold_HandleCardXPUpdate");
static_assert(sizeof(OrionHUDGold_HandleCardXPUpdate) == 0x000008, "Wrong size on OrionHUDGold_HandleCardXPUpdate");
static_assert(offsetof(OrionHUDGold_HandleCardXPUpdate, NewGold) == 0x000000, "Member 'OrionHUDGold_HandleCardXPUpdate::NewGold' has a wrong offset!");
static_assert(offsetof(OrionHUDGold_HandleCardXPUpdate, MaxGold) == 0x000004, "Member 'OrionHUDGold_HandleCardXPUpdate::MaxGold' has a wrong offset!");

// Function OrionUI.OrionHUDGold.HandleDamageUpdate
// 0x0030 (0x0030 - 0x0000)
struct OrionHUDGold_HandleDamageUpdate final
{
public:
	struct FOrionUIDamageEventInfo                UIDamageEventInfo;                                 // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDGold_HandleDamageUpdate) == 0x000008, "Wrong alignment on OrionHUDGold_HandleDamageUpdate");
static_assert(sizeof(OrionHUDGold_HandleDamageUpdate) == 0x000030, "Wrong size on OrionHUDGold_HandleDamageUpdate");
static_assert(offsetof(OrionHUDGold_HandleDamageUpdate, UIDamageEventInfo) == 0x000000, "Member 'OrionHUDGold_HandleDamageUpdate::UIDamageEventInfo' has a wrong offset!");

// Function OrionUI.OrionHUDGold.InitInHUD
// 0x0008 (0x0008 - 0x0000)
struct OrionHUDGold_InitInHUD final
{
public:
	class UOrionBaseHUDWidget*                    InHUDWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDGold_InitInHUD) == 0x000008, "Wrong alignment on OrionHUDGold_InitInHUD");
static_assert(sizeof(OrionHUDGold_InitInHUD) == 0x000008, "Wrong size on OrionHUDGold_InitInHUD");
static_assert(offsetof(OrionHUDGold_InitInHUD, InHUDWidget) == 0x000000, "Member 'OrionHUDGold_InitInHUD::InHUDWidget' has a wrong offset!");

// Function OrionUI.OrionHUDGold.OnGoldReceived
// 0x0004 (0x0004 - 0x0000)
struct OrionHUDGold_OnGoldReceived final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDGold_OnGoldReceived) == 0x000004, "Wrong alignment on OrionHUDGold_OnGoldReceived");
static_assert(sizeof(OrionHUDGold_OnGoldReceived) == 0x000004, "Wrong size on OrionHUDGold_OnGoldReceived");
static_assert(offsetof(OrionHUDGold_OnGoldReceived, Amount) == 0x000000, "Member 'OrionHUDGold_OnGoldReceived::Amount' has a wrong offset!");

// Function OrionUI.OrionHUDRespawnTimer.SetTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct OrionHUDRespawnTimer_SetTextVisibility final
{
public:
	ESlateVisibility                              TextVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDRespawnTimer_SetTextVisibility) == 0x000001, "Wrong alignment on OrionHUDRespawnTimer_SetTextVisibility");
static_assert(sizeof(OrionHUDRespawnTimer_SetTextVisibility) == 0x000001, "Wrong size on OrionHUDRespawnTimer_SetTextVisibility");
static_assert(offsetof(OrionHUDRespawnTimer_SetTextVisibility, TextVisibility) == 0x000000, "Member 'OrionHUDRespawnTimer_SetTextVisibility::TextVisibility' has a wrong offset!");

// Function OrionUI.OrionHUDWidget.OnFadeHUDIn_BlueprintEvent
// 0x0001 (0x0001 - 0x0000)
struct OrionHUDWidget_OnFadeHUDIn_BlueprintEvent final
{
public:
	bool                                          bFadeFast;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDWidget_OnFadeHUDIn_BlueprintEvent) == 0x000001, "Wrong alignment on OrionHUDWidget_OnFadeHUDIn_BlueprintEvent");
static_assert(sizeof(OrionHUDWidget_OnFadeHUDIn_BlueprintEvent) == 0x000001, "Wrong size on OrionHUDWidget_OnFadeHUDIn_BlueprintEvent");
static_assert(offsetof(OrionHUDWidget_OnFadeHUDIn_BlueprintEvent, bFadeFast) == 0x000000, "Member 'OrionHUDWidget_OnFadeHUDIn_BlueprintEvent::bFadeFast' has a wrong offset!");

// Function OrionUI.OrionHUDWidget.OnFadeHUDOut_BlueprintEvent
// 0x0001 (0x0001 - 0x0000)
struct OrionHUDWidget_OnFadeHUDOut_BlueprintEvent final
{
public:
	bool                                          bFadeFast;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDWidget_OnFadeHUDOut_BlueprintEvent) == 0x000001, "Wrong alignment on OrionHUDWidget_OnFadeHUDOut_BlueprintEvent");
static_assert(sizeof(OrionHUDWidget_OnFadeHUDOut_BlueprintEvent) == 0x000001, "Wrong size on OrionHUDWidget_OnFadeHUDOut_BlueprintEvent");
static_assert(offsetof(OrionHUDWidget_OnFadeHUDOut_BlueprintEvent, bFadeFast) == 0x000000, "Member 'OrionHUDWidget_OnFadeHUDOut_BlueprintEvent::bFadeFast' has a wrong offset!");

// Function OrionUI.OrionHUDWidget.OnHideKillCam_BlueprintEvent
// 0x0001 (0x0001 - 0x0000)
struct OrionHUDWidget_OnHideKillCam_BlueprintEvent final
{
public:
	EOrionHUDShowKillCamMode                      Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDWidget_OnHideKillCam_BlueprintEvent) == 0x000001, "Wrong alignment on OrionHUDWidget_OnHideKillCam_BlueprintEvent");
static_assert(sizeof(OrionHUDWidget_OnHideKillCam_BlueprintEvent) == 0x000001, "Wrong size on OrionHUDWidget_OnHideKillCam_BlueprintEvent");
static_assert(offsetof(OrionHUDWidget_OnHideKillCam_BlueprintEvent, Mode) == 0x000000, "Member 'OrionHUDWidget_OnHideKillCam_BlueprintEvent::Mode' has a wrong offset!");

// Function OrionUI.OrionHUDWidget.OnShowKillCam_BlueprintEvent
// 0x0001 (0x0001 - 0x0000)
struct OrionHUDWidget_OnShowKillCam_BlueprintEvent final
{
public:
	EOrionHUDShowKillCamMode                      Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDWidget_OnShowKillCam_BlueprintEvent) == 0x000001, "Wrong alignment on OrionHUDWidget_OnShowKillCam_BlueprintEvent");
static_assert(sizeof(OrionHUDWidget_OnShowKillCam_BlueprintEvent) == 0x000001, "Wrong size on OrionHUDWidget_OnShowKillCam_BlueprintEvent");
static_assert(offsetof(OrionHUDWidget_OnShowKillCam_BlueprintEvent, Mode) == 0x000000, "Member 'OrionHUDWidget_OnShowKillCam_BlueprintEvent::Mode' has a wrong offset!");

// Function OrionUI.OrionHUDWidget.SetHUDWidget
// 0x0010 (0x0010 - 0x0000)
struct OrionHUDWidget_SetHUDWidget final
{
public:
	EOrionHUDWidgetType                           WidgetType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDWidget_SetHUDWidget) == 0x000008, "Wrong alignment on OrionHUDWidget_SetHUDWidget");
static_assert(sizeof(OrionHUDWidget_SetHUDWidget) == 0x000010, "Wrong size on OrionHUDWidget_SetHUDWidget");
static_assert(offsetof(OrionHUDWidget_SetHUDWidget, WidgetType) == 0x000000, "Member 'OrionHUDWidget_SetHUDWidget::WidgetType' has a wrong offset!");
static_assert(offsetof(OrionHUDWidget_SetHUDWidget, Widget) == 0x000008, "Member 'OrionHUDWidget_SetHUDWidget::Widget' has a wrong offset!");

// Function OrionUI.OrionHUDWidget.SetWidgetVisibilityDuringDeath
// 0x0001 (0x0001 - 0x0000)
struct OrionHUDWidget_SetWidgetVisibilityDuringDeath final
{
public:
	bool                                          bIsPlayerDead;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionHUDWidget_SetWidgetVisibilityDuringDeath) == 0x000001, "Wrong alignment on OrionHUDWidget_SetWidgetVisibilityDuringDeath");
static_assert(sizeof(OrionHUDWidget_SetWidgetVisibilityDuringDeath) == 0x000001, "Wrong size on OrionHUDWidget_SetWidgetVisibilityDuringDeath");
static_assert(offsetof(OrionHUDWidget_SetWidgetVisibilityDuringDeath, bIsPlayerDead) == 0x000000, "Member 'OrionHUDWidget_SetWidgetVisibilityDuringDeath::bIsPlayerDead' has a wrong offset!");

// Function OrionUI.OrionRoundGemGrid.OnGemRecount
// 0x0010 (0x0010 - 0x0000)
struct OrionRoundGemGrid_OnGemRecount final
{
public:
	TArray<class UOrionMcpGemItem*>               CurrentGems;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRoundGemGrid_OnGemRecount) == 0x000008, "Wrong alignment on OrionRoundGemGrid_OnGemRecount");
static_assert(sizeof(OrionRoundGemGrid_OnGemRecount) == 0x000010, "Wrong size on OrionRoundGemGrid_OnGemRecount");
static_assert(offsetof(OrionRoundGemGrid_OnGemRecount, CurrentGems) == 0x000000, "Member 'OrionRoundGemGrid_OnGemRecount::CurrentGems' has a wrong offset!");

// Function OrionUI.OrionInfoPanelAbilityRow.InitializeActiveState
// 0x0001 (0x0001 - 0x0000)
struct OrionInfoPanelAbilityRow_InitializeActiveState final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionInfoPanelAbilityRow_InitializeActiveState) == 0x000001, "Wrong alignment on OrionInfoPanelAbilityRow_InitializeActiveState");
static_assert(sizeof(OrionInfoPanelAbilityRow_InitializeActiveState) == 0x000001, "Wrong size on OrionInfoPanelAbilityRow_InitializeActiveState");
static_assert(offsetof(OrionInfoPanelAbilityRow_InitializeActiveState, bIsActive) == 0x000000, "Member 'OrionInfoPanelAbilityRow_InitializeActiveState::bIsActive' has a wrong offset!");

// Function OrionUI.OrionInfoPanelAbilityRow.OnInitializedFromGem
// 0x0010 (0x0010 - 0x0000)
struct OrionInfoPanelAbilityRow_OnInitializedFromGem final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionInfoPanelAbilityRow_OnInitializedFromGem) == 0x000004, "Wrong alignment on OrionInfoPanelAbilityRow_OnInitializedFromGem");
static_assert(sizeof(OrionInfoPanelAbilityRow_OnInitializedFromGem) == 0x000010, "Wrong size on OrionInfoPanelAbilityRow_OnInitializedFromGem");
static_assert(offsetof(OrionInfoPanelAbilityRow_OnInitializedFromGem, Color) == 0x000000, "Member 'OrionInfoPanelAbilityRow_OnInitializedFromGem::Color' has a wrong offset!");

// Function OrionUI.OrionInfoPanelStatRow.OnMenuOpenStateChange
// 0x0002 (0x0002 - 0x0000)
struct OrionInfoPanelStatRow_OnMenuOpenStateChange final
{
public:
	EOrionMenuSlotTypes                           MenuSlot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewIsOpenState;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionInfoPanelStatRow_OnMenuOpenStateChange) == 0x000001, "Wrong alignment on OrionInfoPanelStatRow_OnMenuOpenStateChange");
static_assert(sizeof(OrionInfoPanelStatRow_OnMenuOpenStateChange) == 0x000002, "Wrong size on OrionInfoPanelStatRow_OnMenuOpenStateChange");
static_assert(offsetof(OrionInfoPanelStatRow_OnMenuOpenStateChange, MenuSlot) == 0x000000, "Member 'OrionInfoPanelStatRow_OnMenuOpenStateChange::MenuSlot' has a wrong offset!");
static_assert(offsetof(OrionInfoPanelStatRow_OnMenuOpenStateChange, bNewIsOpenState) == 0x000001, "Member 'OrionInfoPanelStatRow_OnMenuOpenStateChange::bNewIsOpenState' has a wrong offset!");

// Function OrionUI.OrionItemizedCounter.OnShowBonusAmount
// 0x0004 (0x0004 - 0x0000)
struct OrionItemizedCounter_OnShowBonusAmount final
{
public:
	int32                                         BonusAmount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionItemizedCounter_OnShowBonusAmount) == 0x000004, "Wrong alignment on OrionItemizedCounter_OnShowBonusAmount");
static_assert(sizeof(OrionItemizedCounter_OnShowBonusAmount) == 0x000004, "Wrong size on OrionItemizedCounter_OnShowBonusAmount");
static_assert(offsetof(OrionItemizedCounter_OnShowBonusAmount, BonusAmount) == 0x000000, "Member 'OrionItemizedCounter_OnShowBonusAmount::BonusAmount' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.HandleBannerSelected
// 0x0008 (0x0008 - 0x0000)
struct OrionStateWidget_DraftLobby_HandleBannerSelected final
{
public:
	class UOrionMcpBannerItem*                    BannerItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_HandleBannerSelected) == 0x000008, "Wrong alignment on OrionStateWidget_DraftLobby_HandleBannerSelected");
static_assert(sizeof(OrionStateWidget_DraftLobby_HandleBannerSelected) == 0x000008, "Wrong size on OrionStateWidget_DraftLobby_HandleBannerSelected");
static_assert(offsetof(OrionStateWidget_DraftLobby_HandleBannerSelected, BannerItem) == 0x000000, "Member 'OrionStateWidget_DraftLobby_HandleBannerSelected::BannerItem' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.HandleCustomizeClicked
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_HandleCustomizeClicked final
{
public:
	bool                                          bIsCustomizing;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_HandleCustomizeClicked) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_HandleCustomizeClicked");
static_assert(sizeof(OrionStateWidget_DraftLobby_HandleCustomizeClicked) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_HandleCustomizeClicked");
static_assert(offsetof(OrionStateWidget_DraftLobby_HandleCustomizeClicked, bIsCustomizing) == 0x000000, "Member 'OrionStateWidget_DraftLobby_HandleCustomizeClicked::bIsCustomizing' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.HandleHeroSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionStateWidget_DraftLobby_HandleHeroSelected final
{
public:
	class UObject*                                SelectedHero;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionStateWidget_DraftLobby_HandleHeroSelected) == 0x000008, "Wrong alignment on OrionStateWidget_DraftLobby_HandleHeroSelected");
static_assert(sizeof(OrionStateWidget_DraftLobby_HandleHeroSelected) == 0x000010, "Wrong size on OrionStateWidget_DraftLobby_HandleHeroSelected");
static_assert(offsetof(OrionStateWidget_DraftLobby_HandleHeroSelected, SelectedHero) == 0x000000, "Member 'OrionStateWidget_DraftLobby_HandleHeroSelected::SelectedHero' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_DraftLobby_HandleHeroSelected, bSelected) == 0x000008, "Member 'OrionStateWidget_DraftLobby_HandleHeroSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.HandlePositionSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionStateWidget_DraftLobby_HandlePositionSelected final
{
public:
	class UOrionBaseButton*                       Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionStateWidget_DraftLobby_HandlePositionSelected) == 0x000008, "Wrong alignment on OrionStateWidget_DraftLobby_HandlePositionSelected");
static_assert(sizeof(OrionStateWidget_DraftLobby_HandlePositionSelected) == 0x000010, "Wrong size on OrionStateWidget_DraftLobby_HandlePositionSelected");
static_assert(offsetof(OrionStateWidget_DraftLobby_HandlePositionSelected, Button) == 0x000000, "Member 'OrionStateWidget_DraftLobby_HandlePositionSelected::Button' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_DraftLobby_HandlePositionSelected, Index_0) == 0x000008, "Member 'OrionStateWidget_DraftLobby_HandlePositionSelected::Index_0' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnDraftComplete
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_OnDraftComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnDraftComplete) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_OnDraftComplete");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnDraftComplete) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_OnDraftComplete");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnDraftComplete, bSuccess) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnDraftComplete::bSuccess' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnDraftStarted
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_OnDraftStarted final
{
public:
	EOrionTeamMemberType                          FirstPickerType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnDraftStarted) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_OnDraftStarted");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnDraftStarted) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_OnDraftStarted");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnDraftStarted, FirstPickerType) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnDraftStarted::FirstPickerType' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnHeroLockedIn
// 0x0008 (0x0008 - 0x0000)
struct OrionStateWidget_DraftLobby_OnHeroLockedIn final
{
public:
	class UOrionHeroData*                         HeroData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnHeroLockedIn) == 0x000008, "Wrong alignment on OrionStateWidget_DraftLobby_OnHeroLockedIn");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnHeroLockedIn) == 0x000008, "Wrong size on OrionStateWidget_DraftLobby_OnHeroLockedIn");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnHeroLockedIn, HeroData) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnHeroLockedIn::HeroData' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnLockInButtonEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_OnLockInButtonEnabledChanged final
{
public:
	bool                                          bLockInEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnLockInButtonEnabledChanged) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_OnLockInButtonEnabledChanged");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnLockInButtonEnabledChanged) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_OnLockInButtonEnabledChanged");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnLockInButtonEnabledChanged, bLockInEnabled) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnLockInButtonEnabledChanged::bLockInEnabled' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnPositionSelected
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_OnPositionSelected final
{
public:
	bool                                          bIsFirstSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnPositionSelected) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_OnPositionSelected");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnPositionSelected) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_OnPositionSelected");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnPositionSelected, bIsFirstSelection) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnPositionSelected::bIsFirstSelection' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnTeamSet
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_OnTeamSet final
{
public:
	EOrionTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnTeamSet) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_OnTeamSet");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnTeamSet) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_OnTeamSet");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnTeamSet, Team) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnTeamSet::Team' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnTurnComplete
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_OnTurnComplete final
{
public:
	EOrionTeamMemberType                          FinishedMemberType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnTurnComplete) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_OnTurnComplete");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnTurnComplete) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_OnTurnComplete");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnTurnComplete, FinishedMemberType) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnTurnComplete::FinishedMemberType' has a wrong offset!");

// Function OrionUI.OrionStateWidget_DraftLobby.OnTurnStarted
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_DraftLobby_OnTurnStarted final
{
public:
	EOrionTeamMemberType                          PickingMemberType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_DraftLobby_OnTurnStarted) == 0x000001, "Wrong alignment on OrionStateWidget_DraftLobby_OnTurnStarted");
static_assert(sizeof(OrionStateWidget_DraftLobby_OnTurnStarted) == 0x000001, "Wrong size on OrionStateWidget_DraftLobby_OnTurnStarted");
static_assert(offsetof(OrionStateWidget_DraftLobby_OnTurnStarted, PickingMemberType) == 0x000000, "Member 'OrionStateWidget_DraftLobby_OnTurnStarted::PickingMemberType' has a wrong offset!");

// Function OrionUI.OrionItemPackOpeningScreen.OnPackOpened
// 0x0010 (0x0010 - 0x0000)
struct OrionItemPackOpeningScreen_OnPackOpened final
{
public:
	EOrionItemRarity                              Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UOrionMcpCardPackItemDefinition*  PackTypeOpened;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionItemPackOpeningScreen_OnPackOpened) == 0x000008, "Wrong alignment on OrionItemPackOpeningScreen_OnPackOpened");
static_assert(sizeof(OrionItemPackOpeningScreen_OnPackOpened) == 0x000010, "Wrong size on OrionItemPackOpeningScreen_OnPackOpened");
static_assert(offsetof(OrionItemPackOpeningScreen_OnPackOpened, Rarity) == 0x000000, "Member 'OrionItemPackOpeningScreen_OnPackOpened::Rarity' has a wrong offset!");
static_assert(offsetof(OrionItemPackOpeningScreen_OnPackOpened, PackTypeOpened) == 0x000008, "Member 'OrionItemPackOpeningScreen_OnPackOpened::PackTypeOpened' has a wrong offset!");

// Function OrionUI.OrionItemPackOpeningScreen.SetPackToOpen
// 0x0008 (0x0008 - 0x0000)
struct OrionItemPackOpeningScreen_SetPackToOpen final
{
public:
	class UOrionMcpCardPackItem*                  PackItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionItemPackOpeningScreen_SetPackToOpen) == 0x000008, "Wrong alignment on OrionItemPackOpeningScreen_SetPackToOpen");
static_assert(sizeof(OrionItemPackOpeningScreen_SetPackToOpen) == 0x000008, "Wrong size on OrionItemPackOpeningScreen_SetPackToOpen");
static_assert(offsetof(OrionItemPackOpeningScreen_SetPackToOpen, PackItem) == 0x000000, "Member 'OrionItemPackOpeningScreen_SetPackToOpen::PackItem' has a wrong offset!");

// Function OrionUI.OrionItemPackOpeningScreen.GetNumAvailableActivePacks
// 0x0004 (0x0004 - 0x0000)
struct OrionItemPackOpeningScreen_GetNumAvailableActivePacks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionItemPackOpeningScreen_GetNumAvailableActivePacks) == 0x000004, "Wrong alignment on OrionItemPackOpeningScreen_GetNumAvailableActivePacks");
static_assert(sizeof(OrionItemPackOpeningScreen_GetNumAvailableActivePacks) == 0x000004, "Wrong size on OrionItemPackOpeningScreen_GetNumAvailableActivePacks");
static_assert(offsetof(OrionItemPackOpeningScreen_GetNumAvailableActivePacks, ReturnValue) == 0x000000, "Member 'OrionItemPackOpeningScreen_GetNumAvailableActivePacks::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionStoreScreen.NavigateToStoreItem
// 0x0010 (0x0010 - 0x0000)
struct OrionStoreScreen_NavigateToStoreItem final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStoreScreen_NavigateToStoreItem) == 0x000008, "Wrong alignment on OrionStoreScreen_NavigateToStoreItem");
static_assert(sizeof(OrionStoreScreen_NavigateToStoreItem) == 0x000010, "Wrong size on OrionStoreScreen_NavigateToStoreItem");
static_assert(offsetof(OrionStoreScreen_NavigateToStoreItem, OfferId) == 0x000000, "Member 'OrionStoreScreen_NavigateToStoreItem::OfferId' has a wrong offset!");

// Function OrionUI.OrionStoreScreen.OnTabChanged
// 0x0008 (0x0008 - 0x0000)
struct OrionStoreScreen_OnTabChanged final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStoreScreen_OnTabChanged) == 0x000004, "Wrong alignment on OrionStoreScreen_OnTabChanged");
static_assert(sizeof(OrionStoreScreen_OnTabChanged) == 0x000008, "Wrong size on OrionStoreScreen_OnTabChanged");
static_assert(offsetof(OrionStoreScreen_OnTabChanged, TabId) == 0x000000, "Member 'OrionStoreScreen_OnTabChanged::TabId' has a wrong offset!");

// Function OrionUI.OrionJungleBuffWidgetContainer.OnBuffAdded
// 0x01C0 (0x01C0 - 0x0000)
struct OrionJungleBuffWidgetContainer_OnBuffAdded final
{
public:
	struct FOrionJungleBuffInfo                   BuffInfo;                                          // 0x0000(0x01C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionJungleBuffWidgetContainer_OnBuffAdded) == 0x000010, "Wrong alignment on OrionJungleBuffWidgetContainer_OnBuffAdded");
static_assert(sizeof(OrionJungleBuffWidgetContainer_OnBuffAdded) == 0x0001C0, "Wrong size on OrionJungleBuffWidgetContainer_OnBuffAdded");
static_assert(offsetof(OrionJungleBuffWidgetContainer_OnBuffAdded, BuffInfo) == 0x000000, "Member 'OrionJungleBuffWidgetContainer_OnBuffAdded::BuffInfo' has a wrong offset!");

// Function OrionUI.OrionJungleBuffWidgetContainer.OnBuffRemoved
// 0x01C0 (0x01C0 - 0x0000)
struct OrionJungleBuffWidgetContainer_OnBuffRemoved final
{
public:
	struct FOrionJungleBuffInfo                   BuffInfo;                                          // 0x0000(0x01C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionJungleBuffWidgetContainer_OnBuffRemoved) == 0x000010, "Wrong alignment on OrionJungleBuffWidgetContainer_OnBuffRemoved");
static_assert(sizeof(OrionJungleBuffWidgetContainer_OnBuffRemoved) == 0x0001C0, "Wrong size on OrionJungleBuffWidgetContainer_OnBuffRemoved");
static_assert(offsetof(OrionJungleBuffWidgetContainer_OnBuffRemoved, BuffInfo) == 0x000000, "Member 'OrionJungleBuffWidgetContainer_OnBuffRemoved::BuffInfo' has a wrong offset!");

// Function OrionUI.OrionJungleBuffWidgetContainer.OnBuffUpdated
// 0x01C0 (0x01C0 - 0x0000)
struct OrionJungleBuffWidgetContainer_OnBuffUpdated final
{
public:
	struct FOrionJungleBuffInfo                   BuffInfo;                                          // 0x0000(0x01C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionJungleBuffWidgetContainer_OnBuffUpdated) == 0x000010, "Wrong alignment on OrionJungleBuffWidgetContainer_OnBuffUpdated");
static_assert(sizeof(OrionJungleBuffWidgetContainer_OnBuffUpdated) == 0x0001C0, "Wrong size on OrionJungleBuffWidgetContainer_OnBuffUpdated");
static_assert(offsetof(OrionJungleBuffWidgetContainer_OnBuffUpdated, BuffInfo) == 0x000000, "Member 'OrionJungleBuffWidgetContainer_OnBuffUpdated::BuffInfo' has a wrong offset!");

// Function OrionUI.OrionKDAWidget.OnKDAUpdate
// 0x0010 (0x0010 - 0x0000)
struct OrionKDAWidget_OnKDAUpdate final
{
public:
	int32                                         Kills;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deaths;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assists;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minions;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionKDAWidget_OnKDAUpdate) == 0x000004, "Wrong alignment on OrionKDAWidget_OnKDAUpdate");
static_assert(sizeof(OrionKDAWidget_OnKDAUpdate) == 0x000010, "Wrong size on OrionKDAWidget_OnKDAUpdate");
static_assert(offsetof(OrionKDAWidget_OnKDAUpdate, Kills) == 0x000000, "Member 'OrionKDAWidget_OnKDAUpdate::Kills' has a wrong offset!");
static_assert(offsetof(OrionKDAWidget_OnKDAUpdate, Deaths) == 0x000004, "Member 'OrionKDAWidget_OnKDAUpdate::Deaths' has a wrong offset!");
static_assert(offsetof(OrionKDAWidget_OnKDAUpdate, Assists) == 0x000008, "Member 'OrionKDAWidget_OnKDAUpdate::Assists' has a wrong offset!");
static_assert(offsetof(OrionKDAWidget_OnKDAUpdate, Minions) == 0x00000C, "Member 'OrionKDAWidget_OnKDAUpdate::Minions' has a wrong offset!");

// Function OrionUI.OrionPlayerFeedbackMessageArea.OnShowDetailedMessage
// 0x0020 (0x0020 - 0x0000)
struct OrionPlayerFeedbackMessageArea_OnShowDetailedMessage final
{
public:
	class FText                                   BuffMessage;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCanAutoFade;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionPlayerFeedbackMessageArea_OnShowDetailedMessage) == 0x000008, "Wrong alignment on OrionPlayerFeedbackMessageArea_OnShowDetailedMessage");
static_assert(sizeof(OrionPlayerFeedbackMessageArea_OnShowDetailedMessage) == 0x000020, "Wrong size on OrionPlayerFeedbackMessageArea_OnShowDetailedMessage");
static_assert(offsetof(OrionPlayerFeedbackMessageArea_OnShowDetailedMessage, BuffMessage) == 0x000000, "Member 'OrionPlayerFeedbackMessageArea_OnShowDetailedMessage::BuffMessage' has a wrong offset!");
static_assert(offsetof(OrionPlayerFeedbackMessageArea_OnShowDetailedMessage, bCanAutoFade) == 0x000018, "Member 'OrionPlayerFeedbackMessageArea_OnShowDetailedMessage::bCanAutoFade' has a wrong offset!");

// Function OrionUI.OrionKeyboardBinding.HandleOnPrimaryKeySelected
// 0x0020 (0x0020 - 0x0000)
struct OrionKeyboardBinding_HandleOnPrimaryKeySelected final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionKeyboardBinding_HandleOnPrimaryKeySelected) == 0x000008, "Wrong alignment on OrionKeyboardBinding_HandleOnPrimaryKeySelected");
static_assert(sizeof(OrionKeyboardBinding_HandleOnPrimaryKeySelected) == 0x000020, "Wrong size on OrionKeyboardBinding_HandleOnPrimaryKeySelected");
static_assert(offsetof(OrionKeyboardBinding_HandleOnPrimaryKeySelected, SelectedKey) == 0x000000, "Member 'OrionKeyboardBinding_HandleOnPrimaryKeySelected::SelectedKey' has a wrong offset!");

// Function OrionUI.OrionKeyboardBinding.HandleOnSecondaryKeySelected
// 0x0020 (0x0020 - 0x0000)
struct OrionKeyboardBinding_HandleOnSecondaryKeySelected final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionKeyboardBinding_HandleOnSecondaryKeySelected) == 0x000008, "Wrong alignment on OrionKeyboardBinding_HandleOnSecondaryKeySelected");
static_assert(sizeof(OrionKeyboardBinding_HandleOnSecondaryKeySelected) == 0x000020, "Wrong size on OrionKeyboardBinding_HandleOnSecondaryKeySelected");
static_assert(offsetof(OrionKeyboardBinding_HandleOnSecondaryKeySelected, SelectedKey) == 0x000000, "Member 'OrionKeyboardBinding_HandleOnSecondaryKeySelected::SelectedKey' has a wrong offset!");

// Function OrionUI.OrionKillFeedEntryPortrait.OnPortraitSet
// 0x0001 (0x0001 - 0x0000)
struct OrionKillFeedEntryPortrait_OnPortraitSet final
{
public:
	EKillFeedParticipantType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionKillFeedEntryPortrait_OnPortraitSet) == 0x000001, "Wrong alignment on OrionKillFeedEntryPortrait_OnPortraitSet");
static_assert(sizeof(OrionKillFeedEntryPortrait_OnPortraitSet) == 0x000001, "Wrong size on OrionKillFeedEntryPortrait_OnPortraitSet");
static_assert(offsetof(OrionKillFeedEntryPortrait_OnPortraitSet, Type) == 0x000000, "Member 'OrionKillFeedEntryPortrait_OnPortraitSet::Type' has a wrong offset!");

// Function OrionUI.OrionTeamFrame.UpdateBuffCount
// 0x0004 (0x0004 - 0x0000)
struct OrionTeamFrame_UpdateBuffCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFrame_UpdateBuffCount) == 0x000004, "Wrong alignment on OrionTeamFrame_UpdateBuffCount");
static_assert(sizeof(OrionTeamFrame_UpdateBuffCount) == 0x000004, "Wrong size on OrionTeamFrame_UpdateBuffCount");
static_assert(offsetof(OrionTeamFrame_UpdateBuffCount, NewCount) == 0x000000, "Member 'OrionTeamFrame_UpdateBuffCount::NewCount' has a wrong offset!");

// Function OrionUI.OrionLazyImage.SetBrushFromItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct OrionLazyImage_SetBrushFromItemDefinition final
{
public:
	class UOrionMcpItemDefinition*                ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchTextureSize;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionLazyImage_SetBrushFromItemDefinition) == 0x000008, "Wrong alignment on OrionLazyImage_SetBrushFromItemDefinition");
static_assert(sizeof(OrionLazyImage_SetBrushFromItemDefinition) == 0x000010, "Wrong size on OrionLazyImage_SetBrushFromItemDefinition");
static_assert(offsetof(OrionLazyImage_SetBrushFromItemDefinition, ItemDefinition) == 0x000000, "Member 'OrionLazyImage_SetBrushFromItemDefinition::ItemDefinition' has a wrong offset!");
static_assert(offsetof(OrionLazyImage_SetBrushFromItemDefinition, bMatchTextureSize) == 0x000008, "Member 'OrionLazyImage_SetBrushFromItemDefinition::bMatchTextureSize' has a wrong offset!");

// Function OrionUI.OrionLazyImage.SetBrushFromLazyDisplayAsset
// 0x0030 (0x0030 - 0x0000)
struct OrionLazyImage_SetBrushFromLazyDisplayAsset final
{
public:
	TSoftObjectPtr<class UObject>                 LazyObject;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchTextureSize;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionLazyImage_SetBrushFromLazyDisplayAsset) == 0x000008, "Wrong alignment on OrionLazyImage_SetBrushFromLazyDisplayAsset");
static_assert(sizeof(OrionLazyImage_SetBrushFromLazyDisplayAsset) == 0x000030, "Wrong size on OrionLazyImage_SetBrushFromLazyDisplayAsset");
static_assert(offsetof(OrionLazyImage_SetBrushFromLazyDisplayAsset, LazyObject) == 0x000000, "Member 'OrionLazyImage_SetBrushFromLazyDisplayAsset::LazyObject' has a wrong offset!");
static_assert(offsetof(OrionLazyImage_SetBrushFromLazyDisplayAsset, bMatchTextureSize) == 0x000028, "Member 'OrionLazyImage_SetBrushFromLazyDisplayAsset::bMatchTextureSize' has a wrong offset!");

// Function OrionUI.OrionLazyImage.SetBrushFromLazyMaterial
// 0x0028 (0x0028 - 0x0000)
struct OrionLazyImage_SetBrushFromLazyMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      LazyMaterial;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLazyImage_SetBrushFromLazyMaterial) == 0x000008, "Wrong alignment on OrionLazyImage_SetBrushFromLazyMaterial");
static_assert(sizeof(OrionLazyImage_SetBrushFromLazyMaterial) == 0x000028, "Wrong size on OrionLazyImage_SetBrushFromLazyMaterial");
static_assert(offsetof(OrionLazyImage_SetBrushFromLazyMaterial, LazyMaterial) == 0x000000, "Member 'OrionLazyImage_SetBrushFromLazyMaterial::LazyMaterial' has a wrong offset!");

// Function OrionUI.OrionLazyImage.SetBrushFromLazyTexture
// 0x0030 (0x0030 - 0x0000)
struct OrionLazyImage_SetBrushFromLazyTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              LazyTexture;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionLazyImage_SetBrushFromLazyTexture) == 0x000008, "Wrong alignment on OrionLazyImage_SetBrushFromLazyTexture");
static_assert(sizeof(OrionLazyImage_SetBrushFromLazyTexture) == 0x000030, "Wrong size on OrionLazyImage_SetBrushFromLazyTexture");
static_assert(offsetof(OrionLazyImage_SetBrushFromLazyTexture, LazyTexture) == 0x000000, "Member 'OrionLazyImage_SetBrushFromLazyTexture::LazyTexture' has a wrong offset!");
static_assert(offsetof(OrionLazyImage_SetBrushFromLazyTexture, bMatchSize) == 0x000028, "Member 'OrionLazyImage_SetBrushFromLazyTexture::bMatchSize' has a wrong offset!");

// Function OrionUI.OrionLazyImage.IsLoading
// 0x0001 (0x0001 - 0x0000)
struct OrionLazyImage_IsLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLazyImage_IsLoading) == 0x000001, "Wrong alignment on OrionLazyImage_IsLoading");
static_assert(sizeof(OrionLazyImage_IsLoading) == 0x000001, "Wrong size on OrionLazyImage_IsLoading");
static_assert(offsetof(OrionLazyImage_IsLoading, ReturnValue) == 0x000000, "Member 'OrionLazyImage_IsLoading::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionLegacySlateWidget.SetOnCloseHandler
// 0x0010 (0x0010 - 0x0000)
struct OrionLegacySlateWidget_SetOnCloseHandler final
{
public:
	TDelegate<void()>                             OnCloseHandler;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLegacySlateWidget_SetOnCloseHandler) == 0x000004, "Wrong alignment on OrionLegacySlateWidget_SetOnCloseHandler");
static_assert(sizeof(OrionLegacySlateWidget_SetOnCloseHandler) == 0x000010, "Wrong size on OrionLegacySlateWidget_SetOnCloseHandler");
static_assert(offsetof(OrionLegacySlateWidget_SetOnCloseHandler, OnCloseHandler) == 0x000000, "Member 'OrionLegacySlateWidget_SetOnCloseHandler::OnCloseHandler' has a wrong offset!");

// Function OrionUI.OrionLegacySlateWidget.UpdateSlateWidget
// 0x0001 (0x0001 - 0x0000)
struct OrionLegacySlateWidget_UpdateSlateWidget final
{
public:
	EOrionLegacySlateWidgetType                   SlateWidgetType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLegacySlateWidget_UpdateSlateWidget) == 0x000001, "Wrong alignment on OrionLegacySlateWidget_UpdateSlateWidget");
static_assert(sizeof(OrionLegacySlateWidget_UpdateSlateWidget) == 0x000001, "Wrong size on OrionLegacySlateWidget_UpdateSlateWidget");
static_assert(offsetof(OrionLegacySlateWidget_UpdateSlateWidget, SlateWidgetType) == 0x000000, "Member 'OrionLegacySlateWidget_UpdateSlateWidget::SlateWidgetType' has a wrong offset!");

// Function OrionUI.OrionSpectatorViewOptions.OnButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct OrionSpectatorViewOptions_OnButtonClicked final
{
public:
	class UOrionUserWidgetBase*                   Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSpectatorViewOptions_OnButtonClicked) == 0x000008, "Wrong alignment on OrionSpectatorViewOptions_OnButtonClicked");
static_assert(sizeof(OrionSpectatorViewOptions_OnButtonClicked) == 0x000008, "Wrong size on OrionSpectatorViewOptions_OnButtonClicked");
static_assert(offsetof(OrionSpectatorViewOptions_OnButtonClicked, Button) == 0x000000, "Member 'OrionSpectatorViewOptions_OnButtonClicked::Button' has a wrong offset!");

// DelegateFunction OrionUI.OrionSpectatorViewOptions.OnSetButtonSelected__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature final
{
public:
	class UOrionUserWidgetBase*                   Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature) == 0x000008, "Wrong alignment on OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature");
static_assert(sizeof(OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature) == 0x000010, "Wrong size on OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature");
static_assert(offsetof(OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature, Button) == 0x000000, "Member 'OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature::Button' has a wrong offset!");
static_assert(offsetof(OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature, bIsSelected) == 0x000008, "Member 'OrionSpectatorViewOptions_OnSetButtonSelected__DelegateSignature::bIsSelected' has a wrong offset!");

// Function OrionUI.OrionLevelProgressDisplay.OnLevelUp
// 0x0001 (0x0001 - 0x0000)
struct OrionLevelProgressDisplay_OnLevelUp final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLevelProgressDisplay_OnLevelUp) == 0x000001, "Wrong alignment on OrionLevelProgressDisplay_OnLevelUp");
static_assert(sizeof(OrionLevelProgressDisplay_OnLevelUp) == 0x000001, "Wrong size on OrionLevelProgressDisplay_OnLevelUp");
static_assert(offsetof(OrionLevelProgressDisplay_OnLevelUp, bImmediate) == 0x000000, "Member 'OrionLevelProgressDisplay_OnLevelUp::bImmediate' has a wrong offset!");

// Function OrionUI.OrionLevelProgressDisplay.OnSetProgressLocked
// 0x0001 (0x0001 - 0x0000)
struct OrionLevelProgressDisplay_OnSetProgressLocked final
{
public:
	bool                                          ProgressLocked;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLevelProgressDisplay_OnSetProgressLocked) == 0x000001, "Wrong alignment on OrionLevelProgressDisplay_OnSetProgressLocked");
static_assert(sizeof(OrionLevelProgressDisplay_OnSetProgressLocked) == 0x000001, "Wrong size on OrionLevelProgressDisplay_OnSetProgressLocked");
static_assert(offsetof(OrionLevelProgressDisplay_OnSetProgressLocked, ProgressLocked) == 0x000000, "Member 'OrionLevelProgressDisplay_OnSetProgressLocked::ProgressLocked' has a wrong offset!");

// Function OrionUI.LoadGuardSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct LoadGuardSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadGuardSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on LoadGuardSlot_SetHorizontalAlignment");
static_assert(sizeof(LoadGuardSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on LoadGuardSlot_SetHorizontalAlignment");
static_assert(offsetof(LoadGuardSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'LoadGuardSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function OrionUI.LoadGuardSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct LoadGuardSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadGuardSlot_SetPadding) == 0x000004, "Wrong alignment on LoadGuardSlot_SetPadding");
static_assert(sizeof(LoadGuardSlot_SetPadding) == 0x000010, "Wrong size on LoadGuardSlot_SetPadding");
static_assert(offsetof(LoadGuardSlot_SetPadding, InPadding) == 0x000000, "Member 'LoadGuardSlot_SetPadding::InPadding' has a wrong offset!");

// Function OrionUI.LoadGuardSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct LoadGuardSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadGuardSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on LoadGuardSlot_SetVerticalAlignment");
static_assert(sizeof(LoadGuardSlot_SetVerticalAlignment) == 0x000001, "Wrong size on LoadGuardSlot_SetVerticalAlignment");
static_assert(offsetof(LoadGuardSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'LoadGuardSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function OrionUI.OrionTableView.OnItemClicked
// 0x0008 (0x0008 - 0x0000)
struct OrionTableView_OnItemClicked final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTableView_OnItemClicked) == 0x000008, "Wrong alignment on OrionTableView_OnItemClicked");
static_assert(sizeof(OrionTableView_OnItemClicked) == 0x000008, "Wrong size on OrionTableView_OnItemClicked");
static_assert(offsetof(OrionTableView_OnItemClicked, Widget) == 0x000000, "Member 'OrionTableView_OnItemClicked::Widget' has a wrong offset!");

// Function OrionUI.OrionTableView.OnItemHover
// 0x0010 (0x0010 - 0x0000)
struct OrionTableView_OnItemHover final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnused;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTableView_OnItemHover) == 0x000008, "Wrong alignment on OrionTableView_OnItemHover");
static_assert(sizeof(OrionTableView_OnItemHover) == 0x000010, "Wrong size on OrionTableView_OnItemHover");
static_assert(offsetof(OrionTableView_OnItemHover, Widget) == 0x000000, "Member 'OrionTableView_OnItemHover::Widget' has a wrong offset!");
static_assert(offsetof(OrionTableView_OnItemHover, bUnused) == 0x000008, "Member 'OrionTableView_OnItemHover::bUnused' has a wrong offset!");

// Function OrionUI.OrionTableView.OnItemSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionTableView_OnItemSelected final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTableView_OnItemSelected) == 0x000008, "Wrong alignment on OrionTableView_OnItemSelected");
static_assert(sizeof(OrionTableView_OnItemSelected) == 0x000010, "Wrong size on OrionTableView_OnItemSelected");
static_assert(offsetof(OrionTableView_OnItemSelected, Widget) == 0x000000, "Member 'OrionTableView_OnItemSelected::Widget' has a wrong offset!");
static_assert(offsetof(OrionTableView_OnItemSelected, bSelected) == 0x000008, "Member 'OrionTableView_OnItemSelected::bSelected' has a wrong offset!");

// Function OrionUI.OrionTableView.OnItemUnhover
// 0x0010 (0x0010 - 0x0000)
struct OrionTableView_OnItemUnhover final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnused;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTableView_OnItemUnhover) == 0x000008, "Wrong alignment on OrionTableView_OnItemUnhover");
static_assert(sizeof(OrionTableView_OnItemUnhover) == 0x000010, "Wrong size on OrionTableView_OnItemUnhover");
static_assert(offsetof(OrionTableView_OnItemUnhover, Widget) == 0x000000, "Member 'OrionTableView_OnItemUnhover::Widget' has a wrong offset!");
static_assert(offsetof(OrionTableView_OnItemUnhover, bUnused) == 0x000008, "Member 'OrionTableView_OnItemUnhover::bUnused' has a wrong offset!");

// DelegateFunction OrionUI.OrionTableView.OnTableViewItemEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OrionTableView_OnTableViewItemEvent__DelegateSignature final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTableView_OnTableViewItemEvent__DelegateSignature) == 0x000008, "Wrong alignment on OrionTableView_OnTableViewItemEvent__DelegateSignature");
static_assert(sizeof(OrionTableView_OnTableViewItemEvent__DelegateSignature) == 0x000008, "Wrong size on OrionTableView_OnTableViewItemEvent__DelegateSignature");
static_assert(offsetof(OrionTableView_OnTableViewItemEvent__DelegateSignature, Widget) == 0x000000, "Member 'OrionTableView_OnTableViewItemEvent__DelegateSignature::Widget' has a wrong offset!");

// Function OrionUI.OrionTableView.SetDataProvider
// 0x0010 (0x0010 - 0x0000)
struct OrionTableView_SetDataProvider final
{
public:
	TArray<class UObject*>                        InDataProvider;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTableView_SetDataProvider) == 0x000008, "Wrong alignment on OrionTableView_SetDataProvider");
static_assert(sizeof(OrionTableView_SetDataProvider) == 0x000010, "Wrong size on OrionTableView_SetDataProvider");
static_assert(offsetof(OrionTableView_SetDataProvider, InDataProvider) == 0x000000, "Member 'OrionTableView_SetDataProvider::InDataProvider' has a wrong offset!");

// Function OrionUI.OrionTableView.SetSelection
// 0x0008 (0x0008 - 0x0000)
struct OrionTableView_SetSelection final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTableView_SetSelection) == 0x000008, "Wrong alignment on OrionTableView_SetSelection");
static_assert(sizeof(OrionTableView_SetSelection) == 0x000008, "Wrong size on OrionTableView_SetSelection");
static_assert(offsetof(OrionTableView_SetSelection, Widget) == 0x000000, "Member 'OrionTableView_SetSelection::Widget' has a wrong offset!");

// Function OrionUI.OrionTableView.GetSelection
// 0x0008 (0x0008 - 0x0000)
struct OrionTableView_GetSelection final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTableView_GetSelection) == 0x000008, "Wrong alignment on OrionTableView_GetSelection");
static_assert(sizeof(OrionTableView_GetSelection) == 0x000008, "Wrong size on OrionTableView_GetSelection");
static_assert(offsetof(OrionTableView_GetSelection, ReturnValue) == 0x000000, "Member 'OrionTableView_GetSelection::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionLoadGuard.BP_GuardAndLoadAsset
// 0x0038 (0x0038 - 0x0000)
struct OrionLoadGuard_BP_GuardAndLoadAsset final
{
public:
	TSoftObjectPtr<class UObject>                 InLazyAsset;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Object)>        OnAssetLoaded;                                     // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLoadGuard_BP_GuardAndLoadAsset) == 0x000008, "Wrong alignment on OrionLoadGuard_BP_GuardAndLoadAsset");
static_assert(sizeof(OrionLoadGuard_BP_GuardAndLoadAsset) == 0x000038, "Wrong size on OrionLoadGuard_BP_GuardAndLoadAsset");
static_assert(offsetof(OrionLoadGuard_BP_GuardAndLoadAsset, InLazyAsset) == 0x000000, "Member 'OrionLoadGuard_BP_GuardAndLoadAsset::InLazyAsset' has a wrong offset!");
static_assert(offsetof(OrionLoadGuard_BP_GuardAndLoadAsset, OnAssetLoaded) == 0x000028, "Member 'OrionLoadGuard_BP_GuardAndLoadAsset::OnAssetLoaded' has a wrong offset!");

// DelegateFunction OrionUI.OrionLoadGuard.OnAssetLoaded__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OrionLoadGuard_OnAssetLoaded__DelegateSignature final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLoadGuard_OnAssetLoaded__DelegateSignature) == 0x000008, "Wrong alignment on OrionLoadGuard_OnAssetLoaded__DelegateSignature");
static_assert(sizeof(OrionLoadGuard_OnAssetLoaded__DelegateSignature) == 0x000008, "Wrong size on OrionLoadGuard_OnAssetLoaded__DelegateSignature");
static_assert(offsetof(OrionLoadGuard_OnAssetLoaded__DelegateSignature, Object) == 0x000000, "Member 'OrionLoadGuard_OnAssetLoaded__DelegateSignature::Object' has a wrong offset!");

// Function OrionUI.OrionLoadGuard.SetIsLoading
// 0x0001 (0x0001 - 0x0000)
struct OrionLoadGuard_SetIsLoading final
{
public:
	bool                                          bInIsLoading;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLoadGuard_SetIsLoading) == 0x000001, "Wrong alignment on OrionLoadGuard_SetIsLoading");
static_assert(sizeof(OrionLoadGuard_SetIsLoading) == 0x000001, "Wrong size on OrionLoadGuard_SetIsLoading");
static_assert(offsetof(OrionLoadGuard_SetIsLoading, bInIsLoading) == 0x000000, "Member 'OrionLoadGuard_SetIsLoading::bInIsLoading' has a wrong offset!");

// Function OrionUI.OrionLoadGuard.SetLoadingText
// 0x0018 (0x0018 - 0x0000)
struct OrionLoadGuard_SetLoadingText final
{
public:
	class FText                                   InLoadingText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLoadGuard_SetLoadingText) == 0x000008, "Wrong alignment on OrionLoadGuard_SetLoadingText");
static_assert(sizeof(OrionLoadGuard_SetLoadingText) == 0x000018, "Wrong size on OrionLoadGuard_SetLoadingText");
static_assert(offsetof(OrionLoadGuard_SetLoadingText, InLoadingText) == 0x000000, "Member 'OrionLoadGuard_SetLoadingText::InLoadingText' has a wrong offset!");

// Function OrionUI.OrionLoadGuard.IsLoading
// 0x0001 (0x0001 - 0x0000)
struct OrionLoadGuard_IsLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLoadGuard_IsLoading) == 0x000001, "Wrong alignment on OrionLoadGuard_IsLoading");
static_assert(sizeof(OrionLoadGuard_IsLoading) == 0x000001, "Wrong size on OrionLoadGuard_IsLoading");
static_assert(offsetof(OrionLoadGuard_IsLoading, ReturnValue) == 0x000000, "Member 'OrionLoadGuard_IsLoading::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionLoadingScreenProgress.DynamicHandleLoadingProgressUpdated
// 0x0004 (0x0004 - 0x0000)
struct OrionLoadingScreenProgress_DynamicHandleLoadingProgressUpdated final
{
public:
	float                                         InLoadingPercent;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLoadingScreenProgress_DynamicHandleLoadingProgressUpdated) == 0x000004, "Wrong alignment on OrionLoadingScreenProgress_DynamicHandleLoadingProgressUpdated");
static_assert(sizeof(OrionLoadingScreenProgress_DynamicHandleLoadingProgressUpdated) == 0x000004, "Wrong size on OrionLoadingScreenProgress_DynamicHandleLoadingProgressUpdated");
static_assert(offsetof(OrionLoadingScreenProgress_DynamicHandleLoadingProgressUpdated, InLoadingPercent) == 0x000000, "Member 'OrionLoadingScreenProgress_DynamicHandleLoadingProgressUpdated::InLoadingPercent' has a wrong offset!");

// Function OrionUI.OrionRespawnTimerWidget.OnAdvantageBegun
// 0x0008 (0x0008 - 0x0000)
struct OrionRespawnTimerWidget_OnAdvantageBegun final
{
public:
	int32                                         AdvantageSize;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdvantageTimeRemaining;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRespawnTimerWidget_OnAdvantageBegun) == 0x000004, "Wrong alignment on OrionRespawnTimerWidget_OnAdvantageBegun");
static_assert(sizeof(OrionRespawnTimerWidget_OnAdvantageBegun) == 0x000008, "Wrong size on OrionRespawnTimerWidget_OnAdvantageBegun");
static_assert(offsetof(OrionRespawnTimerWidget_OnAdvantageBegun, AdvantageSize) == 0x000000, "Member 'OrionRespawnTimerWidget_OnAdvantageBegun::AdvantageSize' has a wrong offset!");
static_assert(offsetof(OrionRespawnTimerWidget_OnAdvantageBegun, AdvantageTimeRemaining) == 0x000004, "Member 'OrionRespawnTimerWidget_OnAdvantageBegun::AdvantageTimeRemaining' has a wrong offset!");

// Function OrionUI.OrionRespawnTimerWidget.OnAdvantageChanged
// 0x0008 (0x0008 - 0x0000)
struct OrionRespawnTimerWidget_OnAdvantageChanged final
{
public:
	int32                                         NewAdvantageSize;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAdvantageTimeRemaining;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRespawnTimerWidget_OnAdvantageChanged) == 0x000004, "Wrong alignment on OrionRespawnTimerWidget_OnAdvantageChanged");
static_assert(sizeof(OrionRespawnTimerWidget_OnAdvantageChanged) == 0x000008, "Wrong size on OrionRespawnTimerWidget_OnAdvantageChanged");
static_assert(offsetof(OrionRespawnTimerWidget_OnAdvantageChanged, NewAdvantageSize) == 0x000000, "Member 'OrionRespawnTimerWidget_OnAdvantageChanged::NewAdvantageSize' has a wrong offset!");
static_assert(offsetof(OrionRespawnTimerWidget_OnAdvantageChanged, NewAdvantageTimeRemaining) == 0x000004, "Member 'OrionRespawnTimerWidget_OnAdvantageChanged::NewAdvantageTimeRemaining' has a wrong offset!");

// Function OrionUI.OrionRespawnTimerWidget.OnHeroDeath
// 0x0068 (0x0068 - 0x0000)
struct OrionRespawnTimerWidget_OnHeroDeath final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRespawnTimerWidget_OnHeroDeath) == 0x000008, "Wrong alignment on OrionRespawnTimerWidget_OnHeroDeath");
static_assert(sizeof(OrionRespawnTimerWidget_OnHeroDeath) == 0x000068, "Wrong size on OrionRespawnTimerWidget_OnHeroDeath");
static_assert(offsetof(OrionRespawnTimerWidget_OnHeroDeath, UpdatedTeamInfo) == 0x000000, "Member 'OrionRespawnTimerWidget_OnHeroDeath::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionLoadingScreenRoles.DisplayRole
// 0x0002 (0x0002 - 0x0000)
struct OrionLoadingScreenRoles_DisplayRole final
{
public:
	EOrionPosition                                Position;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionTeam                                    Team;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLoadingScreenRoles_DisplayRole) == 0x000001, "Wrong alignment on OrionLoadingScreenRoles_DisplayRole");
static_assert(sizeof(OrionLoadingScreenRoles_DisplayRole) == 0x000002, "Wrong size on OrionLoadingScreenRoles_DisplayRole");
static_assert(offsetof(OrionLoadingScreenRoles_DisplayRole, Position) == 0x000000, "Member 'OrionLoadingScreenRoles_DisplayRole::Position' has a wrong offset!");
static_assert(offsetof(OrionLoadingScreenRoles_DisplayRole, Team) == 0x000001, "Member 'OrionLoadingScreenRoles_DisplayRole::Team' has a wrong offset!");

// Function OrionUI.OrionLootCrateOpeningScreen.BeginOpen
// 0x0001 (0x0001 - 0x0000)
struct OrionLootCrateOpeningScreen_BeginOpen final
{
public:
	bool                                          bGolden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateOpeningScreen_BeginOpen) == 0x000001, "Wrong alignment on OrionLootCrateOpeningScreen_BeginOpen");
static_assert(sizeof(OrionLootCrateOpeningScreen_BeginOpen) == 0x000001, "Wrong size on OrionLootCrateOpeningScreen_BeginOpen");
static_assert(offsetof(OrionLootCrateOpeningScreen_BeginOpen, bGolden) == 0x000000, "Member 'OrionLootCrateOpeningScreen_BeginOpen::bGolden' has a wrong offset!");

// Function OrionUI.OrionLootCrateOpeningScreen.FinalSpinnerStop
// 0x0001 (0x0001 - 0x0000)
struct OrionLootCrateOpeningScreen_FinalSpinnerStop final
{
public:
	EOrionItemRarity                              ItemRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateOpeningScreen_FinalSpinnerStop) == 0x000001, "Wrong alignment on OrionLootCrateOpeningScreen_FinalSpinnerStop");
static_assert(sizeof(OrionLootCrateOpeningScreen_FinalSpinnerStop) == 0x000001, "Wrong size on OrionLootCrateOpeningScreen_FinalSpinnerStop");
static_assert(offsetof(OrionLootCrateOpeningScreen_FinalSpinnerStop, ItemRarity) == 0x000000, "Member 'OrionLootCrateOpeningScreen_FinalSpinnerStop::ItemRarity' has a wrong offset!");

// Function OrionUI.OrionLootCrateOpeningScreen.FireSpinner
// 0x0018 (0x0018 - 0x0000)
struct OrionLootCrateOpeningScreen_FireSpinner final
{
public:
	const class UOrionMcpCardPackItem*            PackToOpen;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMcpLootEntry>                  RewardArray;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateOpeningScreen_FireSpinner) == 0x000008, "Wrong alignment on OrionLootCrateOpeningScreen_FireSpinner");
static_assert(sizeof(OrionLootCrateOpeningScreen_FireSpinner) == 0x000018, "Wrong size on OrionLootCrateOpeningScreen_FireSpinner");
static_assert(offsetof(OrionLootCrateOpeningScreen_FireSpinner, PackToOpen) == 0x000000, "Member 'OrionLootCrateOpeningScreen_FireSpinner::PackToOpen' has a wrong offset!");
static_assert(offsetof(OrionLootCrateOpeningScreen_FireSpinner, RewardArray) == 0x000008, "Member 'OrionLootCrateOpeningScreen_FireSpinner::RewardArray' has a wrong offset!");

// Function OrionUI.OrionLootCrateOpeningScreen.OnNextItemShown
// 0x0003 (0x0003 - 0x0000)
struct OrionLootCrateOpeningScreen_OnNextItemShown final
{
public:
	EOrionItemRarity                              ItemRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrionSpinState                               SpinState;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinal;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateOpeningScreen_OnNextItemShown) == 0x000001, "Wrong alignment on OrionLootCrateOpeningScreen_OnNextItemShown");
static_assert(sizeof(OrionLootCrateOpeningScreen_OnNextItemShown) == 0x000003, "Wrong size on OrionLootCrateOpeningScreen_OnNextItemShown");
static_assert(offsetof(OrionLootCrateOpeningScreen_OnNextItemShown, ItemRarity) == 0x000000, "Member 'OrionLootCrateOpeningScreen_OnNextItemShown::ItemRarity' has a wrong offset!");
static_assert(offsetof(OrionLootCrateOpeningScreen_OnNextItemShown, SpinState) == 0x000001, "Member 'OrionLootCrateOpeningScreen_OnNextItemShown::SpinState' has a wrong offset!");
static_assert(offsetof(OrionLootCrateOpeningScreen_OnNextItemShown, bIsFinal) == 0x000002, "Member 'OrionLootCrateOpeningScreen_OnNextItemShown::bIsFinal' has a wrong offset!");

// Function OrionUI.OrionLootCrateOpeningScreen.OnPurchaseConfirmationClosed
// 0x0018 (0x0018 - 0x0000)
struct OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStorePurchase>                 PurchasedItems;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed) == 0x000008, "Wrong alignment on OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed");
static_assert(sizeof(OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed) == 0x000018, "Wrong size on OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed");
static_assert(offsetof(OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed, bSuccess) == 0x000000, "Member 'OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed::bSuccess' has a wrong offset!");
static_assert(offsetof(OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed, PurchasedItems) == 0x000008, "Member 'OrionLootCrateOpeningScreen_OnPurchaseConfirmationClosed::PurchasedItems' has a wrong offset!");

// Function OrionUI.OrionLootCrateOpeningScreen.SetItemRarities
// 0x0001 (0x0001 - 0x0000)
struct OrionLootCrateOpeningScreen_SetItemRarities final
{
public:
	EOrionItemRarity                              ItemRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateOpeningScreen_SetItemRarities) == 0x000001, "Wrong alignment on OrionLootCrateOpeningScreen_SetItemRarities");
static_assert(sizeof(OrionLootCrateOpeningScreen_SetItemRarities) == 0x000001, "Wrong size on OrionLootCrateOpeningScreen_SetItemRarities");
static_assert(offsetof(OrionLootCrateOpeningScreen_SetItemRarities, ItemRarity) == 0x000000, "Member 'OrionLootCrateOpeningScreen_SetItemRarities::ItemRarity' has a wrong offset!");

// Function OrionUI.OrionLootCrateOpeningScreen.SetScreenState
// 0x0001 (0x0001 - 0x0000)
struct OrionLootCrateOpeningScreen_SetScreenState final
{
public:
	EOrionSpinState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateOpeningScreen_SetScreenState) == 0x000001, "Wrong alignment on OrionLootCrateOpeningScreen_SetScreenState");
static_assert(sizeof(OrionLootCrateOpeningScreen_SetScreenState) == 0x000001, "Wrong size on OrionLootCrateOpeningScreen_SetScreenState");
static_assert(offsetof(OrionLootCrateOpeningScreen_SetScreenState, NewState) == 0x000000, "Member 'OrionLootCrateOpeningScreen_SetScreenState::NewState' has a wrong offset!");

// Function OrionUI.OrionLootCrateAllItems.HandleItemClicked
// 0x0008 (0x0008 - 0x0000)
struct OrionLootCrateAllItems_HandleItemClicked final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateAllItems_HandleItemClicked) == 0x000008, "Wrong alignment on OrionLootCrateAllItems_HandleItemClicked");
static_assert(sizeof(OrionLootCrateAllItems_HandleItemClicked) == 0x000008, "Wrong size on OrionLootCrateAllItems_HandleItemClicked");
static_assert(offsetof(OrionLootCrateAllItems_HandleItemClicked, Item) == 0x000000, "Member 'OrionLootCrateAllItems_HandleItemClicked::Item' has a wrong offset!");

// Function OrionUI.OrionLootCrateRewardItem.OnSetActive
// 0x0001 (0x0001 - 0x0000)
struct OrionLootCrateRewardItem_OnSetActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionLootCrateRewardItem_OnSetActive) == 0x000001, "Wrong alignment on OrionLootCrateRewardItem_OnSetActive");
static_assert(sizeof(OrionLootCrateRewardItem_OnSetActive) == 0x000001, "Wrong size on OrionLootCrateRewardItem_OnSetActive");
static_assert(offsetof(OrionLootCrateRewardItem_OnSetActive, bActive) == 0x000000, "Member 'OrionLootCrateRewardItem_OnSetActive::bActive' has a wrong offset!");

// Function OrionUI.OrionTileDataBlock.DynamicHandleIconLoadingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionTileDataBlock_DynamicHandleIconLoadingStateChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTileDataBlock_DynamicHandleIconLoadingStateChanged) == 0x000001, "Wrong alignment on OrionTileDataBlock_DynamicHandleIconLoadingStateChanged");
static_assert(sizeof(OrionTileDataBlock_DynamicHandleIconLoadingStateChanged) == 0x000001, "Wrong size on OrionTileDataBlock_DynamicHandleIconLoadingStateChanged");
static_assert(offsetof(OrionTileDataBlock_DynamicHandleIconLoadingStateChanged, bIsLoading) == 0x000000, "Member 'OrionTileDataBlock_DynamicHandleIconLoadingStateChanged::bIsLoading' has a wrong offset!");

// Function OrionUI.OrionMajorGameEventDisplay.OnShowEventMessage
// 0x0001 (0x0001 - 0x0000)
struct OrionMajorGameEventDisplay_OnShowEventMessage final
{
public:
	bool                                          bIsGoodForTeam;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMajorGameEventDisplay_OnShowEventMessage) == 0x000001, "Wrong alignment on OrionMajorGameEventDisplay_OnShowEventMessage");
static_assert(sizeof(OrionMajorGameEventDisplay_OnShowEventMessage) == 0x000001, "Wrong size on OrionMajorGameEventDisplay_OnShowEventMessage");
static_assert(offsetof(OrionMajorGameEventDisplay_OnShowEventMessage, bIsGoodForTeam) == 0x000000, "Member 'OrionMajorGameEventDisplay_OnShowEventMessage::bIsGoodForTeam' has a wrong offset!");

// Function OrionUI.OrionRewardTooltipItem.OnDataSet
// 0x0001 (0x0001 - 0x0000)
struct OrionRewardTooltipItem_OnDataSet final
{
public:
	EOrionItemRarity                              ItemRarity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardTooltipItem_OnDataSet) == 0x000001, "Wrong alignment on OrionRewardTooltipItem_OnDataSet");
static_assert(sizeof(OrionRewardTooltipItem_OnDataSet) == 0x000001, "Wrong size on OrionRewardTooltipItem_OnDataSet");
static_assert(offsetof(OrionRewardTooltipItem_OnDataSet, ItemRarity) == 0x000000, "Member 'OrionRewardTooltipItem_OnDataSet::ItemRarity' has a wrong offset!");

// Function OrionUI.OrionMasteryLevelDisplay.OnLevelSet
// 0x0001 (0x0001 - 0x0000)
struct OrionMasteryLevelDisplay_OnLevelSet final
{
public:
	bool                                          bProgressLocked;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryLevelDisplay_OnLevelSet) == 0x000001, "Wrong alignment on OrionMasteryLevelDisplay_OnLevelSet");
static_assert(sizeof(OrionMasteryLevelDisplay_OnLevelSet) == 0x000001, "Wrong size on OrionMasteryLevelDisplay_OnLevelSet");
static_assert(offsetof(OrionMasteryLevelDisplay_OnLevelSet, bProgressLocked) == 0x000000, "Member 'OrionMasteryLevelDisplay_OnLevelSet::bProgressLocked' has a wrong offset!");

// Function OrionUI.OrionStorefront.HandleOfferConfirmed
// 0x0001 (0x0001 - 0x0000)
struct OrionStorefront_HandleOfferConfirmed final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStorefront_HandleOfferConfirmed) == 0x000001, "Wrong alignment on OrionStorefront_HandleOfferConfirmed");
static_assert(sizeof(OrionStorefront_HandleOfferConfirmed) == 0x000001, "Wrong size on OrionStorefront_HandleOfferConfirmed");
static_assert(offsetof(OrionStorefront_HandleOfferConfirmed, bSuccess) == 0x000000, "Member 'OrionStorefront_HandleOfferConfirmed::bSuccess' has a wrong offset!");

// Function OrionUI.OrionStorefront.OnOfferConfirmed
// 0x0001 (0x0001 - 0x0000)
struct OrionStorefront_OnOfferConfirmed final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStorefront_OnOfferConfirmed) == 0x000001, "Wrong alignment on OrionStorefront_OnOfferConfirmed");
static_assert(sizeof(OrionStorefront_OnOfferConfirmed) == 0x000001, "Wrong size on OrionStorefront_OnOfferConfirmed");
static_assert(offsetof(OrionStorefront_OnOfferConfirmed, bSuccess) == 0x000000, "Member 'OrionStorefront_OnOfferConfirmed::bSuccess' has a wrong offset!");

// Function OrionUI.OrionStorefront.SetStorefrontType
// 0x0001 (0x0001 - 0x0000)
struct OrionStorefront_SetStorefrontType final
{
public:
	EOrionStoreFront                              InStorefrontType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStorefront_SetStorefrontType) == 0x000001, "Wrong alignment on OrionStorefront_SetStorefrontType");
static_assert(sizeof(OrionStorefront_SetStorefrontType) == 0x000001, "Wrong size on OrionStorefront_SetStorefrontType");
static_assert(offsetof(OrionStorefront_SetStorefrontType, InStorefrontType) == 0x000000, "Member 'OrionStorefront_SetStorefrontType::InStorefrontType' has a wrong offset!");

// Function OrionUI.OrionMasteryOnboardPopupSelectRole.GetNumFreeMasteriesUsed
// 0x0004 (0x0004 - 0x0000)
struct OrionMasteryOnboardPopupSelectRole_GetNumFreeMasteriesUsed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryOnboardPopupSelectRole_GetNumFreeMasteriesUsed) == 0x000004, "Wrong alignment on OrionMasteryOnboardPopupSelectRole_GetNumFreeMasteriesUsed");
static_assert(sizeof(OrionMasteryOnboardPopupSelectRole_GetNumFreeMasteriesUsed) == 0x000004, "Wrong size on OrionMasteryOnboardPopupSelectRole_GetNumFreeMasteriesUsed");
static_assert(offsetof(OrionMasteryOnboardPopupSelectRole_GetNumFreeMasteriesUsed, ReturnValue) == 0x000000, "Member 'OrionMasteryOnboardPopupSelectRole_GetNumFreeMasteriesUsed::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionMasteryOnboardPopupSelectRole.SetRoleWidgetsArray
// 0x0010 (0x0010 - 0x0000)
struct OrionMasteryOnboardPopupSelectRole_SetRoleWidgetsArray final
{
public:
	TArray<class UOrionMasteryOnboardHeroRolePair*> InHeroRolePairWidgets;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryOnboardPopupSelectRole_SetRoleWidgetsArray) == 0x000008, "Wrong alignment on OrionMasteryOnboardPopupSelectRole_SetRoleWidgetsArray");
static_assert(sizeof(OrionMasteryOnboardPopupSelectRole_SetRoleWidgetsArray) == 0x000010, "Wrong size on OrionMasteryOnboardPopupSelectRole_SetRoleWidgetsArray");
static_assert(offsetof(OrionMasteryOnboardPopupSelectRole_SetRoleWidgetsArray, InHeroRolePairWidgets) == 0x000000, "Member 'OrionMasteryOnboardPopupSelectRole_SetRoleWidgetsArray::InHeroRolePairWidgets' has a wrong offset!");

// Function OrionUI.OrionMasteryOnboardHeroRolePair.HeroMasteryOwned
// 0x0001 (0x0001 - 0x0000)
struct OrionMasteryOnboardHeroRolePair_HeroMasteryOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryOnboardHeroRolePair_HeroMasteryOwned) == 0x000001, "Wrong alignment on OrionMasteryOnboardHeroRolePair_HeroMasteryOwned");
static_assert(sizeof(OrionMasteryOnboardHeroRolePair_HeroMasteryOwned) == 0x000001, "Wrong size on OrionMasteryOnboardHeroRolePair_HeroMasteryOwned");
static_assert(offsetof(OrionMasteryOnboardHeroRolePair_HeroMasteryOwned, ReturnValue) == 0x000000, "Member 'OrionMasteryOnboardHeroRolePair_HeroMasteryOwned::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionMasteryOnboardHeroRolePair.OnChangeInHeroSelectability
// 0x0001 (0x0001 - 0x0000)
struct OrionMasteryOnboardHeroRolePair_OnChangeInHeroSelectability final
{
public:
	bool                                          bIsSelectable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryOnboardHeroRolePair_OnChangeInHeroSelectability) == 0x000001, "Wrong alignment on OrionMasteryOnboardHeroRolePair_OnChangeInHeroSelectability");
static_assert(sizeof(OrionMasteryOnboardHeroRolePair_OnChangeInHeroSelectability) == 0x000001, "Wrong size on OrionMasteryOnboardHeroRolePair_OnChangeInHeroSelectability");
static_assert(offsetof(OrionMasteryOnboardHeroRolePair_OnChangeInHeroSelectability, bIsSelectable) == 0x000000, "Member 'OrionMasteryOnboardHeroRolePair_OnChangeInHeroSelectability::bIsSelectable' has a wrong offset!");

// Function OrionUI.OrionMasteryOnboardHeroRolePair.OnRecommendChange
// 0x0001 (0x0001 - 0x0000)
struct OrionMasteryOnboardHeroRolePair_OnRecommendChange final
{
public:
	bool                                          bIsRecommended;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryOnboardHeroRolePair_OnRecommendChange) == 0x000001, "Wrong alignment on OrionMasteryOnboardHeroRolePair_OnRecommendChange");
static_assert(sizeof(OrionMasteryOnboardHeroRolePair_OnRecommendChange) == 0x000001, "Wrong size on OrionMasteryOnboardHeroRolePair_OnRecommendChange");
static_assert(offsetof(OrionMasteryOnboardHeroRolePair_OnRecommendChange, bIsRecommended) == 0x000000, "Member 'OrionMasteryOnboardHeroRolePair_OnRecommendChange::bIsRecommended' has a wrong offset!");

// Function OrionUI.OrionMasteryOnboardHeroRolePair.SetHero
// 0x0008 (0x0008 - 0x0000)
struct OrionMasteryOnboardHeroRolePair_SetHero final
{
public:
	const class UOrionHeroData*                   InHeroPtr;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryOnboardHeroRolePair_SetHero) == 0x000008, "Wrong alignment on OrionMasteryOnboardHeroRolePair_SetHero");
static_assert(sizeof(OrionMasteryOnboardHeroRolePair_SetHero) == 0x000008, "Wrong size on OrionMasteryOnboardHeroRolePair_SetHero");
static_assert(offsetof(OrionMasteryOnboardHeroRolePair_SetHero, InHeroPtr) == 0x000000, "Member 'OrionMasteryOnboardHeroRolePair_SetHero::InHeroPtr' has a wrong offset!");

// Function OrionUI.OrionMasteryOnboardHeroRolePair.SetRoleText
// 0x0018 (0x0018 - 0x0000)
struct OrionMasteryOnboardHeroRolePair_SetRoleText final
{
public:
	class FText                                   NewRoleText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMasteryOnboardHeroRolePair_SetRoleText) == 0x000008, "Wrong alignment on OrionMasteryOnboardHeroRolePair_SetRoleText");
static_assert(sizeof(OrionMasteryOnboardHeroRolePair_SetRoleText) == 0x000018, "Wrong size on OrionMasteryOnboardHeroRolePair_SetRoleText");
static_assert(offsetof(OrionMasteryOnboardHeroRolePair_SetRoleText, NewRoleText) == 0x000000, "Member 'OrionMasteryOnboardHeroRolePair_SetRoleText::NewRoleText' has a wrong offset!");

// Function OrionUI.OrionMcpUIUtils.ClearNewItem
// 0x0018 (0x0018 - 0x0000)
struct OrionMcpUIUtils_ClearNewItem final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UOrionMcpItem*                    InItem;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionMcpUIUtils_ClearNewItem) == 0x000008, "Wrong alignment on OrionMcpUIUtils_ClearNewItem");
static_assert(sizeof(OrionMcpUIUtils_ClearNewItem) == 0x000018, "Wrong size on OrionMcpUIUtils_ClearNewItem");
static_assert(offsetof(OrionMcpUIUtils_ClearNewItem, Widget) == 0x000000, "Member 'OrionMcpUIUtils_ClearNewItem::Widget' has a wrong offset!");
static_assert(offsetof(OrionMcpUIUtils_ClearNewItem, InItem) == 0x000008, "Member 'OrionMcpUIUtils_ClearNewItem::InItem' has a wrong offset!");
static_assert(offsetof(OrionMcpUIUtils_ClearNewItem, ReturnValue) == 0x000010, "Member 'OrionMcpUIUtils_ClearNewItem::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionMcpUIUtils.IsItemNew
// 0x0018 (0x0018 - 0x0000)
struct OrionMcpUIUtils_IsItemNew final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UOrionMcpItem*                    InItem;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionMcpUIUtils_IsItemNew) == 0x000008, "Wrong alignment on OrionMcpUIUtils_IsItemNew");
static_assert(sizeof(OrionMcpUIUtils_IsItemNew) == 0x000018, "Wrong size on OrionMcpUIUtils_IsItemNew");
static_assert(offsetof(OrionMcpUIUtils_IsItemNew, Widget) == 0x000000, "Member 'OrionMcpUIUtils_IsItemNew::Widget' has a wrong offset!");
static_assert(offsetof(OrionMcpUIUtils_IsItemNew, InItem) == 0x000008, "Member 'OrionMcpUIUtils_IsItemNew::InItem' has a wrong offset!");
static_assert(offsetof(OrionMcpUIUtils_IsItemNew, ReturnValue) == 0x000010, "Member 'OrionMcpUIUtils_IsItemNew::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionMilestoneRewardCarousel.OnPipClicked
// 0x0004 (0x0004 - 0x0000)
struct OrionMilestoneRewardCarousel_OnPipClicked final
{
public:
	int32                                         PipIdx;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionMilestoneRewardCarousel_OnPipClicked) == 0x000004, "Wrong alignment on OrionMilestoneRewardCarousel_OnPipClicked");
static_assert(sizeof(OrionMilestoneRewardCarousel_OnPipClicked) == 0x000004, "Wrong size on OrionMilestoneRewardCarousel_OnPipClicked");
static_assert(offsetof(OrionMilestoneRewardCarousel_OnPipClicked, PipIdx) == 0x000000, "Member 'OrionMilestoneRewardCarousel_OnPipClicked::PipIdx' has a wrong offset!");

// Function OrionUI.OrionNewCardsUpdatePopup.GetMasteryChestCount
// 0x0004 (0x0004 - 0x0000)
struct OrionNewCardsUpdatePopup_GetMasteryChestCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionNewCardsUpdatePopup_GetMasteryChestCount) == 0x000004, "Wrong alignment on OrionNewCardsUpdatePopup_GetMasteryChestCount");
static_assert(sizeof(OrionNewCardsUpdatePopup_GetMasteryChestCount) == 0x000004, "Wrong size on OrionNewCardsUpdatePopup_GetMasteryChestCount");
static_assert(offsetof(OrionNewCardsUpdatePopup_GetMasteryChestCount, ReturnValue) == 0x000000, "Member 'OrionNewCardsUpdatePopup_GetMasteryChestCount::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionNumberPicker.OnValueChanged_BP
// 0x0008 (0x0008 - 0x0000)
struct OrionNumberPicker_OnValueChanged_BP final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreased;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionNumberPicker_OnValueChanged_BP) == 0x000004, "Wrong alignment on OrionNumberPicker_OnValueChanged_BP");
static_assert(sizeof(OrionNumberPicker_OnValueChanged_BP) == 0x000008, "Wrong size on OrionNumberPicker_OnValueChanged_BP");
static_assert(offsetof(OrionNumberPicker_OnValueChanged_BP, NewValue) == 0x000000, "Member 'OrionNumberPicker_OnValueChanged_BP::NewValue' has a wrong offset!");
static_assert(offsetof(OrionNumberPicker_OnValueChanged_BP, bIncreased) == 0x000004, "Member 'OrionNumberPicker_OnValueChanged_BP::bIncreased' has a wrong offset!");

// Function OrionUI.OrionNumberPicker.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct OrionNumberPicker_GetCurrentValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionNumberPicker_GetCurrentValue) == 0x000004, "Wrong alignment on OrionNumberPicker_GetCurrentValue");
static_assert(sizeof(OrionNumberPicker_GetCurrentValue) == 0x000004, "Wrong size on OrionNumberPicker_GetCurrentValue");
static_assert(offsetof(OrionNumberPicker_GetCurrentValue, ReturnValue) == 0x000000, "Member 'OrionNumberPicker_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionPackOpenScreen_Chests.OnLargeRewardCount
// 0x0001 (0x0001 - 0x0000)
struct OrionPackOpenScreen_Chests_OnLargeRewardCount final
{
public:
	bool                                          bUseLargeRewardBox;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPackOpenScreen_Chests_OnLargeRewardCount) == 0x000001, "Wrong alignment on OrionPackOpenScreen_Chests_OnLargeRewardCount");
static_assert(sizeof(OrionPackOpenScreen_Chests_OnLargeRewardCount) == 0x000001, "Wrong size on OrionPackOpenScreen_Chests_OnLargeRewardCount");
static_assert(offsetof(OrionPackOpenScreen_Chests_OnLargeRewardCount, bUseLargeRewardBox) == 0x000000, "Member 'OrionPackOpenScreen_Chests_OnLargeRewardCount::bUseLargeRewardBox' has a wrong offset!");

// Function OrionUI.OrionPlayerActionPrompt.DynamicHandlePlayerDeath
// 0x0068 (0x0068 - 0x0000)
struct OrionPlayerActionPrompt_DynamicHandlePlayerDeath final
{
public:
	struct FOrionHUDTeamStatusInfo                NewTeamInfo;                                       // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPlayerActionPrompt_DynamicHandlePlayerDeath) == 0x000008, "Wrong alignment on OrionPlayerActionPrompt_DynamicHandlePlayerDeath");
static_assert(sizeof(OrionPlayerActionPrompt_DynamicHandlePlayerDeath) == 0x000068, "Wrong size on OrionPlayerActionPrompt_DynamicHandlePlayerDeath");
static_assert(offsetof(OrionPlayerActionPrompt_DynamicHandlePlayerDeath, NewTeamInfo) == 0x000000, "Member 'OrionPlayerActionPrompt_DynamicHandlePlayerDeath::NewTeamInfo' has a wrong offset!");

// Function OrionUI.OrionPlayerActionPrompt.SetCallToAction
// 0x0001 (0x0001 - 0x0000)
struct OrionPlayerActionPrompt_SetCallToAction final
{
public:
	EPlayerActionPromptMessage                    ActionPrompt;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPlayerActionPrompt_SetCallToAction) == 0x000001, "Wrong alignment on OrionPlayerActionPrompt_SetCallToAction");
static_assert(sizeof(OrionPlayerActionPrompt_SetCallToAction) == 0x000001, "Wrong size on OrionPlayerActionPrompt_SetCallToAction");
static_assert(offsetof(OrionPlayerActionPrompt_SetCallToAction, ActionPrompt) == 0x000000, "Member 'OrionPlayerActionPrompt_SetCallToAction::ActionPrompt' has a wrong offset!");

// Function OrionUI.OrionPlayerRateMenu.SetMyParent
// 0x0008 (0x0008 - 0x0000)
struct OrionPlayerRateMenu_SetMyParent final
{
public:
	class UOrionSinglePlayerRating*               _NewParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPlayerRateMenu_SetMyParent) == 0x000008, "Wrong alignment on OrionPlayerRateMenu_SetMyParent");
static_assert(sizeof(OrionPlayerRateMenu_SetMyParent) == 0x000008, "Wrong size on OrionPlayerRateMenu_SetMyParent");
static_assert(offsetof(OrionPlayerRateMenu_SetMyParent, _NewParent) == 0x000000, "Member 'OrionPlayerRateMenu_SetMyParent::_NewParent' has a wrong offset!");

// Function OrionUI.OrionPlayRoot.HandleAIDifficultySelected
// 0x0001 (0x0001 - 0x0000)
struct OrionPlayRoot_HandleAIDifficultySelected final
{
public:
	EAIBotDifficulty                              SelectedDifficulty;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPlayRoot_HandleAIDifficultySelected) == 0x000001, "Wrong alignment on OrionPlayRoot_HandleAIDifficultySelected");
static_assert(sizeof(OrionPlayRoot_HandleAIDifficultySelected) == 0x000001, "Wrong size on OrionPlayRoot_HandleAIDifficultySelected");
static_assert(offsetof(OrionPlayRoot_HandleAIDifficultySelected, SelectedDifficulty) == 0x000000, "Member 'OrionPlayRoot_HandleAIDifficultySelected::SelectedDifficulty' has a wrong offset!");

// Function OrionUI.OrionPlayRoot.HandleGameTypeSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionPlayRoot_HandleGameTypeSelected final
{
public:
	class UOrionBaseButton*                       SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionPlayRoot_HandleGameTypeSelected) == 0x000008, "Wrong alignment on OrionPlayRoot_HandleGameTypeSelected");
static_assert(sizeof(OrionPlayRoot_HandleGameTypeSelected) == 0x000010, "Wrong size on OrionPlayRoot_HandleGameTypeSelected");
static_assert(offsetof(OrionPlayRoot_HandleGameTypeSelected, SelectedButton) == 0x000000, "Member 'OrionPlayRoot_HandleGameTypeSelected::SelectedButton' has a wrong offset!");
static_assert(offsetof(OrionPlayRoot_HandleGameTypeSelected, ButtonIndex) == 0x000008, "Member 'OrionPlayRoot_HandleGameTypeSelected::ButtonIndex' has a wrong offset!");

// Function OrionUI.OrionPostGameRoot.GetTabList
// 0x0008 (0x0008 - 0x0000)
struct OrionPostGameRoot_GetTabList final
{
public:
	class UOrionTabListWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPostGameRoot_GetTabList) == 0x000008, "Wrong alignment on OrionPostGameRoot_GetTabList");
static_assert(sizeof(OrionPostGameRoot_GetTabList) == 0x000008, "Wrong size on OrionPostGameRoot_GetTabList");
static_assert(offsetof(OrionPostGameRoot_GetTabList, ReturnValue) == 0x000000, "Member 'OrionPostGameRoot_GetTabList::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionPostGameRoot.OnAutomaticFlowComplete
// 0x0001 (0x0001 - 0x0000)
struct OrionPostGameRoot_OnAutomaticFlowComplete final
{
public:
	bool                                          bShowPlayerRatingCallout;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPostGameRoot_OnAutomaticFlowComplete) == 0x000001, "Wrong alignment on OrionPostGameRoot_OnAutomaticFlowComplete");
static_assert(sizeof(OrionPostGameRoot_OnAutomaticFlowComplete) == 0x000001, "Wrong size on OrionPostGameRoot_OnAutomaticFlowComplete");
static_assert(offsetof(OrionPostGameRoot_OnAutomaticFlowComplete, bShowPlayerRatingCallout) == 0x000000, "Member 'OrionPostGameRoot_OnAutomaticFlowComplete::bShowPlayerRatingCallout' has a wrong offset!");

// Function OrionUI.OrionPostGameRoot.DidPlayerWin
// 0x0001 (0x0001 - 0x0000)
struct OrionPostGameRoot_DidPlayerWin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPostGameRoot_DidPlayerWin) == 0x000001, "Wrong alignment on OrionPostGameRoot_DidPlayerWin");
static_assert(sizeof(OrionPostGameRoot_DidPlayerWin) == 0x000001, "Wrong size on OrionPostGameRoot_DidPlayerWin");
static_assert(offsetof(OrionPostGameRoot_DidPlayerWin, ReturnValue) == 0x000000, "Member 'OrionPostGameRoot_DidPlayerWin::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionPostGameRoot.GetHeroUsedInLastMatch
// 0x0008 (0x0008 - 0x0000)
struct OrionPostGameRoot_GetHeroUsedInLastMatch final
{
public:
	class UOrionHeroData*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPostGameRoot_GetHeroUsedInLastMatch) == 0x000008, "Wrong alignment on OrionPostGameRoot_GetHeroUsedInLastMatch");
static_assert(sizeof(OrionPostGameRoot_GetHeroUsedInLastMatch) == 0x000008, "Wrong size on OrionPostGameRoot_GetHeroUsedInLastMatch");
static_assert(offsetof(OrionPostGameRoot_GetHeroUsedInLastMatch, ReturnValue) == 0x000000, "Member 'OrionPostGameRoot_GetHeroUsedInLastMatch::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionProgressiveRewardProgress.OnNextRewardReached
// 0x0008 (0x0008 - 0x0000)
struct OrionProgressiveRewardProgress_OnNextRewardReached final
{
public:
	const class UOrionRewardProgressBar*          ActiveProgressBar_0;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionProgressiveRewardProgress_OnNextRewardReached) == 0x000008, "Wrong alignment on OrionProgressiveRewardProgress_OnNextRewardReached");
static_assert(sizeof(OrionProgressiveRewardProgress_OnNextRewardReached) == 0x000008, "Wrong size on OrionProgressiveRewardProgress_OnNextRewardReached");
static_assert(offsetof(OrionProgressiveRewardProgress_OnNextRewardReached, ActiveProgressBar_0) == 0x000000, "Member 'OrionProgressiveRewardProgress_OnNextRewardReached::ActiveProgressBar_0' has a wrong offset!");

// Function OrionUI.OrionPurchaseConfirmationWidget.DynamicHandleIconLoadingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionPurchaseConfirmationWidget_DynamicHandleIconLoadingStateChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPurchaseConfirmationWidget_DynamicHandleIconLoadingStateChanged) == 0x000001, "Wrong alignment on OrionPurchaseConfirmationWidget_DynamicHandleIconLoadingStateChanged");
static_assert(sizeof(OrionPurchaseConfirmationWidget_DynamicHandleIconLoadingStateChanged) == 0x000001, "Wrong size on OrionPurchaseConfirmationWidget_DynamicHandleIconLoadingStateChanged");
static_assert(offsetof(OrionPurchaseConfirmationWidget_DynamicHandleIconLoadingStateChanged, bIsLoading) == 0x000000, "Member 'OrionPurchaseConfirmationWidget_DynamicHandleIconLoadingStateChanged::bIsLoading' has a wrong offset!");

// Function OrionUI.OrionPurchaseConfirmationWidget.OnPurchaseComplete
// 0x0001 (0x0001 - 0x0000)
struct OrionPurchaseConfirmationWidget_OnPurchaseComplete final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionPurchaseConfirmationWidget_OnPurchaseComplete) == 0x000001, "Wrong alignment on OrionPurchaseConfirmationWidget_OnPurchaseComplete");
static_assert(sizeof(OrionPurchaseConfirmationWidget_OnPurchaseComplete) == 0x000001, "Wrong size on OrionPurchaseConfirmationWidget_OnPurchaseComplete");
static_assert(offsetof(OrionPurchaseConfirmationWidget_OnPurchaseComplete, bSuccessful) == 0x000000, "Member 'OrionPurchaseConfirmationWidget_OnPurchaseComplete::bSuccessful' has a wrong offset!");

// Function OrionUI.OrionQuestLog.OnLocalHeroDeath
// 0x0068 (0x0068 - 0x0000)
struct OrionQuestLog_OnLocalHeroDeath final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionQuestLog_OnLocalHeroDeath) == 0x000008, "Wrong alignment on OrionQuestLog_OnLocalHeroDeath");
static_assert(sizeof(OrionQuestLog_OnLocalHeroDeath) == 0x000068, "Wrong size on OrionQuestLog_OnLocalHeroDeath");
static_assert(offsetof(OrionQuestLog_OnLocalHeroDeath, UpdatedTeamInfo) == 0x000000, "Member 'OrionQuestLog_OnLocalHeroDeath::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionQuestLog.OnLocalHeroSpawn
// 0x0068 (0x0068 - 0x0000)
struct OrionQuestLog_OnLocalHeroSpawn final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionQuestLog_OnLocalHeroSpawn) == 0x000008, "Wrong alignment on OrionQuestLog_OnLocalHeroSpawn");
static_assert(sizeof(OrionQuestLog_OnLocalHeroSpawn) == 0x000068, "Wrong size on OrionQuestLog_OnLocalHeroSpawn");
static_assert(offsetof(OrionQuestLog_OnLocalHeroSpawn, UpdatedTeamInfo) == 0x000000, "Member 'OrionQuestLog_OnLocalHeroSpawn::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionReachRewardWidgetBase.DynamicHandleGiftBoxOpened
// 0x0050 (0x0050 - 0x0000)
struct OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened final
{
public:
	struct FOrionLootNotification                 LootNotification;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShowFanfare;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened) == 0x000008, "Wrong alignment on OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened");
static_assert(sizeof(OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened) == 0x000050, "Wrong size on OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened");
static_assert(offsetof(OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened, LootNotification) == 0x000000, "Member 'OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened::LootNotification' has a wrong offset!");
static_assert(offsetof(OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened, bShowFanfare) == 0x000048, "Member 'OrionReachRewardWidgetBase_DynamicHandleGiftBoxOpened::bShowFanfare' has a wrong offset!");

// Function OrionUI.OrionReachRewardWidgetBase.OnChestDataSet
// 0x0004 (0x0004 - 0x0000)
struct OrionReachRewardWidgetBase_OnChestDataSet final
{
public:
	bool                                          bComplete;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanClaim;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldShowStars;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReachRewardWidgetBase_OnChestDataSet) == 0x000001, "Wrong alignment on OrionReachRewardWidgetBase_OnChestDataSet");
static_assert(sizeof(OrionReachRewardWidgetBase_OnChestDataSet) == 0x000004, "Wrong size on OrionReachRewardWidgetBase_OnChestDataSet");
static_assert(offsetof(OrionReachRewardWidgetBase_OnChestDataSet, bComplete) == 0x000000, "Member 'OrionReachRewardWidgetBase_OnChestDataSet::bComplete' has a wrong offset!");
static_assert(offsetof(OrionReachRewardWidgetBase_OnChestDataSet, bCanClaim) == 0x000001, "Member 'OrionReachRewardWidgetBase_OnChestDataSet::bCanClaim' has a wrong offset!");
static_assert(offsetof(OrionReachRewardWidgetBase_OnChestDataSet, bInitial) == 0x000002, "Member 'OrionReachRewardWidgetBase_OnChestDataSet::bInitial' has a wrong offset!");
static_assert(offsetof(OrionReachRewardWidgetBase_OnChestDataSet, bShouldShowStars) == 0x000003, "Member 'OrionReachRewardWidgetBase_OnChestDataSet::bShouldShowStars' has a wrong offset!");

// Function OrionUI.OrionRefineGemScreen.SetGemToRefine
// 0x0010 (0x0010 - 0x0000)
struct OrionRefineGemScreen_SetGemToRefine final
{
public:
	const class UOrionMcpGemItem*                 GemToRefine;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionCardInspectScreen*                InCardInspectScreen;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRefineGemScreen_SetGemToRefine) == 0x000008, "Wrong alignment on OrionRefineGemScreen_SetGemToRefine");
static_assert(sizeof(OrionRefineGemScreen_SetGemToRefine) == 0x000010, "Wrong size on OrionRefineGemScreen_SetGemToRefine");
static_assert(offsetof(OrionRefineGemScreen_SetGemToRefine, GemToRefine) == 0x000000, "Member 'OrionRefineGemScreen_SetGemToRefine::GemToRefine' has a wrong offset!");
static_assert(offsetof(OrionRefineGemScreen_SetGemToRefine, InCardInspectScreen) == 0x000008, "Member 'OrionRefineGemScreen_SetGemToRefine::InCardInspectScreen' has a wrong offset!");

// Function OrionUI.OrionRegionListScreen.DynamicHandleItemSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionRegionListScreen_DynamicHandleItemSelected final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionRegionListScreen_DynamicHandleItemSelected) == 0x000008, "Wrong alignment on OrionRegionListScreen_DynamicHandleItemSelected");
static_assert(sizeof(OrionRegionListScreen_DynamicHandleItemSelected) == 0x000010, "Wrong size on OrionRegionListScreen_DynamicHandleItemSelected");
static_assert(offsetof(OrionRegionListScreen_DynamicHandleItemSelected, Item) == 0x000000, "Member 'OrionRegionListScreen_DynamicHandleItemSelected::Item' has a wrong offset!");
static_assert(offsetof(OrionRegionListScreen_DynamicHandleItemSelected, bIsSelected) == 0x000008, "Member 'OrionRegionListScreen_DynamicHandleItemSelected::bIsSelected' has a wrong offset!");

// Function OrionUI.OrionRespawnTimerHeroIconWidget.SetCountdownText
// 0x0004 (0x0004 - 0x0000)
struct OrionRespawnTimerHeroIconWidget_SetCountdownText final
{
public:
	float                                         SecondsRemaining;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRespawnTimerHeroIconWidget_SetCountdownText) == 0x000004, "Wrong alignment on OrionRespawnTimerHeroIconWidget_SetCountdownText");
static_assert(sizeof(OrionRespawnTimerHeroIconWidget_SetCountdownText) == 0x000004, "Wrong size on OrionRespawnTimerHeroIconWidget_SetCountdownText");
static_assert(offsetof(OrionRespawnTimerHeroIconWidget_SetCountdownText, SecondsRemaining) == 0x000000, "Member 'OrionRespawnTimerHeroIconWidget_SetCountdownText::SecondsRemaining' has a wrong offset!");

// Function OrionUI.OrionRespawnTimerHeroIconWidget.SetHeroIcon
// 0x0008 (0x0008 - 0x0000)
struct OrionRespawnTimerHeroIconWidget_SetHeroIcon final
{
public:
	class UTexture2D*                             HeroIconTexture;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRespawnTimerHeroIconWidget_SetHeroIcon) == 0x000008, "Wrong alignment on OrionRespawnTimerHeroIconWidget_SetHeroIcon");
static_assert(sizeof(OrionRespawnTimerHeroIconWidget_SetHeroIcon) == 0x000008, "Wrong size on OrionRespawnTimerHeroIconWidget_SetHeroIcon");
static_assert(offsetof(OrionRespawnTimerHeroIconWidget_SetHeroIcon, HeroIconTexture) == 0x000000, "Member 'OrionRespawnTimerHeroIconWidget_SetHeroIcon::HeroIconTexture' has a wrong offset!");

// Function OrionUI.OrionRespawnTimerHeroIconWidget.SetIsFriendly
// 0x0001 (0x0001 - 0x0000)
struct OrionRespawnTimerHeroIconWidget_SetIsFriendly final
{
public:
	bool                                          bIsFriendly;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRespawnTimerHeroIconWidget_SetIsFriendly) == 0x000001, "Wrong alignment on OrionRespawnTimerHeroIconWidget_SetIsFriendly");
static_assert(sizeof(OrionRespawnTimerHeroIconWidget_SetIsFriendly) == 0x000001, "Wrong size on OrionRespawnTimerHeroIconWidget_SetIsFriendly");
static_assert(offsetof(OrionRespawnTimerHeroIconWidget_SetIsFriendly, bIsFriendly) == 0x000000, "Member 'OrionRespawnTimerHeroIconWidget_SetIsFriendly::bIsFriendly' has a wrong offset!");

// Function OrionUI.OrionReticleContainer.OnAddedNewReticle
// 0x0008 (0x0008 - 0x0000)
struct OrionReticleContainer_OnAddedNewReticle final
{
public:
	class UOrionUserWidget_Reticle*               NewReticleWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReticleContainer_OnAddedNewReticle) == 0x000008, "Wrong alignment on OrionReticleContainer_OnAddedNewReticle");
static_assert(sizeof(OrionReticleContainer_OnAddedNewReticle) == 0x000008, "Wrong size on OrionReticleContainer_OnAddedNewReticle");
static_assert(offsetof(OrionReticleContainer_OnAddedNewReticle, NewReticleWidget) == 0x000000, "Member 'OrionReticleContainer_OnAddedNewReticle::NewReticleWidget' has a wrong offset!");

// Function OrionUI.OrionReticleContainer.SetupDefaultReticle
// 0x0008 (0x0008 - 0x0000)
struct OrionReticleContainer_SetupDefaultReticle final
{
public:
	TSubclassOf<class UOrionUserWidget_Reticle>   ReticleClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionReticleContainer_SetupDefaultReticle) == 0x000008, "Wrong alignment on OrionReticleContainer_SetupDefaultReticle");
static_assert(sizeof(OrionReticleContainer_SetupDefaultReticle) == 0x000008, "Wrong size on OrionReticleContainer_SetupDefaultReticle");
static_assert(offsetof(OrionReticleContainer_SetupDefaultReticle, ReticleClass) == 0x000000, "Member 'OrionReticleContainer_SetupDefaultReticle::ReticleClass' has a wrong offset!");

// Function OrionUI.OrionProgressCompletionReward.OnRewardEarned
// 0x0001 (0x0001 - 0x0000)
struct OrionProgressCompletionReward_OnRewardEarned final
{
public:
	bool                                          bImmediate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionProgressCompletionReward_OnRewardEarned) == 0x000001, "Wrong alignment on OrionProgressCompletionReward_OnRewardEarned");
static_assert(sizeof(OrionProgressCompletionReward_OnRewardEarned) == 0x000001, "Wrong size on OrionProgressCompletionReward_OnRewardEarned");
static_assert(offsetof(OrionProgressCompletionReward_OnRewardEarned, bImmediate) == 0x000000, "Member 'OrionProgressCompletionReward_OnRewardEarned::bImmediate' has a wrong offset!");

// Function OrionUI.OrionProgressCompletionReward.SetCompletedState
// 0x0001 (0x0001 - 0x0000)
struct OrionProgressCompletionReward_SetCompletedState final
{
public:
	bool                                          bIsCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionProgressCompletionReward_SetCompletedState) == 0x000001, "Wrong alignment on OrionProgressCompletionReward_SetCompletedState");
static_assert(sizeof(OrionProgressCompletionReward_SetCompletedState) == 0x000001, "Wrong size on OrionProgressCompletionReward_SetCompletedState");
static_assert(offsetof(OrionProgressCompletionReward_SetCompletedState, bIsCompleted) == 0x000000, "Member 'OrionProgressCompletionReward_SetCompletedState::bIsCompleted' has a wrong offset!");

// Function OrionUI.OrionRewardProgressWidget.OnNextChestReached
// 0x0008 (0x0008 - 0x0000)
struct OrionRewardProgressWidget_OnNextChestReached final
{
public:
	const class UOrionRewardProgressBar*          ActiveProgressBar;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRewardProgressWidget_OnNextChestReached) == 0x000008, "Wrong alignment on OrionRewardProgressWidget_OnNextChestReached");
static_assert(sizeof(OrionRewardProgressWidget_OnNextChestReached) == 0x000008, "Wrong size on OrionRewardProgressWidget_OnNextChestReached");
static_assert(offsetof(OrionRewardProgressWidget_OnNextChestReached, ActiveProgressBar) == 0x000000, "Member 'OrionRewardProgressWidget_OnNextChestReached::ActiveProgressBar' has a wrong offset!");

// Function OrionUI.OrionRollingTextWidget.ChangeState
// 0x0001 (0x0001 - 0x0000)
struct OrionRollingTextWidget_ChangeState final
{
public:
	ERollingTextWidgetState                       NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionRollingTextWidget_ChangeState) == 0x000001, "Wrong alignment on OrionRollingTextWidget_ChangeState");
static_assert(sizeof(OrionRollingTextWidget_ChangeState) == 0x000001, "Wrong size on OrionRollingTextWidget_ChangeState");
static_assert(offsetof(OrionRollingTextWidget_ChangeState, NewState) == 0x000000, "Member 'OrionRollingTextWidget_ChangeState::NewState' has a wrong offset!");

// Function OrionUI.OrionRollingTextWidget.RequestTextChange
// 0x0020 (0x0020 - 0x0000)
struct OrionRollingTextWidget_RequestTextChange final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionRollingTextWidget_RequestTextChange) == 0x000008, "Wrong alignment on OrionRollingTextWidget_RequestTextChange");
static_assert(sizeof(OrionRollingTextWidget_RequestTextChange) == 0x000020, "Wrong size on OrionRollingTextWidget_RequestTextChange");
static_assert(offsetof(OrionRollingTextWidget_RequestTextChange, NewText) == 0x000000, "Member 'OrionRollingTextWidget_RequestTextChange::NewText' has a wrong offset!");
static_assert(offsetof(OrionRollingTextWidget_RequestTextChange, bImmediate) == 0x000018, "Member 'OrionRollingTextWidget_RequestTextChange::bImmediate' has a wrong offset!");

// Function OrionUI.OrionScoreDisplayWidget.OnScoreDisplayEnemyTextSet
// 0x0018 (0x0018 - 0x0000)
struct OrionScoreDisplayWidget_OnScoreDisplayEnemyTextSet final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreDisplayWidget_OnScoreDisplayEnemyTextSet) == 0x000008, "Wrong alignment on OrionScoreDisplayWidget_OnScoreDisplayEnemyTextSet");
static_assert(sizeof(OrionScoreDisplayWidget_OnScoreDisplayEnemyTextSet) == 0x000018, "Wrong size on OrionScoreDisplayWidget_OnScoreDisplayEnemyTextSet");
static_assert(offsetof(OrionScoreDisplayWidget_OnScoreDisplayEnemyTextSet, NewText) == 0x000000, "Member 'OrionScoreDisplayWidget_OnScoreDisplayEnemyTextSet::NewText' has a wrong offset!");

// Function OrionUI.OrionScoreDisplayWidget.OnScoreDisplayFriendlyTextSet
// 0x0018 (0x0018 - 0x0000)
struct OrionScoreDisplayWidget_OnScoreDisplayFriendlyTextSet final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionScoreDisplayWidget_OnScoreDisplayFriendlyTextSet) == 0x000008, "Wrong alignment on OrionScoreDisplayWidget_OnScoreDisplayFriendlyTextSet");
static_assert(sizeof(OrionScoreDisplayWidget_OnScoreDisplayFriendlyTextSet) == 0x000018, "Wrong size on OrionScoreDisplayWidget_OnScoreDisplayFriendlyTextSet");
static_assert(offsetof(OrionScoreDisplayWidget_OnScoreDisplayFriendlyTextSet, NewText) == 0x000000, "Member 'OrionScoreDisplayWidget_OnScoreDisplayFriendlyTextSet::NewText' has a wrong offset!");

// Function OrionUI.OrionSkinListItem.OnSkinDefinitionSet
// 0x0008 (0x0008 - 0x0000)
struct OrionSkinListItem_OnSkinDefinitionSet final
{
public:
	class UOrionSkinItemDefinition*               Skin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSkinListItem_OnSkinDefinitionSet) == 0x000008, "Wrong alignment on OrionSkinListItem_OnSkinDefinitionSet");
static_assert(sizeof(OrionSkinListItem_OnSkinDefinitionSet) == 0x000008, "Wrong size on OrionSkinListItem_OnSkinDefinitionSet");
static_assert(offsetof(OrionSkinListItem_OnSkinDefinitionSet, Skin) == 0x000000, "Member 'OrionSkinListItem_OnSkinDefinitionSet::Skin' has a wrong offset!");

// Function OrionUI.OrionSkinListItem.IsForSale
// 0x0001 (0x0001 - 0x0000)
struct OrionSkinListItem_IsForSale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSkinListItem_IsForSale) == 0x000001, "Wrong alignment on OrionSkinListItem_IsForSale");
static_assert(sizeof(OrionSkinListItem_IsForSale) == 0x000001, "Wrong size on OrionSkinListItem_IsForSale");
static_assert(offsetof(OrionSkinListItem_IsForSale, ReturnValue) == 0x000000, "Member 'OrionSkinListItem_IsForSale::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionSkinListItem.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct OrionSkinListItem_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSkinListItem_IsOwned) == 0x000001, "Wrong alignment on OrionSkinListItem_IsOwned");
static_assert(sizeof(OrionSkinListItem_IsOwned) == 0x000001, "Wrong size on OrionSkinListItem_IsOwned");
static_assert(offsetof(OrionSkinListItem_IsOwned, ReturnValue) == 0x000000, "Member 'OrionSkinListItem_IsOwned::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionSkinListItem.IsPlayable
// 0x0001 (0x0001 - 0x0000)
struct OrionSkinListItem_IsPlayable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionSkinListItem_IsPlayable) == 0x000001, "Wrong alignment on OrionSkinListItem_IsPlayable");
static_assert(sizeof(OrionSkinListItem_IsPlayable) == 0x000001, "Wrong size on OrionSkinListItem_IsPlayable");
static_assert(offsetof(OrionSkinListItem_IsPlayable, ReturnValue) == 0x000000, "Member 'OrionSkinListItem_IsPlayable::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionStateWidget_FrontEnd.DynamicHandleGiftBoxOpened
// 0x0050 (0x0050 - 0x0000)
struct OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened final
{
public:
	struct FOrionLootNotification                 LootNotification;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShowFanfare;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened) == 0x000008, "Wrong alignment on OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened");
static_assert(sizeof(OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened) == 0x000050, "Wrong size on OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened");
static_assert(offsetof(OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened, LootNotification) == 0x000000, "Member 'OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened::LootNotification' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened, bShowFanfare) == 0x000048, "Member 'OrionStateWidget_FrontEnd_DynamicHandleGiftBoxOpened::bShowFanfare' has a wrong offset!");

// Function OrionUI.OrionStateWidget_FrontEnd.DynamicHandleVideoOnOpenFailed
// 0x0010 (0x0010 - 0x0000)
struct OrionStateWidget_FrontEnd_DynamicHandleVideoOnOpenFailed final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_FrontEnd_DynamicHandleVideoOnOpenFailed) == 0x000008, "Wrong alignment on OrionStateWidget_FrontEnd_DynamicHandleVideoOnOpenFailed");
static_assert(sizeof(OrionStateWidget_FrontEnd_DynamicHandleVideoOnOpenFailed) == 0x000010, "Wrong size on OrionStateWidget_FrontEnd_DynamicHandleVideoOnOpenFailed");
static_assert(offsetof(OrionStateWidget_FrontEnd_DynamicHandleVideoOnOpenFailed, OpenedUrl) == 0x000000, "Member 'OrionStateWidget_FrontEnd_DynamicHandleVideoOnOpenFailed::OpenedUrl' has a wrong offset!");

// Function OrionUI.OrionStateWidget_FrontEnd.OnMatchmakingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionStateWidget_FrontEnd_OnMatchmakingStateChanged final
{
public:
	EOrionPartyMatchmakingState                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_FrontEnd_OnMatchmakingStateChanged) == 0x000001, "Wrong alignment on OrionStateWidget_FrontEnd_OnMatchmakingStateChanged");
static_assert(sizeof(OrionStateWidget_FrontEnd_OnMatchmakingStateChanged) == 0x000001, "Wrong size on OrionStateWidget_FrontEnd_OnMatchmakingStateChanged");
static_assert(offsetof(OrionStateWidget_FrontEnd_OnMatchmakingStateChanged, NewState) == 0x000000, "Member 'OrionStateWidget_FrontEnd_OnMatchmakingStateChanged::NewState' has a wrong offset!");

// Function OrionUI.OrionStateWidget_FrontEnd.ShowContentFlowState
// 0x0002 (0x0002 - 0x0000)
struct OrionStateWidget_FrontEnd_ShowContentFlowState final
{
public:
	EOrionFrontEndContentFlow                     FlowState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionStateWidget_FrontEnd_ShowContentFlowState) == 0x000001, "Wrong alignment on OrionStateWidget_FrontEnd_ShowContentFlowState");
static_assert(sizeof(OrionStateWidget_FrontEnd_ShowContentFlowState) == 0x000002, "Wrong size on OrionStateWidget_FrontEnd_ShowContentFlowState");
static_assert(offsetof(OrionStateWidget_FrontEnd_ShowContentFlowState, FlowState) == 0x000000, "Member 'OrionStateWidget_FrontEnd_ShowContentFlowState::FlowState' has a wrong offset!");
static_assert(offsetof(OrionStateWidget_FrontEnd_ShowContentFlowState, ReturnValue) == 0x000001, "Member 'OrionStateWidget_FrontEnd_ShowContentFlowState::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionSurrenderWidget.OnPlayerSurrenderStatusChange
// 0x0010 (0x0010 - 0x0000)
struct OrionSurrenderWidget_OnPlayerSurrenderStatusChange final
{
public:
	const class AOrionPlayerState_Game*           PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurrenderVote                                Vote;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionSurrenderWidget_OnPlayerSurrenderStatusChange) == 0x000008, "Wrong alignment on OrionSurrenderWidget_OnPlayerSurrenderStatusChange");
static_assert(sizeof(OrionSurrenderWidget_OnPlayerSurrenderStatusChange) == 0x000010, "Wrong size on OrionSurrenderWidget_OnPlayerSurrenderStatusChange");
static_assert(offsetof(OrionSurrenderWidget_OnPlayerSurrenderStatusChange, PlayerState) == 0x000000, "Member 'OrionSurrenderWidget_OnPlayerSurrenderStatusChange::PlayerState' has a wrong offset!");
static_assert(offsetof(OrionSurrenderWidget_OnPlayerSurrenderStatusChange, Vote) == 0x000008, "Member 'OrionSurrenderWidget_OnPlayerSurrenderStatusChange::Vote' has a wrong offset!");

// Function OrionUI.OrionSurrenderWidget.OnTeamSurrenderStatusChange
// 0x0010 (0x0010 - 0x0000)
struct OrionSurrenderWidget_OnTeamSurrenderStatusChange final
{
public:
	const class AOrionTeamInfo*                   SurrenderTeam;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamSurrenderStatus                          TeamVoteStatus;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionSurrenderWidget_OnTeamSurrenderStatusChange) == 0x000008, "Wrong alignment on OrionSurrenderWidget_OnTeamSurrenderStatusChange");
static_assert(sizeof(OrionSurrenderWidget_OnTeamSurrenderStatusChange) == 0x000010, "Wrong size on OrionSurrenderWidget_OnTeamSurrenderStatusChange");
static_assert(offsetof(OrionSurrenderWidget_OnTeamSurrenderStatusChange, SurrenderTeam) == 0x000000, "Member 'OrionSurrenderWidget_OnTeamSurrenderStatusChange::SurrenderTeam' has a wrong offset!");
static_assert(offsetof(OrionSurrenderWidget_OnTeamSurrenderStatusChange, TeamVoteStatus) == 0x000008, "Member 'OrionSurrenderWidget_OnTeamSurrenderStatusChange::TeamVoteStatus' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.DisableTabWithReason
// 0x0020 (0x0020 - 0x0000)
struct OrionTabListWidget_DisableTabWithReason final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Reason;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_DisableTabWithReason) == 0x000008, "Wrong alignment on OrionTabListWidget_DisableTabWithReason");
static_assert(sizeof(OrionTabListWidget_DisableTabWithReason) == 0x000020, "Wrong size on OrionTabListWidget_DisableTabWithReason");
static_assert(offsetof(OrionTabListWidget_DisableTabWithReason, TabNameID) == 0x000000, "Member 'OrionTabListWidget_DisableTabWithReason::TabNameID' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_DisableTabWithReason, Reason) == 0x000008, "Member 'OrionTabListWidget_DisableTabWithReason::Reason' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.GetTabButtonByID
// 0x0010 (0x0010 - 0x0000)
struct OrionTabListWidget_GetTabButtonByID final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrionTabButton*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_GetTabButtonByID) == 0x000008, "Wrong alignment on OrionTabListWidget_GetTabButtonByID");
static_assert(sizeof(OrionTabListWidget_GetTabButtonByID) == 0x000010, "Wrong size on OrionTabListWidget_GetTabButtonByID");
static_assert(offsetof(OrionTabListWidget_GetTabButtonByID, TabNameID) == 0x000000, "Member 'OrionTabListWidget_GetTabButtonByID::TabNameID' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_GetTabButtonByID, ReturnValue) == 0x000008, "Member 'OrionTabListWidget_GetTabButtonByID::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.HandleTabButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct OrionTabListWidget_HandleTabButtonSelected final
{
public:
	class UOrionBaseButton*                       SelectedTabButton;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTabListWidget_HandleTabButtonSelected) == 0x000008, "Wrong alignment on OrionTabListWidget_HandleTabButtonSelected");
static_assert(sizeof(OrionTabListWidget_HandleTabButtonSelected) == 0x000010, "Wrong size on OrionTabListWidget_HandleTabButtonSelected");
static_assert(offsetof(OrionTabListWidget_HandleTabButtonSelected, SelectedTabButton) == 0x000000, "Member 'OrionTabListWidget_HandleTabButtonSelected::SelectedTabButton' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_HandleTabButtonSelected, ButtonIndex) == 0x000008, "Member 'OrionTabListWidget_HandleTabButtonSelected::ButtonIndex' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.RegisterAssetID
// 0x0068 (0x0068 - 0x0000)
struct OrionTabListWidget_RegisterAssetID final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TabName;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WidgetAssetID;                                     // 0x0020(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneName;                                         // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutorialID;                                        // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UOrionTabButton>            ButtonClass;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadNow;                                          // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTabListWidget_RegisterAssetID) == 0x000008, "Wrong alignment on OrionTabListWidget_RegisterAssetID");
static_assert(sizeof(OrionTabListWidget_RegisterAssetID) == 0x000068, "Wrong size on OrionTabListWidget_RegisterAssetID");
static_assert(offsetof(OrionTabListWidget_RegisterAssetID, TabId) == 0x000000, "Member 'OrionTabListWidget_RegisterAssetID::TabId' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterAssetID, TabName) == 0x000008, "Member 'OrionTabListWidget_RegisterAssetID::TabName' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterAssetID, WidgetAssetID) == 0x000020, "Member 'OrionTabListWidget_RegisterAssetID::WidgetAssetID' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterAssetID, SceneName) == 0x000048, "Member 'OrionTabListWidget_RegisterAssetID::SceneName' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterAssetID, TutorialID) == 0x000050, "Member 'OrionTabListWidget_RegisterAssetID::TutorialID' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterAssetID, ButtonClass) == 0x000058, "Member 'OrionTabListWidget_RegisterAssetID::ButtonClass' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterAssetID, bLoadNow) == 0x000060, "Member 'OrionTabListWidget_RegisterAssetID::bLoadNow' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.RegisterInstance
// 0x0040 (0x0040 - 0x0000)
struct OrionTabListWidget_RegisterInstance final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TabName;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UWidget*                                Widget;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneName;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutorialID;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UOrionTabButton>            ButtonClass;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_RegisterInstance) == 0x000008, "Wrong alignment on OrionTabListWidget_RegisterInstance");
static_assert(sizeof(OrionTabListWidget_RegisterInstance) == 0x000040, "Wrong size on OrionTabListWidget_RegisterInstance");
static_assert(offsetof(OrionTabListWidget_RegisterInstance, TabId) == 0x000000, "Member 'OrionTabListWidget_RegisterInstance::TabId' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstance, TabName) == 0x000008, "Member 'OrionTabListWidget_RegisterInstance::TabName' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstance, Widget) == 0x000020, "Member 'OrionTabListWidget_RegisterInstance::Widget' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstance, SceneName) == 0x000028, "Member 'OrionTabListWidget_RegisterInstance::SceneName' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstance, TutorialID) == 0x000030, "Member 'OrionTabListWidget_RegisterInstance::TutorialID' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstance, ButtonClass) == 0x000038, "Member 'OrionTabListWidget_RegisterInstance::ButtonClass' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.RegisterInstanceByIndex
// 0x0038 (0x0038 - 0x0000)
struct OrionTabListWidget_RegisterInstanceByIndex final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TabName;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         LinkedSwitcherIndex;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SceneName;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UOrionTabButton>            ButtonClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_RegisterInstanceByIndex) == 0x000008, "Wrong alignment on OrionTabListWidget_RegisterInstanceByIndex");
static_assert(sizeof(OrionTabListWidget_RegisterInstanceByIndex) == 0x000038, "Wrong size on OrionTabListWidget_RegisterInstanceByIndex");
static_assert(offsetof(OrionTabListWidget_RegisterInstanceByIndex, TabId) == 0x000000, "Member 'OrionTabListWidget_RegisterInstanceByIndex::TabId' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstanceByIndex, TabName) == 0x000008, "Member 'OrionTabListWidget_RegisterInstanceByIndex::TabName' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstanceByIndex, LinkedSwitcherIndex) == 0x000020, "Member 'OrionTabListWidget_RegisterInstanceByIndex::LinkedSwitcherIndex' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstanceByIndex, SceneName) == 0x000028, "Member 'OrionTabListWidget_RegisterInstanceByIndex::SceneName' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_RegisterInstanceByIndex, ButtonClass) == 0x000030, "Member 'OrionTabListWidget_RegisterInstanceByIndex::ButtonClass' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.SelectTabByContent
// 0x0010 (0x0010 - 0x0000)
struct OrionTabListWidget_SelectTabByContent final
{
public:
	class UWidget*                                TabContent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTabListWidget_SelectTabByContent) == 0x000008, "Wrong alignment on OrionTabListWidget_SelectTabByContent");
static_assert(sizeof(OrionTabListWidget_SelectTabByContent) == 0x000010, "Wrong size on OrionTabListWidget_SelectTabByContent");
static_assert(offsetof(OrionTabListWidget_SelectTabByContent, TabContent) == 0x000000, "Member 'OrionTabListWidget_SelectTabByContent::TabContent' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_SelectTabByContent, ReturnValue) == 0x000008, "Member 'OrionTabListWidget_SelectTabByContent::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.SelectTabByID
// 0x0010 (0x0010 - 0x0000)
struct OrionTabListWidget_SelectTabByID final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTabListWidget_SelectTabByID) == 0x000004, "Wrong alignment on OrionTabListWidget_SelectTabByID");
static_assert(sizeof(OrionTabListWidget_SelectTabByID) == 0x000010, "Wrong size on OrionTabListWidget_SelectTabByID");
static_assert(offsetof(OrionTabListWidget_SelectTabByID, TabNameID) == 0x000000, "Member 'OrionTabListWidget_SelectTabByID::TabNameID' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_SelectTabByID, ReturnValue) == 0x000008, "Member 'OrionTabListWidget_SelectTabByID::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.SetLinkedSwitcher
// 0x0008 (0x0008 - 0x0000)
struct OrionTabListWidget_SetLinkedSwitcher final
{
public:
	class UOrionWidgetSwitcher*                   OrionSwitcher;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_SetLinkedSwitcher) == 0x000008, "Wrong alignment on OrionTabListWidget_SetLinkedSwitcher");
static_assert(sizeof(OrionTabListWidget_SetLinkedSwitcher) == 0x000008, "Wrong size on OrionTabListWidget_SetLinkedSwitcher");
static_assert(offsetof(OrionTabListWidget_SetLinkedSwitcher, OrionSwitcher) == 0x000000, "Member 'OrionTabListWidget_SetLinkedSwitcher::OrionSwitcher' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.SetListeningForInput
// 0x0001 (0x0001 - 0x0000)
struct OrionTabListWidget_SetListeningForInput final
{
public:
	bool                                          bShouldListen;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_SetListeningForInput) == 0x000001, "Wrong alignment on OrionTabListWidget_SetListeningForInput");
static_assert(sizeof(OrionTabListWidget_SetListeningForInput) == 0x000001, "Wrong size on OrionTabListWidget_SetListeningForInput");
static_assert(offsetof(OrionTabListWidget_SetListeningForInput, bShouldListen) == 0x000000, "Member 'OrionTabListWidget_SetListeningForInput::bShouldListen' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.SetSelectionRequired
// 0x0002 (0x0002 - 0x0000)
struct OrionTabListWidget_SetSelectionRequired final
{
public:
	bool                                          bRequireSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearCurrentSelection;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_SetSelectionRequired) == 0x000001, "Wrong alignment on OrionTabListWidget_SetSelectionRequired");
static_assert(sizeof(OrionTabListWidget_SetSelectionRequired) == 0x000002, "Wrong size on OrionTabListWidget_SetSelectionRequired");
static_assert(offsetof(OrionTabListWidget_SetSelectionRequired, bRequireSelection) == 0x000000, "Member 'OrionTabListWidget_SetSelectionRequired::bRequireSelection' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_SetSelectionRequired, bClearCurrentSelection) == 0x000001, "Member 'OrionTabListWidget_SetSelectionRequired::bClearCurrentSelection' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.SetTabEnabled
// 0x0010 (0x0010 - 0x0000)
struct OrionTabListWidget_SetTabEnabled final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTabListWidget_SetTabEnabled) == 0x000004, "Wrong alignment on OrionTabListWidget_SetTabEnabled");
static_assert(sizeof(OrionTabListWidget_SetTabEnabled) == 0x000010, "Wrong size on OrionTabListWidget_SetTabEnabled");
static_assert(offsetof(OrionTabListWidget_SetTabEnabled, TabNameID) == 0x000000, "Member 'OrionTabListWidget_SetTabEnabled::TabNameID' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_SetTabEnabled, bEnable) == 0x000008, "Member 'OrionTabListWidget_SetTabEnabled::bEnable' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.SetTabSelectionBehavior
// 0x0001 (0x0001 - 0x0000)
struct OrionTabListWidget_SetTabSelectionBehavior final
{
public:
	EButtonSelectionBehavior                      SelectionBehavior;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_SetTabSelectionBehavior) == 0x000001, "Wrong alignment on OrionTabListWidget_SetTabSelectionBehavior");
static_assert(sizeof(OrionTabListWidget_SetTabSelectionBehavior) == 0x000001, "Wrong size on OrionTabListWidget_SetTabSelectionBehavior");
static_assert(offsetof(OrionTabListWidget_SetTabSelectionBehavior, SelectionBehavior) == 0x000000, "Member 'OrionTabListWidget_SetTabSelectionBehavior::SelectionBehavior' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.UpdateTabInputSettings
// 0x0008 (0x0008 - 0x0000)
struct OrionTabListWidget_UpdateTabInputSettings final
{
public:
	EOrionTabListType                             InListType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InInputPriority;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_UpdateTabInputSettings) == 0x000004, "Wrong alignment on OrionTabListWidget_UpdateTabInputSettings");
static_assert(sizeof(OrionTabListWidget_UpdateTabInputSettings) == 0x000008, "Wrong size on OrionTabListWidget_UpdateTabInputSettings");
static_assert(offsetof(OrionTabListWidget_UpdateTabInputSettings, InListType) == 0x000000, "Member 'OrionTabListWidget_UpdateTabInputSettings::InListType' has a wrong offset!");
static_assert(offsetof(OrionTabListWidget_UpdateTabInputSettings, InInputPriority) == 0x000004, "Member 'OrionTabListWidget_UpdateTabInputSettings::InInputPriority' has a wrong offset!");

// Function OrionUI.OrionTabListWidget.GetActiveTab
// 0x0008 (0x0008 - 0x0000)
struct OrionTabListWidget_GetActiveTab final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTabListWidget_GetActiveTab) == 0x000004, "Wrong alignment on OrionTabListWidget_GetActiveTab");
static_assert(sizeof(OrionTabListWidget_GetActiveTab) == 0x000008, "Wrong size on OrionTabListWidget_GetActiveTab");
static_assert(offsetof(OrionTabListWidget_GetActiveTab, ReturnValue) == 0x000000, "Member 'OrionTabListWidget_GetActiveTab::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnPlayerConnectionChange
// 0x0001 (0x0001 - 0x0000)
struct OrionTeamFramePlayer_OnPlayerConnectionChange final
{
public:
	bool                                          bIsPlayerDisconnected;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnPlayerConnectionChange) == 0x000001, "Wrong alignment on OrionTeamFramePlayer_OnPlayerConnectionChange");
static_assert(sizeof(OrionTeamFramePlayer_OnPlayerConnectionChange) == 0x000001, "Wrong size on OrionTeamFramePlayer_OnPlayerConnectionChange");
static_assert(offsetof(OrionTeamFramePlayer_OnPlayerConnectionChange, bIsPlayerDisconnected) == 0x000000, "Member 'OrionTeamFramePlayer_OnPlayerConnectionChange::bIsPlayerDisconnected' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnPlayerCriticalChange
// 0x0001 (0x0001 - 0x0000)
struct OrionTeamFramePlayer_OnPlayerCriticalChange final
{
public:
	bool                                          bIsPlayerCritical;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnPlayerCriticalChange) == 0x000001, "Wrong alignment on OrionTeamFramePlayer_OnPlayerCriticalChange");
static_assert(sizeof(OrionTeamFramePlayer_OnPlayerCriticalChange) == 0x000001, "Wrong size on OrionTeamFramePlayer_OnPlayerCriticalChange");
static_assert(offsetof(OrionTeamFramePlayer_OnPlayerCriticalChange, bIsPlayerCritical) == 0x000000, "Member 'OrionTeamFramePlayer_OnPlayerCriticalChange::bIsPlayerCritical' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnPlayerLifeChange
// 0x0001 (0x0001 - 0x0000)
struct OrionTeamFramePlayer_OnPlayerLifeChange final
{
public:
	bool                                          bIsNowDead;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnPlayerLifeChange) == 0x000001, "Wrong alignment on OrionTeamFramePlayer_OnPlayerLifeChange");
static_assert(sizeof(OrionTeamFramePlayer_OnPlayerLifeChange) == 0x000001, "Wrong size on OrionTeamFramePlayer_OnPlayerLifeChange");
static_assert(offsetof(OrionTeamFramePlayer_OnPlayerLifeChange, bIsNowDead) == 0x000000, "Member 'OrionTeamFramePlayer_OnPlayerLifeChange::bIsNowDead' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnSetEnergy
// 0x0004 (0x0004 - 0x0000)
struct OrionTeamFramePlayer_OnSetEnergy final
{
public:
	float                                         EnergyPercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnSetEnergy) == 0x000004, "Wrong alignment on OrionTeamFramePlayer_OnSetEnergy");
static_assert(sizeof(OrionTeamFramePlayer_OnSetEnergy) == 0x000004, "Wrong size on OrionTeamFramePlayer_OnSetEnergy");
static_assert(offsetof(OrionTeamFramePlayer_OnSetEnergy, EnergyPercent) == 0x000000, "Member 'OrionTeamFramePlayer_OnSetEnergy::EnergyPercent' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnSetHealth
// 0x0004 (0x0004 - 0x0000)
struct OrionTeamFramePlayer_OnSetHealth final
{
public:
	float                                         HealthPercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnSetHealth) == 0x000004, "Wrong alignment on OrionTeamFramePlayer_OnSetHealth");
static_assert(sizeof(OrionTeamFramePlayer_OnSetHealth) == 0x000004, "Wrong size on OrionTeamFramePlayer_OnSetHealth");
static_assert(offsetof(OrionTeamFramePlayer_OnSetHealth, HealthPercent) == 0x000000, "Member 'OrionTeamFramePlayer_OnSetHealth::HealthPercent' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnSetPlayerState
// 0x0002 (0x0002 - 0x0000)
struct OrionTeamFramePlayer_OnSetPlayerState final
{
public:
	bool                                          bIsFriendly;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnSetPlayerState) == 0x000001, "Wrong alignment on OrionTeamFramePlayer_OnSetPlayerState");
static_assert(sizeof(OrionTeamFramePlayer_OnSetPlayerState) == 0x000002, "Wrong size on OrionTeamFramePlayer_OnSetPlayerState");
static_assert(offsetof(OrionTeamFramePlayer_OnSetPlayerState, bIsFriendly) == 0x000000, "Member 'OrionTeamFramePlayer_OnSetPlayerState::bIsFriendly' has a wrong offset!");
static_assert(offsetof(OrionTeamFramePlayer_OnSetPlayerState, bIsLocalPlayer) == 0x000001, "Member 'OrionTeamFramePlayer_OnSetPlayerState::bIsLocalPlayer' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnUltReadyChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionTeamFramePlayer_OnUltReadyChanged final
{
public:
	bool                                          bIsNowReady;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnUltReadyChanged) == 0x000001, "Wrong alignment on OrionTeamFramePlayer_OnUltReadyChanged");
static_assert(sizeof(OrionTeamFramePlayer_OnUltReadyChanged) == 0x000001, "Wrong size on OrionTeamFramePlayer_OnUltReadyChanged");
static_assert(offsetof(OrionTeamFramePlayer_OnUltReadyChanged, bIsNowReady) == 0x000000, "Member 'OrionTeamFramePlayer_OnUltReadyChanged::bIsNowReady' has a wrong offset!");

// Function OrionUI.OrionTeamFramePlayer.OnVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct OrionTeamFramePlayer_OnVisibilityChanged final
{
public:
	bool                                          bIsNowFrozen;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTeamFramePlayer_OnVisibilityChanged) == 0x000001, "Wrong alignment on OrionTeamFramePlayer_OnVisibilityChanged");
static_assert(sizeof(OrionTeamFramePlayer_OnVisibilityChanged) == 0x000001, "Wrong size on OrionTeamFramePlayer_OnVisibilityChanged");
static_assert(offsetof(OrionTeamFramePlayer_OnVisibilityChanged, bIsNowFrozen) == 0x000000, "Member 'OrionTeamFramePlayer_OnVisibilityChanged::bIsNowFrozen' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.HandleSetMinionCount
// 0x0010 (0x0010 - 0x0000)
struct OrionTowerHealthBar_HandleSetMinionCount final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinionCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTowerHealthBar_HandleSetMinionCount) == 0x000008, "Wrong alignment on OrionTowerHealthBar_HandleSetMinionCount");
static_assert(sizeof(OrionTowerHealthBar_HandleSetMinionCount) == 0x000010, "Wrong size on OrionTowerHealthBar_HandleSetMinionCount");
static_assert(offsetof(OrionTowerHealthBar_HandleSetMinionCount, Actor) == 0x000000, "Member 'OrionTowerHealthBar_HandleSetMinionCount::Actor' has a wrong offset!");
static_assert(offsetof(OrionTowerHealthBar_HandleSetMinionCount, MinionCount) == 0x000008, "Member 'OrionTowerHealthBar_HandleSetMinionCount::MinionCount' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.HandleSetPlayerTargetingTowerState
// 0x0010 (0x0010 - 0x0000)
struct OrionTowerHealthBar_HandleSetPlayerTargetingTowerState final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargeted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrionTowerHealthBar_HandleSetPlayerTargetingTowerState) == 0x000008, "Wrong alignment on OrionTowerHealthBar_HandleSetPlayerTargetingTowerState");
static_assert(sizeof(OrionTowerHealthBar_HandleSetPlayerTargetingTowerState) == 0x000010, "Wrong size on OrionTowerHealthBar_HandleSetPlayerTargetingTowerState");
static_assert(offsetof(OrionTowerHealthBar_HandleSetPlayerTargetingTowerState, Actor) == 0x000000, "Member 'OrionTowerHealthBar_HandleSetPlayerTargetingTowerState::Actor' has a wrong offset!");
static_assert(offsetof(OrionTowerHealthBar_HandleSetPlayerTargetingTowerState, bIsTargeted) == 0x000008, "Member 'OrionTowerHealthBar_HandleSetPlayerTargetingTowerState::bIsTargeted' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.HandleSetTowerHealth
// 0x0008 (0x0008 - 0x0000)
struct OrionTowerHealthBar_HandleSetTowerHealth final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTowerHealthBar_HandleSetTowerHealth) == 0x000008, "Wrong alignment on OrionTowerHealthBar_HandleSetTowerHealth");
static_assert(sizeof(OrionTowerHealthBar_HandleSetTowerHealth) == 0x000008, "Wrong size on OrionTowerHealthBar_HandleSetTowerHealth");
static_assert(offsetof(OrionTowerHealthBar_HandleSetTowerHealth, Actor) == 0x000000, "Member 'OrionTowerHealthBar_HandleSetTowerHealth::Actor' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.HandleShowTowerMeter
// 0x0008 (0x0008 - 0x0000)
struct OrionTowerHealthBar_HandleShowTowerMeter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTowerHealthBar_HandleShowTowerMeter) == 0x000008, "Wrong alignment on OrionTowerHealthBar_HandleShowTowerMeter");
static_assert(sizeof(OrionTowerHealthBar_HandleShowTowerMeter) == 0x000008, "Wrong size on OrionTowerHealthBar_HandleShowTowerMeter");
static_assert(offsetof(OrionTowerHealthBar_HandleShowTowerMeter, Actor) == 0x000000, "Member 'OrionTowerHealthBar_HandleShowTowerMeter::Actor' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.OnChangeTargetedStatus
// 0x0001 (0x0001 - 0x0000)
struct OrionTowerHealthBar_OnChangeTargetedStatus final
{
public:
	bool                                          bIsTargetingPlayer;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTowerHealthBar_OnChangeTargetedStatus) == 0x000001, "Wrong alignment on OrionTowerHealthBar_OnChangeTargetedStatus");
static_assert(sizeof(OrionTowerHealthBar_OnChangeTargetedStatus) == 0x000001, "Wrong size on OrionTowerHealthBar_OnChangeTargetedStatus");
static_assert(offsetof(OrionTowerHealthBar_OnChangeTargetedStatus, bIsTargetingPlayer) == 0x000000, "Member 'OrionTowerHealthBar_OnChangeTargetedStatus::bIsTargetingPlayer' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.OnLocalHeroDeath
// 0x0068 (0x0068 - 0x0000)
struct OrionTowerHealthBar_OnLocalHeroDeath final
{
public:
	struct FOrionHUDTeamStatusInfo                UpdatedTeamInfo;                                   // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTowerHealthBar_OnLocalHeroDeath) == 0x000008, "Wrong alignment on OrionTowerHealthBar_OnLocalHeroDeath");
static_assert(sizeof(OrionTowerHealthBar_OnLocalHeroDeath) == 0x000068, "Wrong size on OrionTowerHealthBar_OnLocalHeroDeath");
static_assert(offsetof(OrionTowerHealthBar_OnLocalHeroDeath, UpdatedTeamInfo) == 0x000000, "Member 'OrionTowerHealthBar_OnLocalHeroDeath::UpdatedTeamInfo' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.OnLowMinionWarning
// 0x0001 (0x0001 - 0x0000)
struct OrionTowerHealthBar_OnLowMinionWarning final
{
public:
	bool                                          bInWarningRange;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTowerHealthBar_OnLowMinionWarning) == 0x000001, "Wrong alignment on OrionTowerHealthBar_OnLowMinionWarning");
static_assert(sizeof(OrionTowerHealthBar_OnLowMinionWarning) == 0x000001, "Wrong size on OrionTowerHealthBar_OnLowMinionWarning");
static_assert(offsetof(OrionTowerHealthBar_OnLowMinionWarning, bInWarningRange) == 0x000000, "Member 'OrionTowerHealthBar_OnLowMinionWarning::bInWarningRange' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.OnShowMeter
// 0x0002 (0x0002 - 0x0000)
struct OrionTowerHealthBar_OnShowMeter final
{
public:
	bool                                          bIsTowerFriendly_0;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetingPlayer;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTowerHealthBar_OnShowMeter) == 0x000001, "Wrong alignment on OrionTowerHealthBar_OnShowMeter");
static_assert(sizeof(OrionTowerHealthBar_OnShowMeter) == 0x000002, "Wrong size on OrionTowerHealthBar_OnShowMeter");
static_assert(offsetof(OrionTowerHealthBar_OnShowMeter, bIsTowerFriendly_0) == 0x000000, "Member 'OrionTowerHealthBar_OnShowMeter::bIsTowerFriendly_0' has a wrong offset!");
static_assert(offsetof(OrionTowerHealthBar_OnShowMeter, bIsTargetingPlayer) == 0x000001, "Member 'OrionTowerHealthBar_OnShowMeter::bIsTargetingPlayer' has a wrong offset!");

// Function OrionUI.OrionTowerHealthBar.OnTargetTower
// 0x0001 (0x0001 - 0x0000)
struct OrionTowerHealthBar_OnTargetTower final
{
public:
	bool                                          bIsPlayerTargetingTower;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionTowerHealthBar_OnTargetTower) == 0x000001, "Wrong alignment on OrionTowerHealthBar_OnTargetTower");
static_assert(sizeof(OrionTowerHealthBar_OnTargetTower) == 0x000001, "Wrong size on OrionTowerHealthBar_OnTargetTower");
static_assert(offsetof(OrionTowerHealthBar_OnTargetTower, bIsPlayerTargetingTower) == 0x000000, "Member 'OrionTowerHealthBar_OnTargetTower::bIsPlayerTargetingTower' has a wrong offset!");

// Function OrionUI.OrionUnlockRankWidget.OnCanAffordTimeCurrency
// 0x0001 (0x0001 - 0x0000)
struct OrionUnlockRankWidget_OnCanAffordTimeCurrency final
{
public:
	bool                                          bCanAfford;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionUnlockRankWidget_OnCanAffordTimeCurrency) == 0x000001, "Wrong alignment on OrionUnlockRankWidget_OnCanAffordTimeCurrency");
static_assert(sizeof(OrionUnlockRankWidget_OnCanAffordTimeCurrency) == 0x000001, "Wrong size on OrionUnlockRankWidget_OnCanAffordTimeCurrency");
static_assert(offsetof(OrionUnlockRankWidget_OnCanAffordTimeCurrency, bCanAfford) == 0x000000, "Member 'OrionUnlockRankWidget_OnCanAffordTimeCurrency::bCanAfford' has a wrong offset!");

// Function OrionUI.OrionUnlockRankWidget.OnUnlockTypeSet
// 0x0001 (0x0001 - 0x0000)
struct OrionUnlockRankWidget_OnUnlockTypeSet final
{
public:
	EUnlockType                                   SelectedRankType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionUnlockRankWidget_OnUnlockTypeSet) == 0x000001, "Wrong alignment on OrionUnlockRankWidget_OnUnlockTypeSet");
static_assert(sizeof(OrionUnlockRankWidget_OnUnlockTypeSet) == 0x000001, "Wrong size on OrionUnlockRankWidget_OnUnlockTypeSet");
static_assert(offsetof(OrionUnlockRankWidget_OnUnlockTypeSet, SelectedRankType) == 0x000000, "Member 'OrionUnlockRankWidget_OnUnlockTypeSet::SelectedRankType' has a wrong offset!");

// Function OrionUI.OrionUnlockRankWidget.UpdatePurchaseButtons
// 0x0002 (0x0002 - 0x0000)
struct OrionUnlockRankWidget_UpdatePurchaseButtons final
{
public:
	bool                                          bShowCoins;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFreeButton;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionUnlockRankWidget_UpdatePurchaseButtons) == 0x000001, "Wrong alignment on OrionUnlockRankWidget_UpdatePurchaseButtons");
static_assert(sizeof(OrionUnlockRankWidget_UpdatePurchaseButtons) == 0x000002, "Wrong size on OrionUnlockRankWidget_UpdatePurchaseButtons");
static_assert(offsetof(OrionUnlockRankWidget_UpdatePurchaseButtons, bShowCoins) == 0x000000, "Member 'OrionUnlockRankWidget_UpdatePurchaseButtons::bShowCoins' has a wrong offset!");
static_assert(offsetof(OrionUnlockRankWidget_UpdatePurchaseButtons, bShowFreeButton) == 0x000001, "Member 'OrionUnlockRankWidget_UpdatePurchaseButtons::bShowFreeButton' has a wrong offset!");

// Function OrionUI.OrionUnlockRankWidget.GetUnlockType
// 0x0001 (0x0001 - 0x0000)
struct OrionUnlockRankWidget_GetUnlockType final
{
public:
	EUnlockType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionUnlockRankWidget_GetUnlockType) == 0x000001, "Wrong alignment on OrionUnlockRankWidget_GetUnlockType");
static_assert(sizeof(OrionUnlockRankWidget_GetUnlockType) == 0x000001, "Wrong size on OrionUnlockRankWidget_GetUnlockType");
static_assert(offsetof(OrionUnlockRankWidget_GetUnlockType, ReturnValue) == 0x000000, "Member 'OrionUnlockRankWidget_GetUnlockType::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionUserWidgetHost.GetRawContent
// 0x0008 (0x0008 - 0x0000)
struct OrionUserWidgetHost_GetRawContent final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionUserWidgetHost_GetRawContent) == 0x000008, "Wrong alignment on OrionUserWidgetHost_GetRawContent");
static_assert(sizeof(OrionUserWidgetHost_GetRawContent) == 0x000008, "Wrong size on OrionUserWidgetHost_GetRawContent");
static_assert(offsetof(OrionUserWidgetHost_GetRawContent, ReturnValue) == 0x000000, "Member 'OrionUserWidgetHost_GetRawContent::ReturnValue' has a wrong offset!");

// Function OrionUI.OrionUserWidgetHost.SetContent
// 0x0008 (0x0008 - 0x0000)
struct OrionUserWidgetHost_SetContent final
{
public:
	class UUserWidget*                            NewContent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionUserWidgetHost_SetContent) == 0x000008, "Wrong alignment on OrionUserWidgetHost_SetContent");
static_assert(sizeof(OrionUserWidgetHost_SetContent) == 0x000008, "Wrong size on OrionUserWidgetHost_SetContent");
static_assert(offsetof(OrionUserWidgetHost_SetContent, NewContent) == 0x000000, "Member 'OrionUserWidgetHost_SetContent::NewContent' has a wrong offset!");

// Function OrionUI.OrionVideoTitles.AddTitleEvent
// 0x0010 (0x0010 - 0x0000)
struct OrionVideoTitles_AddTitleEvent final
{
public:
	struct FTimespan                              Time;                                              // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoTitles_AddTitleEvent) == 0x000008, "Wrong alignment on OrionVideoTitles_AddTitleEvent");
static_assert(sizeof(OrionVideoTitles_AddTitleEvent) == 0x000010, "Wrong size on OrionVideoTitles_AddTitleEvent");
static_assert(offsetof(OrionVideoTitles_AddTitleEvent, Time) == 0x000000, "Member 'OrionVideoTitles_AddTitleEvent::Time' has a wrong offset!");
static_assert(offsetof(OrionVideoTitles_AddTitleEvent, Animation) == 0x000008, "Member 'OrionVideoTitles_AddTitleEvent::Animation' has a wrong offset!");

// Function OrionUI.OrionVideoTitles.OnTitleEvent
// 0x0010 (0x0010 - 0x0000)
struct OrionVideoTitles_OnTitleEvent final
{
public:
	struct FOrionVideoTitleEvent                  TitleEvent;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoTitles_OnTitleEvent) == 0x000008, "Wrong alignment on OrionVideoTitles_OnTitleEvent");
static_assert(sizeof(OrionVideoTitles_OnTitleEvent) == 0x000010, "Wrong size on OrionVideoTitles_OnTitleEvent");
static_assert(offsetof(OrionVideoTitles_OnTitleEvent, TitleEvent) == 0x000000, "Member 'OrionVideoTitles_OnTitleEvent::TitleEvent' has a wrong offset!");

// Function OrionUI.OrionVideoTitles.SetPlayer
// 0x0008 (0x0008 - 0x0000)
struct OrionVideoTitles_SetPlayer final
{
public:
	const class UMediaPlayer*                     InMediaPlayer;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionVideoTitles_SetPlayer) == 0x000008, "Wrong alignment on OrionVideoTitles_SetPlayer");
static_assert(sizeof(OrionVideoTitles_SetPlayer) == 0x000008, "Wrong size on OrionVideoTitles_SetPlayer");
static_assert(offsetof(OrionVideoTitles_SetPlayer, InMediaPlayer) == 0x000000, "Member 'OrionVideoTitles_SetPlayer::InMediaPlayer' has a wrong offset!");

// Function OrionUI.OrionXpAssembly.InitInHUD
// 0x0008 (0x0008 - 0x0000)
struct OrionXpAssembly_InitInHUD final
{
public:
	class UOrionBaseHUDWidget*                    InHUDWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionXpAssembly_InitInHUD) == 0x000008, "Wrong alignment on OrionXpAssembly_InitInHUD");
static_assert(sizeof(OrionXpAssembly_InitInHUD) == 0x000008, "Wrong size on OrionXpAssembly_InitInHUD");
static_assert(offsetof(OrionXpAssembly_InitInHUD, InHUDWidget) == 0x000000, "Member 'OrionXpAssembly_InitInHUD::InHUDWidget' has a wrong offset!");

// Function OrionUI.OrionXpAssembly.OnCardPointsUpdate
// 0x0008 (0x0008 - 0x0000)
struct OrionXpAssembly_OnCardPointsUpdate final
{
public:
	int32                                         NewCardPointsSpent;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCardPointsMax;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionXpAssembly_OnCardPointsUpdate) == 0x000004, "Wrong alignment on OrionXpAssembly_OnCardPointsUpdate");
static_assert(sizeof(OrionXpAssembly_OnCardPointsUpdate) == 0x000008, "Wrong size on OrionXpAssembly_OnCardPointsUpdate");
static_assert(offsetof(OrionXpAssembly_OnCardPointsUpdate, NewCardPointsSpent) == 0x000000, "Member 'OrionXpAssembly_OnCardPointsUpdate::NewCardPointsSpent' has a wrong offset!");
static_assert(offsetof(OrionXpAssembly_OnCardPointsUpdate, NewCardPointsMax) == 0x000004, "Member 'OrionXpAssembly_OnCardPointsUpdate::NewCardPointsMax' has a wrong offset!");

// Function OrionUI.OrionXpAssembly.OnCardXPUpdate
// 0x0008 (0x0008 - 0x0000)
struct OrionXpAssembly_OnCardXPUpdate final
{
public:
	float                                         XP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxXP;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionXpAssembly_OnCardXPUpdate) == 0x000004, "Wrong alignment on OrionXpAssembly_OnCardXPUpdate");
static_assert(sizeof(OrionXpAssembly_OnCardXPUpdate) == 0x000008, "Wrong size on OrionXpAssembly_OnCardXPUpdate");
static_assert(offsetof(OrionXpAssembly_OnCardXPUpdate, XP) == 0x000000, "Member 'OrionXpAssembly_OnCardXPUpdate::XP' has a wrong offset!");
static_assert(offsetof(OrionXpAssembly_OnCardXPUpdate, MaxXP) == 0x000004, "Member 'OrionXpAssembly_OnCardXPUpdate::MaxXP' has a wrong offset!");

// Function OrionUI.OrionXpAssembly.OnPlayerLevelUp
// 0x0004 (0x0004 - 0x0000)
struct OrionXpAssembly_OnPlayerLevelUp final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionXpAssembly_OnPlayerLevelUp) == 0x000004, "Wrong alignment on OrionXpAssembly_OnPlayerLevelUp");
static_assert(sizeof(OrionXpAssembly_OnPlayerLevelUp) == 0x000004, "Wrong size on OrionXpAssembly_OnPlayerLevelUp");
static_assert(offsetof(OrionXpAssembly_OnPlayerLevelUp, NewLevel) == 0x000000, "Member 'OrionXpAssembly_OnPlayerLevelUp::NewLevel' has a wrong offset!");

// Function OrionUI.OrionXpAssembly.OnPlayerXPUpdate
// 0x0008 (0x0008 - 0x0000)
struct OrionXpAssembly_OnPlayerXPUpdate final
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxXP;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrionXpAssembly_OnPlayerXPUpdate) == 0x000004, "Wrong alignment on OrionXpAssembly_OnPlayerXPUpdate");
static_assert(sizeof(OrionXpAssembly_OnPlayerXPUpdate) == 0x000008, "Wrong size on OrionXpAssembly_OnPlayerXPUpdate");
static_assert(offsetof(OrionXpAssembly_OnPlayerXPUpdate, XP) == 0x000000, "Member 'OrionXpAssembly_OnPlayerXPUpdate::XP' has a wrong offset!");
static_assert(offsetof(OrionXpAssembly_OnPlayerXPUpdate, MaxXP) == 0x000004, "Member 'OrionXpAssembly_OnPlayerXPUpdate::MaxXP' has a wrong offset!");

// Function OrionUI.OutlinePanel.AddChildToOutline
// 0x0010 (0x0010 - 0x0000)
struct OutlinePanel_AddChildToOutline final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutlinePanel_AddChildToOutline) == 0x000008, "Wrong alignment on OutlinePanel_AddChildToOutline");
static_assert(sizeof(OutlinePanel_AddChildToOutline) == 0x000010, "Wrong size on OutlinePanel_AddChildToOutline");
static_assert(offsetof(OutlinePanel_AddChildToOutline, Content) == 0x000000, "Member 'OutlinePanel_AddChildToOutline::Content' has a wrong offset!");
static_assert(offsetof(OutlinePanel_AddChildToOutline, ReturnValue) == 0x000008, "Member 'OutlinePanel_AddChildToOutline::ReturnValue' has a wrong offset!");

// Function OrionUI.OutlinePanel.SetOutlineSize
// 0x0010 (0x0010 - 0x0000)
struct OutlinePanel_SetOutlineSize final
{
public:
	struct FMargin                                InOutlineSize;                                     // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutlinePanel_SetOutlineSize) == 0x000004, "Wrong alignment on OutlinePanel_SetOutlineSize");
static_assert(sizeof(OutlinePanel_SetOutlineSize) == 0x000010, "Wrong size on OutlinePanel_SetOutlineSize");
static_assert(offsetof(OutlinePanel_SetOutlineSize, InOutlineSize) == 0x000000, "Member 'OutlinePanel_SetOutlineSize::InOutlineSize' has a wrong offset!");

// Function OrionUI.PageView.DynamicOnItemClicked
// 0x0008 (0x0008 - 0x0000)
struct PageView_DynamicOnItemClicked final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageView_DynamicOnItemClicked) == 0x000008, "Wrong alignment on PageView_DynamicOnItemClicked");
static_assert(sizeof(PageView_DynamicOnItemClicked) == 0x000008, "Wrong size on PageView_DynamicOnItemClicked");
static_assert(offsetof(PageView_DynamicOnItemClicked, Widget) == 0x000000, "Member 'PageView_DynamicOnItemClicked::Widget' has a wrong offset!");

// Function OrionUI.PageView.DynamicOnItemHover
// 0x0010 (0x0010 - 0x0000)
struct PageView_DynamicOnItemHover final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnused;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PageView_DynamicOnItemHover) == 0x000008, "Wrong alignment on PageView_DynamicOnItemHover");
static_assert(sizeof(PageView_DynamicOnItemHover) == 0x000010, "Wrong size on PageView_DynamicOnItemHover");
static_assert(offsetof(PageView_DynamicOnItemHover, Widget) == 0x000000, "Member 'PageView_DynamicOnItemHover::Widget' has a wrong offset!");
static_assert(offsetof(PageView_DynamicOnItemHover, bUnused) == 0x000008, "Member 'PageView_DynamicOnItemHover::bUnused' has a wrong offset!");

// Function OrionUI.PageView.DynamicOnItemSelected
// 0x0010 (0x0010 - 0x0000)
struct PageView_DynamicOnItemSelected final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PageView_DynamicOnItemSelected) == 0x000008, "Wrong alignment on PageView_DynamicOnItemSelected");
static_assert(sizeof(PageView_DynamicOnItemSelected) == 0x000010, "Wrong size on PageView_DynamicOnItemSelected");
static_assert(offsetof(PageView_DynamicOnItemSelected, Widget) == 0x000000, "Member 'PageView_DynamicOnItemSelected::Widget' has a wrong offset!");
static_assert(offsetof(PageView_DynamicOnItemSelected, bSelected) == 0x000008, "Member 'PageView_DynamicOnItemSelected::bSelected' has a wrong offset!");

// Function OrionUI.PageView.DynamicOnItemUnhover
// 0x0010 (0x0010 - 0x0000)
struct PageView_DynamicOnItemUnhover final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnused;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PageView_DynamicOnItemUnhover) == 0x000008, "Wrong alignment on PageView_DynamicOnItemUnhover");
static_assert(sizeof(PageView_DynamicOnItemUnhover) == 0x000010, "Wrong size on PageView_DynamicOnItemUnhover");
static_assert(offsetof(PageView_DynamicOnItemUnhover, Widget) == 0x000000, "Member 'PageView_DynamicOnItemUnhover::Widget' has a wrong offset!");
static_assert(offsetof(PageView_DynamicOnItemUnhover, bUnused) == 0x000008, "Member 'PageView_DynamicOnItemUnhover::bUnused' has a wrong offset!");

// Function OrionUI.PageView.DynamicOnPageLeft
// 0x0008 (0x0008 - 0x0000)
struct PageView_DynamicOnPageLeft final
{
public:
	class UOrionBaseButton*                       Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageView_DynamicOnPageLeft) == 0x000008, "Wrong alignment on PageView_DynamicOnPageLeft");
static_assert(sizeof(PageView_DynamicOnPageLeft) == 0x000008, "Wrong size on PageView_DynamicOnPageLeft");
static_assert(offsetof(PageView_DynamicOnPageLeft, Button) == 0x000000, "Member 'PageView_DynamicOnPageLeft::Button' has a wrong offset!");

// Function OrionUI.PageView.DynamicOnPagePicked
// 0x0010 (0x0010 - 0x0000)
struct PageView_DynamicOnPagePicked final
{
public:
	class UOrionBaseButton*                       SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PageView_DynamicOnPagePicked) == 0x000008, "Wrong alignment on PageView_DynamicOnPagePicked");
static_assert(sizeof(PageView_DynamicOnPagePicked) == 0x000010, "Wrong size on PageView_DynamicOnPagePicked");
static_assert(offsetof(PageView_DynamicOnPagePicked, SelectedButton) == 0x000000, "Member 'PageView_DynamicOnPagePicked::SelectedButton' has a wrong offset!");
static_assert(offsetof(PageView_DynamicOnPagePicked, ButtonIndex) == 0x000008, "Member 'PageView_DynamicOnPagePicked::ButtonIndex' has a wrong offset!");

// Function OrionUI.PageView.DynamicOnPageRight
// 0x0008 (0x0008 - 0x0000)
struct PageView_DynamicOnPageRight final
{
public:
	class UOrionBaseButton*                       Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageView_DynamicOnPageRight) == 0x000008, "Wrong alignment on PageView_DynamicOnPageRight");
static_assert(sizeof(PageView_DynamicOnPageRight) == 0x000008, "Wrong size on PageView_DynamicOnPageRight");
static_assert(offsetof(PageView_DynamicOnPageRight, Button) == 0x000000, "Member 'PageView_DynamicOnPageRight::Button' has a wrong offset!");

// DelegateFunction OrionUI.PageView.PageViewOnItemClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PageView_PageViewOnItemClicked__DelegateSignature final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageView_PageViewOnItemClicked__DelegateSignature) == 0x000008, "Wrong alignment on PageView_PageViewOnItemClicked__DelegateSignature");
static_assert(sizeof(PageView_PageViewOnItemClicked__DelegateSignature) == 0x000008, "Wrong size on PageView_PageViewOnItemClicked__DelegateSignature");
static_assert(offsetof(PageView_PageViewOnItemClicked__DelegateSignature, Widget) == 0x000000, "Member 'PageView_PageViewOnItemClicked__DelegateSignature::Widget' has a wrong offset!");

// DelegateFunction OrionUI.PageView.PageViewOnItemHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PageView_PageViewOnItemHovered__DelegateSignature final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageView_PageViewOnItemHovered__DelegateSignature) == 0x000008, "Wrong alignment on PageView_PageViewOnItemHovered__DelegateSignature");
static_assert(sizeof(PageView_PageViewOnItemHovered__DelegateSignature) == 0x000008, "Wrong size on PageView_PageViewOnItemHovered__DelegateSignature");
static_assert(offsetof(PageView_PageViewOnItemHovered__DelegateSignature, Widget) == 0x000000, "Member 'PageView_PageViewOnItemHovered__DelegateSignature::Widget' has a wrong offset!");

// DelegateFunction OrionUI.PageView.PageViewOnItemSelected__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PageView_PageViewOnItemSelected__DelegateSignature final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PageView_PageViewOnItemSelected__DelegateSignature) == 0x000008, "Wrong alignment on PageView_PageViewOnItemSelected__DelegateSignature");
static_assert(sizeof(PageView_PageViewOnItemSelected__DelegateSignature) == 0x000010, "Wrong size on PageView_PageViewOnItemSelected__DelegateSignature");
static_assert(offsetof(PageView_PageViewOnItemSelected__DelegateSignature, Widget) == 0x000000, "Member 'PageView_PageViewOnItemSelected__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(PageView_PageViewOnItemSelected__DelegateSignature, bSelected) == 0x000008, "Member 'PageView_PageViewOnItemSelected__DelegateSignature::bSelected' has a wrong offset!");

// Function OrionUI.PageView.SetPage
// 0x0004 (0x0004 - 0x0000)
struct PageView_SetPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageView_SetPage) == 0x000004, "Wrong alignment on PageView_SetPage");
static_assert(sizeof(PageView_SetPage) == 0x000004, "Wrong size on PageView_SetPage");
static_assert(offsetof(PageView_SetPage, Page) == 0x000000, "Member 'PageView_SetPage::Page' has a wrong offset!");

// Function OrionUI.PageView.GetPage
// 0x0004 (0x0004 - 0x0000)
struct PageView_GetPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PageView_GetPage) == 0x000004, "Wrong alignment on PageView_GetPage");
static_assert(sizeof(PageView_GetPage) == 0x000004, "Wrong size on PageView_GetPage");
static_assert(offsetof(PageView_GetPage, ReturnValue) == 0x000000, "Member 'PageView_GetPage::ReturnValue' has a wrong offset!");

// DelegateFunction OrionUI.PopupAnchor.OnPopupOpenChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PopupAnchor_OnPopupOpenChanged__DelegateSignature final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupAnchor_OnPopupOpenChanged__DelegateSignature) == 0x000001, "Wrong alignment on PopupAnchor_OnPopupOpenChanged__DelegateSignature");
static_assert(sizeof(PopupAnchor_OnPopupOpenChanged__DelegateSignature) == 0x000001, "Wrong size on PopupAnchor_OnPopupOpenChanged__DelegateSignature");
static_assert(offsetof(PopupAnchor_OnPopupOpenChanged__DelegateSignature, bOpen) == 0x000000, "Member 'PopupAnchor_OnPopupOpenChanged__DelegateSignature::bOpen' has a wrong offset!");

// Function OrionUI.PopupAnchor.Open
// 0x0001 (0x0001 - 0x0000)
struct PopupAnchor_Open final
{
public:
	bool                                          bFocus;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupAnchor_Open) == 0x000001, "Wrong alignment on PopupAnchor_Open");
static_assert(sizeof(PopupAnchor_Open) == 0x000001, "Wrong size on PopupAnchor_Open");
static_assert(offsetof(PopupAnchor_Open, bFocus) == 0x000000, "Member 'PopupAnchor_Open::bFocus' has a wrong offset!");

// Function OrionUI.PopupAnchor.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct PopupAnchor_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupAnchor_IsOpen) == 0x000001, "Wrong alignment on PopupAnchor_IsOpen");
static_assert(sizeof(PopupAnchor_IsOpen) == 0x000001, "Wrong size on PopupAnchor_IsOpen");
static_assert(offsetof(PopupAnchor_IsOpen, ReturnValue) == 0x000000, "Member 'PopupAnchor_IsOpen::ReturnValue' has a wrong offset!");

}

