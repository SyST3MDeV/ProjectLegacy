#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Minion_Lane

#include "Basic.hpp"

#include "OrionGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Minion_Lane.BP_Minion_Lane_C.ExecuteUbergraph_BP_Minion_Lane
// 0x0320 (0x0320 - 0x0000)
struct BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters;                // 0x0008(0x00B8)(ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType4;                // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters4;               // 0x00C8(0x00B8)(ContainsInstancedReference)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType3;                // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters3;               // 0x0188(0x00B8)(ContainsInstancedReference)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOrionTeam                                    K2Node_Event_NewTeamIdx;                           // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameplayCueEvent                             K2Node_GameplayCueEvent_EventType2;                // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_243[0x5];                                      // 0x0243(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_GameplayCueEvent_Parameters2;               // 0x0248(0x00B8)(ContainsInstancedReference)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0300(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOrionTeam                                    K2Node_Event_NewTeamVisuals;                       // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x030A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30B[0x1];                                      // 0x030B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_PlaybackTime;                         // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAllowedToRagdoll;                    // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue2;                        // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane");
static_assert(sizeof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane) == 0x000320, "Wrong size on BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, EntryPoint) == 0x000000, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_EventType) == 0x000004, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_EventType' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_Parameters) == 0x000008, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_Parameters' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_SwitchEnum_CmpSuccess) == 0x0000C0, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, Temp_bool_IsClosed_Variable) == 0x0000C1, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_EventType4) == 0x0000C2, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_EventType4' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_Parameters4) == 0x0000C8, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_Parameters4' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_EventType3) == 0x000180, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_EventType3' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_Parameters3) == 0x000188, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_Parameters3' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, Temp_bool_Has_Been_Initd_Variable) == 0x000240, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_Event_NewTeamIdx) == 0x000241, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_Event_NewTeamIdx' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_EventType2) == 0x000242, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_EventType2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_GameplayCueEvent_Parameters2) == 0x000248, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_GameplayCueEvent_Parameters2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000300, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_SwitchEnum2_CmpSuccess) == 0x000308, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_Event_NewTeamVisuals) == 0x000309, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_Event_NewTeamVisuals' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x00030A, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_Event_PlaybackTime) == 0x00030C, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_Event_PlaybackTime' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, K2Node_Event_bAllowedToRagdoll) == 0x000310, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::K2Node_Event_bAllowedToRagdoll' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, CallFunc_Lerp_ReturnValue) == 0x000314, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane, CallFunc_Lerp_ReturnValue2) == 0x000318, "Member 'BP_Minion_Lane_C_ExecuteUbergraph_BP_Minion_Lane::CallFunc_Lerp_ReturnValue2' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.GameplayCue.Minion.Spawn
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Minion_Lane_C_GameplayCue_Minion_Spawn final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_Minion_Lane_C_GameplayCue_Minion_Spawn) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_GameplayCue_Minion_Spawn");
static_assert(sizeof(BP_Minion_Lane_C_GameplayCue_Minion_Spawn) == 0x0000C0, "Wrong size on BP_Minion_Lane_C_GameplayCue_Minion_Spawn");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Minion_Spawn, EventType) == 0x000000, "Member 'BP_Minion_Lane_C_GameplayCue_Minion_Spawn::EventType' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Minion_Spawn, Parameters) == 0x000008, "Member 'BP_Minion_Lane_C_GameplayCue_Minion_Spawn::Parameters' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.OnPlayDeathAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_Minion_Lane_C_OnPlayDeathAnim final
{
public:
	float                                         PlaybackTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllowedToRagdoll;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Minion_Lane_C_OnPlayDeathAnim) == 0x000004, "Wrong alignment on BP_Minion_Lane_C_OnPlayDeathAnim");
static_assert(sizeof(BP_Minion_Lane_C_OnPlayDeathAnim) == 0x000008, "Wrong size on BP_Minion_Lane_C_OnPlayDeathAnim");
static_assert(offsetof(BP_Minion_Lane_C_OnPlayDeathAnim, PlaybackTime) == 0x000000, "Member 'BP_Minion_Lane_C_OnPlayDeathAnim::PlaybackTime' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_OnPlayDeathAnim, bAllowedToRagdoll) == 0x000004, "Member 'BP_Minion_Lane_C_OnPlayDeathAnim::bAllowedToRagdoll' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.Debug_OverrideTeamVisuals
// 0x0001 (0x0001 - 0x0000)
struct BP_Minion_Lane_C_Debug_OverrideTeamVisuals final
{
public:
	EOrionTeam                                    NewTeamVisuals;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Minion_Lane_C_Debug_OverrideTeamVisuals) == 0x000001, "Wrong alignment on BP_Minion_Lane_C_Debug_OverrideTeamVisuals");
static_assert(sizeof(BP_Minion_Lane_C_Debug_OverrideTeamVisuals) == 0x000001, "Wrong size on BP_Minion_Lane_C_Debug_OverrideTeamVisuals");
static_assert(offsetof(BP_Minion_Lane_C_Debug_OverrideTeamVisuals, NewTeamVisuals) == 0x000000, "Member 'BP_Minion_Lane_C_Debug_OverrideTeamVisuals::NewTeamVisuals' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.GameplayCue.Minion.LastHitVulnerable
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable");
static_assert(sizeof(BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable) == 0x0000C0, "Wrong size on BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable, EventType) == 0x000000, "Member 'BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable::EventType' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable, Parameters) == 0x000008, "Member 'BP_Minion_Lane_C_GameplayCue_Minion_LastHitVulnerable::Parameters' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.OnTeamChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_Minion_Lane_C_OnTeamChanged final
{
public:
	EOrionTeam                                    NewTeamIdx;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Minion_Lane_C_OnTeamChanged) == 0x000001, "Wrong alignment on BP_Minion_Lane_C_OnTeamChanged");
static_assert(sizeof(BP_Minion_Lane_C_OnTeamChanged) == 0x000001, "Wrong size on BP_Minion_Lane_C_OnTeamChanged");
static_assert(offsetof(BP_Minion_Lane_C_OnTeamChanged, NewTeamIdx) == 0x000000, "Member 'BP_Minion_Lane_C_OnTeamChanged::NewTeamIdx' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.GameplayCue.Damage.DoT
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Minion_Lane_C_GameplayCue_Damage_DoT final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_Minion_Lane_C_GameplayCue_Damage_DoT) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_GameplayCue_Damage_DoT");
static_assert(sizeof(BP_Minion_Lane_C_GameplayCue_Damage_DoT) == 0x0000C0, "Wrong size on BP_Minion_Lane_C_GameplayCue_Damage_DoT");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Damage_DoT, EventType) == 0x000000, "Member 'BP_Minion_Lane_C_GameplayCue_Damage_DoT::EventType' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Damage_DoT, Parameters) == 0x000008, "Member 'BP_Minion_Lane_C_GameplayCue_Damage_DoT::Parameters' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.GameplayCue.Damage
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Minion_Lane_C_GameplayCue_Damage final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(BP_Minion_Lane_C_GameplayCue_Damage) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_GameplayCue_Damage");
static_assert(sizeof(BP_Minion_Lane_C_GameplayCue_Damage) == 0x0000C0, "Wrong size on BP_Minion_Lane_C_GameplayCue_Damage");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Damage, EventType) == 0x000000, "Member 'BP_Minion_Lane_C_GameplayCue_Damage::EventType' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_GameplayCue_Damage, Parameters) == 0x000008, "Member 'BP_Minion_Lane_C_GameplayCue_Damage::Parameters' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.InitTeamChanged
// 0x0008 (0x0008 - 0x0000)
struct BP_Minion_Lane_C_InitTeamChanged final
{
public:
	EOrionTeam                                    Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrionTeam                                    CallFunc_Debug_CheckTeamVisualOverride_ActualTeamVisual; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue2;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Minion_Lane_C_InitTeamChanged) == 0x000001, "Wrong alignment on BP_Minion_Lane_C_InitTeamChanged");
static_assert(sizeof(BP_Minion_Lane_C_InitTeamChanged) == 0x000008, "Wrong size on BP_Minion_Lane_C_InitTeamChanged");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, Team) == 0x000000, "Member 'BP_Minion_Lane_C_InitTeamChanged::Team' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, CallFunc_Debug_CheckTeamVisualOverride_ActualTeamVisual) == 0x000001, "Member 'BP_Minion_Lane_C_InitTeamChanged::CallFunc_Debug_CheckTeamVisualOverride_ActualTeamVisual' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, CallFunc_IsValidClass_ReturnValue) == 0x000002, "Member 'BP_Minion_Lane_C_InitTeamChanged::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_Minion_Lane_C_InitTeamChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, CallFunc_IsValidClass_ReturnValue2) == 0x000004, "Member 'BP_Minion_Lane_C_InitTeamChanged::CallFunc_IsValidClass_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, CallFunc_HasAuthority_ReturnValue) == 0x000005, "Member 'BP_Minion_Lane_C_InitTeamChanged::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'BP_Minion_Lane_C_InitTeamChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_InitTeamChanged, CallFunc_IsValid_ReturnValue2) == 0x000007, "Member 'BP_Minion_Lane_C_InitTeamChanged::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.SwapClientToCoreMesh
// 0x0018 (0x0018 - 0x0000)
struct BP_Minion_Lane_C_SwapClientToCoreMesh final
{
public:
	class USkeletalMesh*                          NewMesh_Dawn;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          NewMesh_Dusk;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDusk_0;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Minion_Lane_C_SwapClientToCoreMesh) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_SwapClientToCoreMesh");
static_assert(sizeof(BP_Minion_Lane_C_SwapClientToCoreMesh) == 0x000018, "Wrong size on BP_Minion_Lane_C_SwapClientToCoreMesh");
static_assert(offsetof(BP_Minion_Lane_C_SwapClientToCoreMesh, NewMesh_Dawn) == 0x000000, "Member 'BP_Minion_Lane_C_SwapClientToCoreMesh::NewMesh_Dawn' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapClientToCoreMesh, NewMesh_Dusk) == 0x000008, "Member 'BP_Minion_Lane_C_SwapClientToCoreMesh::NewMesh_Dusk' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapClientToCoreMesh, IsDusk_0) == 0x000010, "Member 'BP_Minion_Lane_C_SwapClientToCoreMesh::IsDusk_0' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapClientToCoreMesh, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_Minion_Lane_C_SwapClientToCoreMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapClientToCoreMesh, CallFunc_IsValid_ReturnValue2) == 0x000012, "Member 'BP_Minion_Lane_C_SwapClientToCoreMesh::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapClientToCoreMesh, CallFunc_HasAuthority_ReturnValue) == 0x000013, "Member 'BP_Minion_Lane_C_SwapClientToCoreMesh::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.SetTeamColor
// 0x0070 (0x0070 - 0x0000)
struct BP_Minion_Lane_C_SetTeamColor final
{
public:
	EOrionTeam                                    TeamNum_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetTeamColorFromMPCWithTeamNum_ReturnValue; // 0x0004(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTeamColorFromMPCWithTeamNum_ReturnValue2; // 0x0014(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select2_Default;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select3_Default;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue2; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select4_Default;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue3; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue4; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Minion_Lane_C_SetTeamColor) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_SetTeamColor");
static_assert(sizeof(BP_Minion_Lane_C_SetTeamColor) == 0x000070, "Wrong size on BP_Minion_Lane_C_SetTeamColor");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, TeamNum_0) == 0x000000, "Member 'BP_Minion_Lane_C_SetTeamColor::TeamNum_0' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, IsDead) == 0x000001, "Member 'BP_Minion_Lane_C_SetTeamColor::IsDead' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, Temp_bool_Variable) == 0x000002, "Member 'BP_Minion_Lane_C_SetTeamColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, CallFunc_GetTeamColorFromMPCWithTeamNum_ReturnValue) == 0x000004, "Member 'BP_Minion_Lane_C_SetTeamColor::CallFunc_GetTeamColorFromMPCWithTeamNum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, CallFunc_GetTeamColorFromMPCWithTeamNum_ReturnValue2) == 0x000014, "Member 'BP_Minion_Lane_C_SetTeamColor::CallFunc_GetTeamColorFromMPCWithTeamNum_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, Temp_bool_Variable2) == 0x000024, "Member 'BP_Minion_Lane_C_SetTeamColor::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, Temp_bool_Variable3) == 0x000025, "Member 'BP_Minion_Lane_C_SetTeamColor::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, K2Node_Select_Default) == 0x000028, "Member 'BP_Minion_Lane_C_SetTeamColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, Temp_bool_Variable4) == 0x000030, "Member 'BP_Minion_Lane_C_SetTeamColor::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, K2Node_Select2_Default) == 0x000038, "Member 'BP_Minion_Lane_C_SetTeamColor::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, K2Node_Select3_Default) == 0x000040, "Member 'BP_Minion_Lane_C_SetTeamColor::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000048, "Member 'BP_Minion_Lane_C_SetTeamColor::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, CallFunc_CreateDynamicMaterialInstance_ReturnValue2) == 0x000050, "Member 'BP_Minion_Lane_C_SetTeamColor::CallFunc_CreateDynamicMaterialInstance_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, K2Node_Select4_Default) == 0x000058, "Member 'BP_Minion_Lane_C_SetTeamColor::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, CallFunc_CreateDynamicMaterialInstance_ReturnValue3) == 0x000060, "Member 'BP_Minion_Lane_C_SetTeamColor::CallFunc_CreateDynamicMaterialInstance_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SetTeamColor, CallFunc_CreateDynamicMaterialInstance_ReturnValue4) == 0x000068, "Member 'BP_Minion_Lane_C_SetTeamColor::CallFunc_CreateDynamicMaterialInstance_ReturnValue4' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.SwapMatsToCore
// 0x0018 (0x0018 - 0x0000)
struct BP_Minion_Lane_C_SwapMatsToCore final
{
public:
	class UMaterialInterface*                     MatCoreDawn;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MatCoreDusk;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDusk_0;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Minion_Lane_C_SwapMatsToCore) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_SwapMatsToCore");
static_assert(sizeof(BP_Minion_Lane_C_SwapMatsToCore) == 0x000018, "Wrong size on BP_Minion_Lane_C_SwapMatsToCore");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToCore, MatCoreDawn) == 0x000000, "Member 'BP_Minion_Lane_C_SwapMatsToCore::MatCoreDawn' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToCore, MatCoreDusk) == 0x000008, "Member 'BP_Minion_Lane_C_SwapMatsToCore::MatCoreDusk' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToCore, IsDusk_0) == 0x000010, "Member 'BP_Minion_Lane_C_SwapMatsToCore::IsDusk_0' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToCore, CallFunc_HasAuthority_ReturnValue) == 0x000011, "Member 'BP_Minion_Lane_C_SwapMatsToCore::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.SwapMatsToDeath
// 0x0018 (0x0018 - 0x0000)
struct BP_Minion_Lane_C_SwapMatsToDeath final
{
public:
	bool                                          IsDusk_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select2_Default;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Minion_Lane_C_SwapMatsToDeath) == 0x000008, "Wrong alignment on BP_Minion_Lane_C_SwapMatsToDeath");
static_assert(sizeof(BP_Minion_Lane_C_SwapMatsToDeath) == 0x000018, "Wrong size on BP_Minion_Lane_C_SwapMatsToDeath");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToDeath, IsDusk_0) == 0x000000, "Member 'BP_Minion_Lane_C_SwapMatsToDeath::IsDusk_0' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToDeath, Temp_bool_Variable) == 0x000001, "Member 'BP_Minion_Lane_C_SwapMatsToDeath::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToDeath, Temp_bool_Variable2) == 0x000002, "Member 'BP_Minion_Lane_C_SwapMatsToDeath::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToDeath, K2Node_Select_Default) == 0x000008, "Member 'BP_Minion_Lane_C_SwapMatsToDeath::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_SwapMatsToDeath, K2Node_Select2_Default) == 0x000010, "Member 'BP_Minion_Lane_C_SwapMatsToDeath::K2Node_Select2_Default' has a wrong offset!");

// Function BP_Minion_Lane.BP_Minion_Lane_C.Debug_CheckTeamVisualOverride
// 0x0005 (0x0005 - 0x0000)
struct BP_Minion_Lane_C_Debug_CheckTeamVisualOverride final
{
public:
	EOrionTeam                                    DesiredTeamVisual;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrionTeam                                    ActualTeamVisual;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOrionTeam                                    K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Minion_Lane_C_Debug_CheckTeamVisualOverride) == 0x000001, "Wrong alignment on BP_Minion_Lane_C_Debug_CheckTeamVisualOverride");
static_assert(sizeof(BP_Minion_Lane_C_Debug_CheckTeamVisualOverride) == 0x000005, "Wrong size on BP_Minion_Lane_C_Debug_CheckTeamVisualOverride");
static_assert(offsetof(BP_Minion_Lane_C_Debug_CheckTeamVisualOverride, DesiredTeamVisual) == 0x000000, "Member 'BP_Minion_Lane_C_Debug_CheckTeamVisualOverride::DesiredTeamVisual' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_Debug_CheckTeamVisualOverride, ActualTeamVisual) == 0x000001, "Member 'BP_Minion_Lane_C_Debug_CheckTeamVisualOverride::ActualTeamVisual' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_Debug_CheckTeamVisualOverride, Temp_bool_Variable) == 0x000002, "Member 'BP_Minion_Lane_C_Debug_CheckTeamVisualOverride::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_Debug_CheckTeamVisualOverride, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_Minion_Lane_C_Debug_CheckTeamVisualOverride::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Minion_Lane_C_Debug_CheckTeamVisualOverride, K2Node_Select_Default) == 0x000004, "Member 'BP_Minion_Lane_C_Debug_CheckTeamVisualOverride::K2Node_Select_Default' has a wrong offset!");

}

