#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TM_Sphere

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TM_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TM_Sphere.TM_Sphere_C
// 0x0050 (0x07D0 - 0x0780)
class ATM_Sphere_C : public ATM_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_TM_Sphere_C;                        // 0x0780(0x0008)(Transient, DuplicateTransient)
	class UDecalComponent*                        RadiusDecal;                                       // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TargetingParticleSystem;                           // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSplineTargetVisuals;                            // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasGroundRing;                                     // 0x0799(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79A[0x6];                                      // 0x079A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        SphereTargettingNoGroundRing;                      // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        TeleportTargeting;                                 // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeleporting;                                     // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               RadiusDecalMat;                                    // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DecalSize;                                         // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRangeDecal;                                     // 0x07C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C5[0x3];                                      // 0x07C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DistanceMeshMat;                                   // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TM_Sphere(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnFacetSphereBuilt(float Radius);
	void ReceiveBeginPlay();
	void OnTargetingModeActivate();
	void OnTargetingModeCancel();
	void OnTargetingModeConfirm();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TM_Sphere_C">();
	}
	static class ATM_Sphere_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATM_Sphere_C>();
	}
};
static_assert(alignof(ATM_Sphere_C) == 0x000008, "Wrong alignment on ATM_Sphere_C");
static_assert(sizeof(ATM_Sphere_C) == 0x0007D0, "Wrong size on ATM_Sphere_C");
static_assert(offsetof(ATM_Sphere_C, UberGraphFrame_TM_Sphere_C) == 0x000780, "Member 'ATM_Sphere_C::UberGraphFrame_TM_Sphere_C' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, RadiusDecal) == 0x000788, "Member 'ATM_Sphere_C::RadiusDecal' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, TargetingParticleSystem) == 0x000790, "Member 'ATM_Sphere_C::TargetingParticleSystem' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, UseSplineTargetVisuals) == 0x000798, "Member 'ATM_Sphere_C::UseSplineTargetVisuals' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, HasGroundRing) == 0x000799, "Member 'ATM_Sphere_C::HasGroundRing' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, SphereTargettingNoGroundRing) == 0x0007A0, "Member 'ATM_Sphere_C::SphereTargettingNoGroundRing' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, TeleportTargeting) == 0x0007A8, "Member 'ATM_Sphere_C::TeleportTargeting' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, IsTeleporting) == 0x0007B0, "Member 'ATM_Sphere_C::IsTeleporting' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, RadiusDecalMat) == 0x0007B8, "Member 'ATM_Sphere_C::RadiusDecalMat' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, DecalSize) == 0x0007C0, "Member 'ATM_Sphere_C::DecalSize' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, UseRangeDecal) == 0x0007C4, "Member 'ATM_Sphere_C::UseRangeDecal' has a wrong offset!");
static_assert(offsetof(ATM_Sphere_C, DistanceMeshMat) == 0x0007C8, "Member 'ATM_Sphere_C::DistanceMeshMat' has a wrong offset!");

}

