#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tutorial_IndicatorLine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Tutorial_IndicatorLine.BP_Tutorial_IndicatorLine_C
// 0x0048 (0x04C0 - 0x0478)
class ABP_Tutorial_IndicatorLine_C final : public AOrionTutorialPath
{
public:
	class USplineComponent*                       Spline;                                            // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawSplinePtsNumbers;                              // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Ending_Branches;                                   // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Beginning_from_Branch;                             // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48B[0x1];                                      // 0x048B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Forward;                                           // 0x048C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0498(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scale;                                             // 0x04A4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x04B0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void Draw_ID_No_s();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Tutorial_IndicatorLine_C">();
	}
	static class ABP_Tutorial_IndicatorLine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Tutorial_IndicatorLine_C>();
	}
};
static_assert(alignof(ABP_Tutorial_IndicatorLine_C) == 0x000008, "Wrong alignment on ABP_Tutorial_IndicatorLine_C");
static_assert(sizeof(ABP_Tutorial_IndicatorLine_C) == 0x0004C0, "Wrong size on ABP_Tutorial_IndicatorLine_C");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, Spline) == 0x000478, "Member 'ABP_Tutorial_IndicatorLine_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, DefaultSceneRoot) == 0x000480, "Member 'ABP_Tutorial_IndicatorLine_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, DrawSplinePtsNumbers) == 0x000488, "Member 'ABP_Tutorial_IndicatorLine_C::DrawSplinePtsNumbers' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, Ending_Branches) == 0x000489, "Member 'ABP_Tutorial_IndicatorLine_C::Ending_Branches' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, Beginning_from_Branch) == 0x00048A, "Member 'ABP_Tutorial_IndicatorLine_C::Beginning_from_Branch' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, Forward) == 0x00048C, "Member 'ABP_Tutorial_IndicatorLine_C::Forward' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, Location) == 0x000498, "Member 'ABP_Tutorial_IndicatorLine_C::Location' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, Scale) == 0x0004A4, "Member 'ABP_Tutorial_IndicatorLine_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_Tutorial_IndicatorLine_C, Rotation) == 0x0004B0, "Member 'ABP_Tutorial_IndicatorLine_C::Rotation' has a wrong offset!");

}

