#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Gem_EmpoweredRounds

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "OrionGame_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Gem_EmpoweredRounds.GA_Gem_EmpoweredRounds_C
// 0x00A0 (0x0C10 - 0x0B70)
class UGA_Gem_EmpoweredRounds_C final : public UOrionAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B70(0x0008)(Transient, DuplicateTransient)
	class UClass*                                 DamageGE;                                          // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagRequirements               BasicDamageTags;                                   // 0x0B80(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Count;                                             // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCount;                                          // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagRequirements               NonStructure;                                      // 0x0BC8(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FActiveGameplayEffectHandle            EmpoweredVisualGE;                                 // 0x0C08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Gem_EmpoweredRounds(int32 EntryPoint);
	void K2_ActivateAbility();
	void OnApplied_B27C2F564909BDCF16AB35B5B853AD39(class AActor* Target, const struct FGameplayEffectSpecHandle& SpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle);
	void OnStateEnded_00D20CE64A0925AC976362A73DE19D74();
	void OnStateInterrupted_00D20CE64A0925AC976362A73DE19D74();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Gem_EmpoweredRounds_C">();
	}
	static class UGA_Gem_EmpoweredRounds_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Gem_EmpoweredRounds_C>();
	}
};
static_assert(alignof(UGA_Gem_EmpoweredRounds_C) == 0x000010, "Wrong alignment on UGA_Gem_EmpoweredRounds_C");
static_assert(sizeof(UGA_Gem_EmpoweredRounds_C) == 0x000C10, "Wrong size on UGA_Gem_EmpoweredRounds_C");
static_assert(offsetof(UGA_Gem_EmpoweredRounds_C, UberGraphFrame) == 0x000B70, "Member 'UGA_Gem_EmpoweredRounds_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Gem_EmpoweredRounds_C, DamageGE) == 0x000B78, "Member 'UGA_Gem_EmpoweredRounds_C::DamageGE' has a wrong offset!");
static_assert(offsetof(UGA_Gem_EmpoweredRounds_C, BasicDamageTags) == 0x000B80, "Member 'UGA_Gem_EmpoweredRounds_C::BasicDamageTags' has a wrong offset!");
static_assert(offsetof(UGA_Gem_EmpoweredRounds_C, Count) == 0x000BC0, "Member 'UGA_Gem_EmpoweredRounds_C::Count' has a wrong offset!");
static_assert(offsetof(UGA_Gem_EmpoweredRounds_C, MaxCount) == 0x000BC4, "Member 'UGA_Gem_EmpoweredRounds_C::MaxCount' has a wrong offset!");
static_assert(offsetof(UGA_Gem_EmpoweredRounds_C, NonStructure) == 0x000BC8, "Member 'UGA_Gem_EmpoweredRounds_C::NonStructure' has a wrong offset!");
static_assert(offsetof(UGA_Gem_EmpoweredRounds_C, EmpoweredVisualGE) == 0x000C08, "Member 'UGA_Gem_EmpoweredRounds_C::EmpoweredVisualGE' has a wrong offset!");

}

