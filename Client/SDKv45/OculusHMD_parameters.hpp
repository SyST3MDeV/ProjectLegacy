#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusHMD

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "OculusHMD_structs.hpp"
#include "HeadMountedDisplay_structs.hpp"


namespace SDK::Params
{

// Function OculusHMD.DeprecatedGearVRControllerComponent.GetControllerMesh
// 0x0008 (0x0008 - 0x0000)
struct DeprecatedGearVRControllerComponent_GetControllerMesh final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeprecatedGearVRControllerComponent_GetControllerMesh) == 0x000008, "Wrong alignment on DeprecatedGearVRControllerComponent_GetControllerMesh");
static_assert(sizeof(DeprecatedGearVRControllerComponent_GetControllerMesh) == 0x000008, "Wrong size on DeprecatedGearVRControllerComponent_GetControllerMesh");
static_assert(offsetof(DeprecatedGearVRControllerComponent_GetControllerMesh, ReturnValue) == 0x000000, "Member 'DeprecatedGearVRControllerComponent_GetControllerMesh::ReturnValue' has a wrong offset!");

// Function OculusHMD.DeprecatedGearVRControllerComponent.GetMotionController
// 0x0008 (0x0008 - 0x0000)
struct DeprecatedGearVRControllerComponent_GetMotionController final
{
public:
	class UMotionControllerComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeprecatedGearVRControllerComponent_GetMotionController) == 0x000008, "Wrong alignment on DeprecatedGearVRControllerComponent_GetMotionController");
static_assert(sizeof(DeprecatedGearVRControllerComponent_GetMotionController) == 0x000008, "Wrong size on DeprecatedGearVRControllerComponent_GetMotionController");
static_assert(offsetof(DeprecatedGearVRControllerComponent_GetMotionController, ReturnValue) == 0x000000, "Member 'DeprecatedGearVRControllerComponent_GetMotionController::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.CheckIfPointWithinOuterBounds
// 0x002C (0x002C - 0x0000)
struct OculusBoundaryComponent_CheckIfPointWithinOuterBounds final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoundaryTestResult                    ReturnValue;                                       // 0x000C(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_CheckIfPointWithinOuterBounds) == 0x000004, "Wrong alignment on OculusBoundaryComponent_CheckIfPointWithinOuterBounds");
static_assert(sizeof(OculusBoundaryComponent_CheckIfPointWithinOuterBounds) == 0x00002C, "Wrong size on OculusBoundaryComponent_CheckIfPointWithinOuterBounds");
static_assert(offsetof(OculusBoundaryComponent_CheckIfPointWithinOuterBounds, Point) == 0x000000, "Member 'OculusBoundaryComponent_CheckIfPointWithinOuterBounds::Point' has a wrong offset!");
static_assert(offsetof(OculusBoundaryComponent_CheckIfPointWithinOuterBounds, ReturnValue) == 0x00000C, "Member 'OculusBoundaryComponent_CheckIfPointWithinOuterBounds::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.CheckIfPointWithinPlayArea
// 0x002C (0x002C - 0x0000)
struct OculusBoundaryComponent_CheckIfPointWithinPlayArea final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoundaryTestResult                    ReturnValue;                                       // 0x000C(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_CheckIfPointWithinPlayArea) == 0x000004, "Wrong alignment on OculusBoundaryComponent_CheckIfPointWithinPlayArea");
static_assert(sizeof(OculusBoundaryComponent_CheckIfPointWithinPlayArea) == 0x00002C, "Wrong size on OculusBoundaryComponent_CheckIfPointWithinPlayArea");
static_assert(offsetof(OculusBoundaryComponent_CheckIfPointWithinPlayArea, Point) == 0x000000, "Member 'OculusBoundaryComponent_CheckIfPointWithinPlayArea::Point' has a wrong offset!");
static_assert(offsetof(OculusBoundaryComponent_CheckIfPointWithinPlayArea, ReturnValue) == 0x00000C, "Member 'OculusBoundaryComponent_CheckIfPointWithinPlayArea::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.GetOuterBoundaryDimensions
// 0x000C (0x000C - 0x0000)
struct OculusBoundaryComponent_GetOuterBoundaryDimensions final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_GetOuterBoundaryDimensions) == 0x000004, "Wrong alignment on OculusBoundaryComponent_GetOuterBoundaryDimensions");
static_assert(sizeof(OculusBoundaryComponent_GetOuterBoundaryDimensions) == 0x00000C, "Wrong size on OculusBoundaryComponent_GetOuterBoundaryDimensions");
static_assert(offsetof(OculusBoundaryComponent_GetOuterBoundaryDimensions, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_GetOuterBoundaryDimensions::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.GetOuterBoundaryPoints
// 0x0010 (0x0010 - 0x0000)
struct OculusBoundaryComponent_GetOuterBoundaryPoints final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_GetOuterBoundaryPoints) == 0x000008, "Wrong alignment on OculusBoundaryComponent_GetOuterBoundaryPoints");
static_assert(sizeof(OculusBoundaryComponent_GetOuterBoundaryPoints) == 0x000010, "Wrong size on OculusBoundaryComponent_GetOuterBoundaryPoints");
static_assert(offsetof(OculusBoundaryComponent_GetOuterBoundaryPoints, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_GetOuterBoundaryPoints::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.GetPlayAreaDimensions
// 0x000C (0x000C - 0x0000)
struct OculusBoundaryComponent_GetPlayAreaDimensions final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_GetPlayAreaDimensions) == 0x000004, "Wrong alignment on OculusBoundaryComponent_GetPlayAreaDimensions");
static_assert(sizeof(OculusBoundaryComponent_GetPlayAreaDimensions) == 0x00000C, "Wrong size on OculusBoundaryComponent_GetPlayAreaDimensions");
static_assert(offsetof(OculusBoundaryComponent_GetPlayAreaDimensions, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_GetPlayAreaDimensions::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.GetPlayAreaPoints
// 0x0010 (0x0010 - 0x0000)
struct OculusBoundaryComponent_GetPlayAreaPoints final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_GetPlayAreaPoints) == 0x000008, "Wrong alignment on OculusBoundaryComponent_GetPlayAreaPoints");
static_assert(sizeof(OculusBoundaryComponent_GetPlayAreaPoints) == 0x000010, "Wrong size on OculusBoundaryComponent_GetPlayAreaPoints");
static_assert(offsetof(OculusBoundaryComponent_GetPlayAreaPoints, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_GetPlayAreaPoints::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.GetTriggeredOuterBoundaryInfo
// 0x0010 (0x0010 - 0x0000)
struct OculusBoundaryComponent_GetTriggeredOuterBoundaryInfo final
{
public:
	TArray<struct FBoundaryTestResult>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_GetTriggeredOuterBoundaryInfo) == 0x000008, "Wrong alignment on OculusBoundaryComponent_GetTriggeredOuterBoundaryInfo");
static_assert(sizeof(OculusBoundaryComponent_GetTriggeredOuterBoundaryInfo) == 0x000010, "Wrong size on OculusBoundaryComponent_GetTriggeredOuterBoundaryInfo");
static_assert(offsetof(OculusBoundaryComponent_GetTriggeredOuterBoundaryInfo, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_GetTriggeredOuterBoundaryInfo::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.GetTriggeredPlayAreaInfo
// 0x0024 (0x0024 - 0x0000)
struct OculusBoundaryComponent_GetTriggeredPlayAreaInfo final
{
public:
	ETrackedDeviceType                            DeviceType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoundaryTestResult                    ReturnValue;                                       // 0x0004(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_GetTriggeredPlayAreaInfo) == 0x000004, "Wrong alignment on OculusBoundaryComponent_GetTriggeredPlayAreaInfo");
static_assert(sizeof(OculusBoundaryComponent_GetTriggeredPlayAreaInfo) == 0x000024, "Wrong size on OculusBoundaryComponent_GetTriggeredPlayAreaInfo");
static_assert(offsetof(OculusBoundaryComponent_GetTriggeredPlayAreaInfo, DeviceType) == 0x000000, "Member 'OculusBoundaryComponent_GetTriggeredPlayAreaInfo::DeviceType' has a wrong offset!");
static_assert(offsetof(OculusBoundaryComponent_GetTriggeredPlayAreaInfo, ReturnValue) == 0x000004, "Member 'OculusBoundaryComponent_GetTriggeredPlayAreaInfo::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.IsOuterBoundaryDisplayed
// 0x0001 (0x0001 - 0x0000)
struct OculusBoundaryComponent_IsOuterBoundaryDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_IsOuterBoundaryDisplayed) == 0x000001, "Wrong alignment on OculusBoundaryComponent_IsOuterBoundaryDisplayed");
static_assert(sizeof(OculusBoundaryComponent_IsOuterBoundaryDisplayed) == 0x000001, "Wrong size on OculusBoundaryComponent_IsOuterBoundaryDisplayed");
static_assert(offsetof(OculusBoundaryComponent_IsOuterBoundaryDisplayed, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_IsOuterBoundaryDisplayed::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.IsOuterBoundaryTriggered
// 0x0001 (0x0001 - 0x0000)
struct OculusBoundaryComponent_IsOuterBoundaryTriggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_IsOuterBoundaryTriggered) == 0x000001, "Wrong alignment on OculusBoundaryComponent_IsOuterBoundaryTriggered");
static_assert(sizeof(OculusBoundaryComponent_IsOuterBoundaryTriggered) == 0x000001, "Wrong size on OculusBoundaryComponent_IsOuterBoundaryTriggered");
static_assert(offsetof(OculusBoundaryComponent_IsOuterBoundaryTriggered, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_IsOuterBoundaryTriggered::ReturnValue' has a wrong offset!");

// DelegateFunction OculusHMD.OculusBoundaryComponent.OculusOuterBoundaryTriggeredEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct OculusBoundaryComponent_OculusOuterBoundaryTriggeredEvent__DelegateSignature final
{
public:
	TArray<struct FBoundaryTestResult>            OuterBoundsInteractionList;                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_OculusOuterBoundaryTriggeredEvent__DelegateSignature) == 0x000008, "Wrong alignment on OculusBoundaryComponent_OculusOuterBoundaryTriggeredEvent__DelegateSignature");
static_assert(sizeof(OculusBoundaryComponent_OculusOuterBoundaryTriggeredEvent__DelegateSignature) == 0x000010, "Wrong size on OculusBoundaryComponent_OculusOuterBoundaryTriggeredEvent__DelegateSignature");
static_assert(offsetof(OculusBoundaryComponent_OculusOuterBoundaryTriggeredEvent__DelegateSignature, OuterBoundsInteractionList) == 0x000000, "Member 'OculusBoundaryComponent_OculusOuterBoundaryTriggeredEvent__DelegateSignature::OuterBoundsInteractionList' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.RequestOuterBoundaryVisible
// 0x0002 (0x0002 - 0x0000)
struct OculusBoundaryComponent_RequestOuterBoundaryVisible final
{
public:
	bool                                          BoundaryVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_RequestOuterBoundaryVisible) == 0x000001, "Wrong alignment on OculusBoundaryComponent_RequestOuterBoundaryVisible");
static_assert(sizeof(OculusBoundaryComponent_RequestOuterBoundaryVisible) == 0x000002, "Wrong size on OculusBoundaryComponent_RequestOuterBoundaryVisible");
static_assert(offsetof(OculusBoundaryComponent_RequestOuterBoundaryVisible, BoundaryVisible) == 0x000000, "Member 'OculusBoundaryComponent_RequestOuterBoundaryVisible::BoundaryVisible' has a wrong offset!");
static_assert(offsetof(OculusBoundaryComponent_RequestOuterBoundaryVisible, ReturnValue) == 0x000001, "Member 'OculusBoundaryComponent_RequestOuterBoundaryVisible::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.ResetOuterBoundaryColor
// 0x0001 (0x0001 - 0x0000)
struct OculusBoundaryComponent_ResetOuterBoundaryColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusBoundaryComponent_ResetOuterBoundaryColor) == 0x000001, "Wrong alignment on OculusBoundaryComponent_ResetOuterBoundaryColor");
static_assert(sizeof(OculusBoundaryComponent_ResetOuterBoundaryColor) == 0x000001, "Wrong size on OculusBoundaryComponent_ResetOuterBoundaryColor");
static_assert(offsetof(OculusBoundaryComponent_ResetOuterBoundaryColor, ReturnValue) == 0x000000, "Member 'OculusBoundaryComponent_ResetOuterBoundaryColor::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusBoundaryComponent.SetOuterBoundaryColor
// 0x0008 (0x0008 - 0x0000)
struct OculusBoundaryComponent_SetOuterBoundaryColor final
{
public:
	struct FColor                                 InBoundaryColor;                                   // 0x0000(0x0004)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusBoundaryComponent_SetOuterBoundaryColor) == 0x000004, "Wrong alignment on OculusBoundaryComponent_SetOuterBoundaryColor");
static_assert(sizeof(OculusBoundaryComponent_SetOuterBoundaryColor) == 0x000008, "Wrong size on OculusBoundaryComponent_SetOuterBoundaryColor");
static_assert(offsetof(OculusBoundaryComponent_SetOuterBoundaryColor, InBoundaryColor) == 0x000000, "Member 'OculusBoundaryComponent_SetOuterBoundaryColor::InBoundaryColor' has a wrong offset!");
static_assert(offsetof(OculusBoundaryComponent_SetOuterBoundaryColor, ReturnValue) == 0x000004, "Member 'OculusBoundaryComponent_SetOuterBoundaryColor::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.AddLoadingSplashScreen
// 0x0038 (0x0038 - 0x0000)
struct OculusFunctionLibrary_AddLoadingSplashScreen final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationInMeters;                               // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              SizeInMeters;                                      // 0x0020(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaRotation;                                     // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClearBeforeAdd;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_AddLoadingSplashScreen) == 0x000008, "Wrong alignment on OculusFunctionLibrary_AddLoadingSplashScreen");
static_assert(sizeof(OculusFunctionLibrary_AddLoadingSplashScreen) == 0x000038, "Wrong size on OculusFunctionLibrary_AddLoadingSplashScreen");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, Texture) == 0x000000, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::Texture' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, TranslationInMeters) == 0x000008, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::TranslationInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, Rotation) == 0x000014, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::Rotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, SizeInMeters) == 0x000020, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::SizeInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, DeltaRotation) == 0x000028, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::DeltaRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_AddLoadingSplashScreen, bClearBeforeAdd) == 0x000034, "Member 'OculusFunctionLibrary_AddLoadingSplashScreen::bClearBeforeAdd' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.AreHeadPhonesPluggedIn
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_AreHeadPhonesPluggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_AreHeadPhonesPluggedIn) == 0x000001, "Wrong alignment on OculusFunctionLibrary_AreHeadPhonesPluggedIn");
static_assert(sizeof(OculusFunctionLibrary_AreHeadPhonesPluggedIn) == 0x000001, "Wrong size on OculusFunctionLibrary_AreHeadPhonesPluggedIn");
static_assert(offsetof(OculusFunctionLibrary_AreHeadPhonesPluggedIn, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_AreHeadPhonesPluggedIn::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.EnableArmModel
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_EnableArmModel final
{
public:
	bool                                          bArmModelEnable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_EnableArmModel) == 0x000001, "Wrong alignment on OculusFunctionLibrary_EnableArmModel");
static_assert(sizeof(OculusFunctionLibrary_EnableArmModel) == 0x000001, "Wrong size on OculusFunctionLibrary_EnableArmModel");
static_assert(offsetof(OculusFunctionLibrary_EnableArmModel, bArmModelEnable) == 0x000000, "Member 'OculusFunctionLibrary_EnableArmModel::bArmModelEnable' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.EnableAutoLoadingSplashScreen
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_EnableAutoLoadingSplashScreen final
{
public:
	bool                                          bAutoShowEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_EnableAutoLoadingSplashScreen) == 0x000001, "Wrong alignment on OculusFunctionLibrary_EnableAutoLoadingSplashScreen");
static_assert(sizeof(OculusFunctionLibrary_EnableAutoLoadingSplashScreen) == 0x000001, "Wrong size on OculusFunctionLibrary_EnableAutoLoadingSplashScreen");
static_assert(offsetof(OculusFunctionLibrary_EnableAutoLoadingSplashScreen, bAutoShowEnabled) == 0x000000, "Member 'OculusFunctionLibrary_EnableAutoLoadingSplashScreen::bAutoShowEnabled' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetBaseRotationAndBaseOffsetInMeters
// 0x0018 (0x0018 - 0x0000)
struct OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutBaseOffsetInMeters;                             // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters");
static_assert(sizeof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters) == 0x000018, "Wrong size on OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters, OutRotation) == 0x000000, "Member 'OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters::OutRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters, OutBaseOffsetInMeters) == 0x00000C, "Member 'OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters::OutBaseOffsetInMeters' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetBaseRotationAndPositionOffset
// 0x0018 (0x0018 - 0x0000)
struct OculusFunctionLibrary_GetBaseRotationAndPositionOffset final
{
public:
	struct FRotator                               OutRot;                                            // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutPosOffset;                                      // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetBaseRotationAndPositionOffset");
static_assert(sizeof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset) == 0x000018, "Wrong size on OculusFunctionLibrary_GetBaseRotationAndPositionOffset");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset, OutRot) == 0x000000, "Member 'OculusFunctionLibrary_GetBaseRotationAndPositionOffset::OutRot' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset, OutPosOffset) == 0x00000C, "Member 'OculusFunctionLibrary_GetBaseRotationAndPositionOffset::OutPosOffset' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetBatteryLevel
// 0x0004 (0x0004 - 0x0000)
struct OculusFunctionLibrary_GetBatteryLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetBatteryLevel) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetBatteryLevel");
static_assert(sizeof(OculusFunctionLibrary_GetBatteryLevel) == 0x000004, "Wrong size on OculusFunctionLibrary_GetBatteryLevel");
static_assert(offsetof(OculusFunctionLibrary_GetBatteryLevel, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetBatteryLevel::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetGearVRControllerHandedness
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_GetGearVRControllerHandedness final
{
public:
	EGearVRControllerHandedness_DEPRECATED        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetGearVRControllerHandedness) == 0x000001, "Wrong alignment on OculusFunctionLibrary_GetGearVRControllerHandedness");
static_assert(sizeof(OculusFunctionLibrary_GetGearVRControllerHandedness) == 0x000001, "Wrong size on OculusFunctionLibrary_GetGearVRControllerHandedness");
static_assert(offsetof(OculusFunctionLibrary_GetGearVRControllerHandedness, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetGearVRControllerHandedness::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetLoadingSplashParams
// 0x0038 (0x0038 - 0x0000)
struct OculusFunctionLibrary_GetLoadingSplashParams final
{
public:
	class FString                                 TexturePath;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DistanceInMeters;                                  // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SizeInMeters;                                      // 0x001C(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAxis;                                      // 0x0024(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDeltaInDeg;                                // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_GetLoadingSplashParams) == 0x000008, "Wrong alignment on OculusFunctionLibrary_GetLoadingSplashParams");
static_assert(sizeof(OculusFunctionLibrary_GetLoadingSplashParams) == 0x000038, "Wrong size on OculusFunctionLibrary_GetLoadingSplashParams");
static_assert(offsetof(OculusFunctionLibrary_GetLoadingSplashParams, TexturePath) == 0x000000, "Member 'OculusFunctionLibrary_GetLoadingSplashParams::TexturePath' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetLoadingSplashParams, DistanceInMeters) == 0x000010, "Member 'OculusFunctionLibrary_GetLoadingSplashParams::DistanceInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetLoadingSplashParams, SizeInMeters) == 0x00001C, "Member 'OculusFunctionLibrary_GetLoadingSplashParams::SizeInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetLoadingSplashParams, RotationAxis) == 0x000024, "Member 'OculusFunctionLibrary_GetLoadingSplashParams::RotationAxis' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetLoadingSplashParams, RotationDeltaInDeg) == 0x000030, "Member 'OculusFunctionLibrary_GetLoadingSplashParams::RotationDeltaInDeg' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetPose
// 0x0034 (0x0034 - 0x0000)
struct OculusFunctionLibrary_GetPose final
{
public:
	struct FRotator                               DeviceRotation;                                    // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DevicePosition;                                    // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NeckPosition;                                      // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOrienationForPlayerCamera;                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePositionForPlayerCamera;                       // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionScale;                                     // 0x0028(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetPose) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetPose");
static_assert(sizeof(OculusFunctionLibrary_GetPose) == 0x000034, "Wrong size on OculusFunctionLibrary_GetPose");
static_assert(offsetof(OculusFunctionLibrary_GetPose, DeviceRotation) == 0x000000, "Member 'OculusFunctionLibrary_GetPose::DeviceRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, DevicePosition) == 0x00000C, "Member 'OculusFunctionLibrary_GetPose::DevicePosition' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, NeckPosition) == 0x000018, "Member 'OculusFunctionLibrary_GetPose::NeckPosition' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, bUseOrienationForPlayerCamera) == 0x000024, "Member 'OculusFunctionLibrary_GetPose::bUseOrienationForPlayerCamera' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, bUsePositionForPlayerCamera) == 0x000025, "Member 'OculusFunctionLibrary_GetPose::bUsePositionForPlayerCamera' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, PositionScale) == 0x000028, "Member 'OculusFunctionLibrary_GetPose::PositionScale' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetRawSensorData
// 0x0038 (0x0038 - 0x0000)
struct OculusFunctionLibrary_GetRawSensorData final
{
public:
	struct FVector                                AngularAcceleration;                               // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearAcceleration;                                // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearVelocity;                                    // 0x0024(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInSeconds;                                     // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackedDeviceType                            DeviceType;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_GetRawSensorData) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetRawSensorData");
static_assert(sizeof(OculusFunctionLibrary_GetRawSensorData) == 0x000038, "Wrong size on OculusFunctionLibrary_GetRawSensorData");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, AngularAcceleration) == 0x000000, "Member 'OculusFunctionLibrary_GetRawSensorData::AngularAcceleration' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, LinearAcceleration) == 0x00000C, "Member 'OculusFunctionLibrary_GetRawSensorData::LinearAcceleration' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, AngularVelocity) == 0x000018, "Member 'OculusFunctionLibrary_GetRawSensorData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, LinearVelocity) == 0x000024, "Member 'OculusFunctionLibrary_GetRawSensorData::LinearVelocity' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, TimeInSeconds) == 0x000030, "Member 'OculusFunctionLibrary_GetRawSensorData::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, DeviceType) == 0x000034, "Member 'OculusFunctionLibrary_GetRawSensorData::DeviceType' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetTemperatureInCelsius
// 0x0004 (0x0004 - 0x0000)
struct OculusFunctionLibrary_GetTemperatureInCelsius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetTemperatureInCelsius) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetTemperatureInCelsius");
static_assert(sizeof(OculusFunctionLibrary_GetTemperatureInCelsius) == 0x000004, "Wrong size on OculusFunctionLibrary_GetTemperatureInCelsius");
static_assert(offsetof(OculusFunctionLibrary_GetTemperatureInCelsius, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_GetTemperatureInCelsius::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.GetUserProfile
// 0x0050 (0x0050 - 0x0000)
struct OculusFunctionLibrary_GetUserProfile final
{
public:
	struct FHmdUserProfile                        Profile;                                           // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_GetUserProfile) == 0x000008, "Wrong alignment on OculusFunctionLibrary_GetUserProfile");
static_assert(sizeof(OculusFunctionLibrary_GetUserProfile) == 0x000050, "Wrong size on OculusFunctionLibrary_GetUserProfile");
static_assert(offsetof(OculusFunctionLibrary_GetUserProfile, Profile) == 0x000000, "Member 'OculusFunctionLibrary_GetUserProfile::Profile' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetUserProfile, ReturnValue) == 0x000048, "Member 'OculusFunctionLibrary_GetUserProfile::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.HasInputFocus
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_HasInputFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_HasInputFocus) == 0x000001, "Wrong alignment on OculusFunctionLibrary_HasInputFocus");
static_assert(sizeof(OculusFunctionLibrary_HasInputFocus) == 0x000001, "Wrong size on OculusFunctionLibrary_HasInputFocus");
static_assert(offsetof(OculusFunctionLibrary_HasInputFocus, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_HasInputFocus::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.HasSystemOverlayPresent
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_HasSystemOverlayPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_HasSystemOverlayPresent) == 0x000001, "Wrong alignment on OculusFunctionLibrary_HasSystemOverlayPresent");
static_assert(sizeof(OculusFunctionLibrary_HasSystemOverlayPresent) == 0x000001, "Wrong size on OculusFunctionLibrary_HasSystemOverlayPresent");
static_assert(offsetof(OculusFunctionLibrary_HasSystemOverlayPresent, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_HasSystemOverlayPresent::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.HideLoadingSplashScreen
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_HideLoadingSplashScreen final
{
public:
	bool                                          bClear;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_HideLoadingSplashScreen) == 0x000001, "Wrong alignment on OculusFunctionLibrary_HideLoadingSplashScreen");
static_assert(sizeof(OculusFunctionLibrary_HideLoadingSplashScreen) == 0x000001, "Wrong size on OculusFunctionLibrary_HideLoadingSplashScreen");
static_assert(offsetof(OculusFunctionLibrary_HideLoadingSplashScreen, bClear) == 0x000000, "Member 'OculusFunctionLibrary_HideLoadingSplashScreen::bClear' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsAutoLoadingSplashScreenEnabled
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsAutoLoadingSplashScreenEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsAutoLoadingSplashScreenEnabled) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsAutoLoadingSplashScreenEnabled");
static_assert(sizeof(OculusFunctionLibrary_IsAutoLoadingSplashScreenEnabled) == 0x000001, "Wrong size on OculusFunctionLibrary_IsAutoLoadingSplashScreenEnabled");
static_assert(offsetof(OculusFunctionLibrary_IsAutoLoadingSplashScreenEnabled, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsAutoLoadingSplashScreenEnabled::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsControllerActive
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsControllerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsControllerActive) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsControllerActive");
static_assert(sizeof(OculusFunctionLibrary_IsControllerActive) == 0x000001, "Wrong size on OculusFunctionLibrary_IsControllerActive");
static_assert(offsetof(OculusFunctionLibrary_IsControllerActive, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsControllerActive::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsDeviceTracked
// 0x0002 (0x0002 - 0x0000)
struct OculusFunctionLibrary_IsDeviceTracked final
{
public:
	ETrackedDeviceType                            DeviceType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsDeviceTracked) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsDeviceTracked");
static_assert(sizeof(OculusFunctionLibrary_IsDeviceTracked) == 0x000002, "Wrong size on OculusFunctionLibrary_IsDeviceTracked");
static_assert(offsetof(OculusFunctionLibrary_IsDeviceTracked, DeviceType) == 0x000000, "Member 'OculusFunctionLibrary_IsDeviceTracked::DeviceType' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_IsDeviceTracked, ReturnValue) == 0x000001, "Member 'OculusFunctionLibrary_IsDeviceTracked::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsLoadingIconEnabled
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsLoadingIconEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsLoadingIconEnabled) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsLoadingIconEnabled");
static_assert(sizeof(OculusFunctionLibrary_IsLoadingIconEnabled) == 0x000001, "Wrong size on OculusFunctionLibrary_IsLoadingIconEnabled");
static_assert(offsetof(OculusFunctionLibrary_IsLoadingIconEnabled, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsLoadingIconEnabled::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsPowerLevelStateMinimum
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsPowerLevelStateMinimum final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsPowerLevelStateMinimum) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsPowerLevelStateMinimum");
static_assert(sizeof(OculusFunctionLibrary_IsPowerLevelStateMinimum) == 0x000001, "Wrong size on OculusFunctionLibrary_IsPowerLevelStateMinimum");
static_assert(offsetof(OculusFunctionLibrary_IsPowerLevelStateMinimum, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsPowerLevelStateMinimum::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.IsPowerLevelStateThrottled
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsPowerLevelStateThrottled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsPowerLevelStateThrottled) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsPowerLevelStateThrottled");
static_assert(sizeof(OculusFunctionLibrary_IsPowerLevelStateThrottled) == 0x000001, "Wrong size on OculusFunctionLibrary_IsPowerLevelStateThrottled");
static_assert(offsetof(OculusFunctionLibrary_IsPowerLevelStateThrottled, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsPowerLevelStateThrottled::ReturnValue' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetBaseRotationAndBaseOffsetInMeters
// 0x001C (0x001C - 0x0000)
struct OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BaseOffsetInMeters;                                // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientPositionSelector                       Options;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters");
static_assert(sizeof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters) == 0x00001C, "Wrong size on OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, Rotation) == 0x000000, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::Rotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, BaseOffsetInMeters) == 0x00000C, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::BaseOffsetInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, Options) == 0x000018, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::Options' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetBaseRotationAndPositionOffset
// 0x001C (0x001C - 0x0000)
struct OculusFunctionLibrary_SetBaseRotationAndPositionOffset final
{
public:
	struct FRotator                               BaseRot;                                           // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PosOffset;                                         // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientPositionSelector                       Options;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetBaseRotationAndPositionOffset");
static_assert(sizeof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset) == 0x00001C, "Wrong size on OculusFunctionLibrary_SetBaseRotationAndPositionOffset");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, BaseRot) == 0x000000, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::BaseRot' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, PosOffset) == 0x00000C, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::PosOffset' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, Options) == 0x000018, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::Options' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetCPUAndGPULevels
// 0x0008 (0x0008 - 0x0000)
struct OculusFunctionLibrary_SetCPUAndGPULevels final
{
public:
	int32                                         CPULevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GPULevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetCPUAndGPULevels) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetCPUAndGPULevels");
static_assert(sizeof(OculusFunctionLibrary_SetCPUAndGPULevels) == 0x000008, "Wrong size on OculusFunctionLibrary_SetCPUAndGPULevels");
static_assert(offsetof(OculusFunctionLibrary_SetCPUAndGPULevels, CPULevel) == 0x000000, "Member 'OculusFunctionLibrary_SetCPUAndGPULevels::CPULevel' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetCPUAndGPULevels, GPULevel) == 0x000004, "Member 'OculusFunctionLibrary_SetCPUAndGPULevels::GPULevel' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetLoadingSplashParams
// 0x0038 (0x0038 - 0x0000)
struct OculusFunctionLibrary_SetLoadingSplashParams final
{
public:
	class FString                                 TexturePath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DistanceInMeters;                                  // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SizeInMeters;                                      // 0x001C(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAxis;                                      // 0x0024(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDeltaInDeg;                                // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetLoadingSplashParams) == 0x000008, "Wrong alignment on OculusFunctionLibrary_SetLoadingSplashParams");
static_assert(sizeof(OculusFunctionLibrary_SetLoadingSplashParams) == 0x000038, "Wrong size on OculusFunctionLibrary_SetLoadingSplashParams");
static_assert(offsetof(OculusFunctionLibrary_SetLoadingSplashParams, TexturePath) == 0x000000, "Member 'OculusFunctionLibrary_SetLoadingSplashParams::TexturePath' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetLoadingSplashParams, DistanceInMeters) == 0x000010, "Member 'OculusFunctionLibrary_SetLoadingSplashParams::DistanceInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetLoadingSplashParams, SizeInMeters) == 0x00001C, "Member 'OculusFunctionLibrary_SetLoadingSplashParams::SizeInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetLoadingSplashParams, RotationAxis) == 0x000024, "Member 'OculusFunctionLibrary_SetLoadingSplashParams::RotationAxis' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetLoadingSplashParams, RotationDeltaInDeg) == 0x000030, "Member 'OculusFunctionLibrary_SetLoadingSplashParams::RotationDeltaInDeg' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.SetPositionScale3D
// 0x000C (0x000C - 0x0000)
struct OculusFunctionLibrary_SetPositionScale3D final
{
public:
	struct FVector                                PosScale3D;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetPositionScale3D) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetPositionScale3D");
static_assert(sizeof(OculusFunctionLibrary_SetPositionScale3D) == 0x00000C, "Wrong size on OculusFunctionLibrary_SetPositionScale3D");
static_assert(offsetof(OculusFunctionLibrary_SetPositionScale3D, PosScale3D) == 0x000000, "Member 'OculusFunctionLibrary_SetPositionScale3D::PosScale3D' has a wrong offset!");

// Function OculusHMD.OculusFunctionLibrary.ShowLoadingIcon
// 0x0008 (0x0008 - 0x0000)
struct OculusFunctionLibrary_ShowLoadingIcon final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_ShowLoadingIcon) == 0x000008, "Wrong alignment on OculusFunctionLibrary_ShowLoadingIcon");
static_assert(sizeof(OculusFunctionLibrary_ShowLoadingIcon) == 0x000008, "Wrong size on OculusFunctionLibrary_ShowLoadingIcon");
static_assert(offsetof(OculusFunctionLibrary_ShowLoadingIcon, Texture) == 0x000000, "Member 'OculusFunctionLibrary_ShowLoadingIcon::Texture' has a wrong offset!");

}

