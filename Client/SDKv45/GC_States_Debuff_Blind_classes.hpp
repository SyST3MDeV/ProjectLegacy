#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_States_Debuff_Blind

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OrionGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GC_States_Debuff_Blind.GC_States_Debuff_Blind_C
// 0x0030 (0x0870 - 0x0840)
class AGC_States_Debuff_Blind_C final : public AOrionGameplayCueNotify_Looping
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0840(0x0008)(Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_BlindStop;                                      // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_BlindStart;                                     // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CameraEffect;                                      // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GC_States_Debuff_Blind(int32 EntryPoint);
	void K2_WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UParticleSystemComponent* LoopingParticleSystem, const TArray<class UParticleSystemComponent*>& AdditionalParticleSystem, class UNiagaraComponent* LoopingNiagaraParticleSystem, const TArray<class UNiagaraComponent*>& AdditionalNiagaraParticleSystems);
	void K2_OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UParticleSystemComponent* RemovalParticleSystem, const TArray<class UParticleSystemComponent*>& AdditionalParticleSystems, class UNiagaraComponent* RemovalNiagaraParticleSystem, const TArray<class UNiagaraComponent*>& AdditionalNiagaraParticleSystems);
	void UserConstructionScript();
	bool WhileActive(class AActor* MyTarget, struct FGameplayCueParameters& Parameters);
	void ClearCameraEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GC_States_Debuff_Blind_C">();
	}
	static class AGC_States_Debuff_Blind_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGC_States_Debuff_Blind_C>();
	}
};
static_assert(alignof(AGC_States_Debuff_Blind_C) == 0x000010, "Wrong alignment on AGC_States_Debuff_Blind_C");
static_assert(sizeof(AGC_States_Debuff_Blind_C) == 0x000870, "Wrong size on AGC_States_Debuff_Blind_C");
static_assert(offsetof(AGC_States_Debuff_Blind_C, UberGraphFrame) == 0x000840, "Member 'AGC_States_Debuff_Blind_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGC_States_Debuff_Blind_C, PostProcess) == 0x000848, "Member 'AGC_States_Debuff_Blind_C::PostProcess' has a wrong offset!");
static_assert(offsetof(AGC_States_Debuff_Blind_C, FX_BlindStop) == 0x000850, "Member 'AGC_States_Debuff_Blind_C::FX_BlindStop' has a wrong offset!");
static_assert(offsetof(AGC_States_Debuff_Blind_C, FX_BlindStart) == 0x000858, "Member 'AGC_States_Debuff_Blind_C::FX_BlindStart' has a wrong offset!");
static_assert(offsetof(AGC_States_Debuff_Blind_C, CameraEffect) == 0x000860, "Member 'AGC_States_Debuff_Blind_C::CameraEffect' has a wrong offset!");

}

