#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Account

#include "Basic.hpp"


namespace SDK
{

// Enum Account.ECreateAccountResult
// NumValues: 0x0008
enum class ECreateAccountResult : uint8
{
	NotStarted                               = 0,
	Pending                                  = 1,
	Success                                  = 2,
	Console_LoginFailed                      = 3,
	Console_DuplicateAuthAssociation         = 4,
	DuplicateAccount                         = 5,
	GenericError                             = 6,
	ECreateAccountResult_MAX                 = 7,
};

// Enum Account.ELoginResult
// NumValues: 0x000F
enum class ELoginResult : uint8
{
	NotStarted                               = 0,
	Pending                                  = 1,
	Success                                  = 2,
	Console_LoginFailed                      = 3,
	Console_AuthFailed                       = 4,
	Console_MissingAuthAssociation           = 5,
	Console_DuplicateAuthAssociation         = 6,
	AuthFailed                               = 7,
	NotEntitled                              = 8,
	EULACheckFailed                          = 9,
	ServiceUnavailable                       = 10,
	GenericError                             = 11,
	RejoinCheckFailure                       = 12,
	ConnectionFailed                         = 13,
	ELoginResult_MAX                         = 14,
};

// ScriptStruct Account.WebEnvUrl
// 0x0030 (0x0030 - 0x0000)
struct FWebEnvUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUrl;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Environment;                                       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebEnvUrl) == 0x000008, "Wrong alignment on FWebEnvUrl");
static_assert(sizeof(FWebEnvUrl) == 0x000030, "Wrong size on FWebEnvUrl");
static_assert(offsetof(FWebEnvUrl, URL) == 0x000000, "Member 'FWebEnvUrl::URL' has a wrong offset!");
static_assert(offsetof(FWebEnvUrl, RedirectUrl) == 0x000010, "Member 'FWebEnvUrl::RedirectUrl' has a wrong offset!");
static_assert(offsetof(FWebEnvUrl, Environment) == 0x000020, "Member 'FWebEnvUrl::Environment' has a wrong offset!");

// ScriptStruct Account.GiftMessage
// 0x0030 (0x0030 - 0x0000)
struct FGiftMessage final
{
public:
	class FString                                 GiftCode;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderName;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGiftMessage) == 0x000008, "Wrong alignment on FGiftMessage");
static_assert(sizeof(FGiftMessage) == 0x000030, "Wrong size on FGiftMessage");
static_assert(offsetof(FGiftMessage, GiftCode) == 0x000000, "Member 'FGiftMessage::GiftCode' has a wrong offset!");
static_assert(offsetof(FGiftMessage, SenderName) == 0x000010, "Member 'FGiftMessage::SenderName' has a wrong offset!");

// ScriptStruct Account.ExchangeAccessParams
// 0x0020 (0x0020 - 0x0000)
struct FExchangeAccessParams final
{
public:
	class FString                                 EntitlementId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VendorReceipt;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExchangeAccessParams) == 0x000008, "Wrong alignment on FExchangeAccessParams");
static_assert(sizeof(FExchangeAccessParams) == 0x000020, "Wrong size on FExchangeAccessParams");
static_assert(offsetof(FExchangeAccessParams, EntitlementId) == 0x000000, "Member 'FExchangeAccessParams::EntitlementId' has a wrong offset!");
static_assert(offsetof(FExchangeAccessParams, VendorReceipt) == 0x000010, "Member 'FExchangeAccessParams::VendorReceipt' has a wrong offset!");

}

